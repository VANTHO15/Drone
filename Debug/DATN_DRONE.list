
DATN_DRONE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010abc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  08010c48  08010c48  00020c48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f08  08010f08  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08010f08  08010f08  00020f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f10  08010f10  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08010f10  08010f10  00020f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08010f1c  08010f1c  00020f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08010f24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c4c  20000080  08010fa0  00030080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000ccc  08010fa0  00030ccc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e181  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f6f  00000000  00000000  0004e22d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001730  00000000  00000000  000521a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015b0  00000000  00000000  000538d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027d4b  00000000  00000000  00054e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000140f9  00000000  00000000  0007cbcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8b12  00000000  00000000  00090cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001697d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a98  00000000  00000000  00169854  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08010c2c 	.word	0x08010c2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08010c2c 	.word	0x08010c2c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_uldivmod>:
 8000bd0:	b953      	cbnz	r3, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd2:	b94a      	cbnz	r2, 8000be8 <__aeabi_uldivmod+0x18>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	2800      	cmpeq	r0, #0
 8000bda:	bf1c      	itt	ne
 8000bdc:	f04f 31ff 	movne.w	r1, #4294967295
 8000be0:	f04f 30ff 	movne.w	r0, #4294967295
 8000be4:	f000 b972 	b.w	8000ecc <__aeabi_idiv0>
 8000be8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf0:	f000 f806 	bl	8000c00 <__udivmoddi4>
 8000bf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfc:	b004      	add	sp, #16
 8000bfe:	4770      	bx	lr

08000c00 <__udivmoddi4>:
 8000c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c04:	9e08      	ldr	r6, [sp, #32]
 8000c06:	4604      	mov	r4, r0
 8000c08:	4688      	mov	r8, r1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d14b      	bne.n	8000ca6 <__udivmoddi4+0xa6>
 8000c0e:	428a      	cmp	r2, r1
 8000c10:	4615      	mov	r5, r2
 8000c12:	d967      	bls.n	8000ce4 <__udivmoddi4+0xe4>
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	b14a      	cbz	r2, 8000c2e <__udivmoddi4+0x2e>
 8000c1a:	f1c2 0720 	rsb	r7, r2, #32
 8000c1e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c22:	fa20 f707 	lsr.w	r7, r0, r7
 8000c26:	4095      	lsls	r5, r2
 8000c28:	ea47 0803 	orr.w	r8, r7, r3
 8000c2c:	4094      	lsls	r4, r2
 8000c2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c38:	fa1f fc85 	uxth.w	ip, r5
 8000c3c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c40:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c44:	fb07 f10c 	mul.w	r1, r7, ip
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	d909      	bls.n	8000c60 <__udivmoddi4+0x60>
 8000c4c:	18eb      	adds	r3, r5, r3
 8000c4e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c52:	f080 811b 	bcs.w	8000e8c <__udivmoddi4+0x28c>
 8000c56:	4299      	cmp	r1, r3
 8000c58:	f240 8118 	bls.w	8000e8c <__udivmoddi4+0x28c>
 8000c5c:	3f02      	subs	r7, #2
 8000c5e:	442b      	add	r3, r5
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c68:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c70:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c74:	45a4      	cmp	ip, r4
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x8c>
 8000c78:	192c      	adds	r4, r5, r4
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	f080 8107 	bcs.w	8000e90 <__udivmoddi4+0x290>
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	f240 8104 	bls.w	8000e90 <__udivmoddi4+0x290>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	442c      	add	r4, r5
 8000c8c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c90:	eba4 040c 	sub.w	r4, r4, ip
 8000c94:	2700      	movs	r7, #0
 8000c96:	b11e      	cbz	r6, 8000ca0 <__udivmoddi4+0xa0>
 8000c98:	40d4      	lsrs	r4, r2
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e9c6 4300 	strd	r4, r3, [r6]
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d909      	bls.n	8000cbe <__udivmoddi4+0xbe>
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	f000 80eb 	beq.w	8000e86 <__udivmoddi4+0x286>
 8000cb0:	2700      	movs	r7, #0
 8000cb2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cb6:	4638      	mov	r0, r7
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	fab3 f783 	clz	r7, r3
 8000cc2:	2f00      	cmp	r7, #0
 8000cc4:	d147      	bne.n	8000d56 <__udivmoddi4+0x156>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0xd0>
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	f200 80fa 	bhi.w	8000ec4 <__udivmoddi4+0x2c4>
 8000cd0:	1a84      	subs	r4, r0, r2
 8000cd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	4698      	mov	r8, r3
 8000cda:	2e00      	cmp	r6, #0
 8000cdc:	d0e0      	beq.n	8000ca0 <__udivmoddi4+0xa0>
 8000cde:	e9c6 4800 	strd	r4, r8, [r6]
 8000ce2:	e7dd      	b.n	8000ca0 <__udivmoddi4+0xa0>
 8000ce4:	b902      	cbnz	r2, 8000ce8 <__udivmoddi4+0xe8>
 8000ce6:	deff      	udf	#255	; 0xff
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	2a00      	cmp	r2, #0
 8000cee:	f040 808f 	bne.w	8000e10 <__udivmoddi4+0x210>
 8000cf2:	1b49      	subs	r1, r1, r5
 8000cf4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf8:	fa1f f885 	uxth.w	r8, r5
 8000cfc:	2701      	movs	r7, #1
 8000cfe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d02:	0c23      	lsrs	r3, r4, #16
 8000d04:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x124>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x122>
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2bc>
 8000d22:	4684      	mov	ip, r0
 8000d24:	1a59      	subs	r1, r3, r1
 8000d26:	b2a3      	uxth	r3, r4
 8000d28:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d2c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d30:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d34:	fb08 f800 	mul.w	r8, r8, r0
 8000d38:	45a0      	cmp	r8, r4
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x14c>
 8000d3c:	192c      	adds	r4, r5, r4
 8000d3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x14a>
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	f200 80b6 	bhi.w	8000eb6 <__udivmoddi4+0x2b6>
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	eba4 0408 	sub.w	r4, r4, r8
 8000d50:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d54:	e79f      	b.n	8000c96 <__udivmoddi4+0x96>
 8000d56:	f1c7 0c20 	rsb	ip, r7, #32
 8000d5a:	40bb      	lsls	r3, r7
 8000d5c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d60:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d64:	fa01 f407 	lsl.w	r4, r1, r7
 8000d68:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d6c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d70:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d74:	4325      	orrs	r5, r4
 8000d76:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d7a:	0c2c      	lsrs	r4, r5, #16
 8000d7c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d80:	fa1f fa8e 	uxth.w	sl, lr
 8000d84:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d88:	fb09 f40a 	mul.w	r4, r9, sl
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d92:	fa00 f107 	lsl.w	r1, r0, r7
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b0>
 8000d98:	eb1e 0303 	adds.w	r3, lr, r3
 8000d9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000da0:	f080 8087 	bcs.w	8000eb2 <__udivmoddi4+0x2b2>
 8000da4:	429c      	cmp	r4, r3
 8000da6:	f240 8084 	bls.w	8000eb2 <__udivmoddi4+0x2b2>
 8000daa:	f1a9 0902 	sub.w	r9, r9, #2
 8000dae:	4473      	add	r3, lr
 8000db0:	1b1b      	subs	r3, r3, r4
 8000db2:	b2ad      	uxth	r5, r5
 8000db4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dbc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dc0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dc4:	45a2      	cmp	sl, r4
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1da>
 8000dc8:	eb1e 0404 	adds.w	r4, lr, r4
 8000dcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd0:	d26b      	bcs.n	8000eaa <__udivmoddi4+0x2aa>
 8000dd2:	45a2      	cmp	sl, r4
 8000dd4:	d969      	bls.n	8000eaa <__udivmoddi4+0x2aa>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4474      	add	r4, lr
 8000dda:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dde:	fba0 8902 	umull	r8, r9, r0, r2
 8000de2:	eba4 040a 	sub.w	r4, r4, sl
 8000de6:	454c      	cmp	r4, r9
 8000de8:	46c2      	mov	sl, r8
 8000dea:	464b      	mov	r3, r9
 8000dec:	d354      	bcc.n	8000e98 <__udivmoddi4+0x298>
 8000dee:	d051      	beq.n	8000e94 <__udivmoddi4+0x294>
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	d069      	beq.n	8000ec8 <__udivmoddi4+0x2c8>
 8000df4:	ebb1 050a 	subs.w	r5, r1, sl
 8000df8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dfc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e00:	40fd      	lsrs	r5, r7
 8000e02:	40fc      	lsrs	r4, r7
 8000e04:	ea4c 0505 	orr.w	r5, ip, r5
 8000e08:	e9c6 5400 	strd	r5, r4, [r6]
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	e747      	b.n	8000ca0 <__udivmoddi4+0xa0>
 8000e10:	f1c2 0320 	rsb	r3, r2, #32
 8000e14:	fa20 f703 	lsr.w	r7, r0, r3
 8000e18:	4095      	lsls	r5, r2
 8000e1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e26:	4338      	orrs	r0, r7
 8000e28:	0c01      	lsrs	r1, r0, #16
 8000e2a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e2e:	fa1f f885 	uxth.w	r8, r5
 8000e32:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3a:	fb07 f308 	mul.w	r3, r7, r8
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x256>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e4c:	d22f      	bcs.n	8000eae <__udivmoddi4+0x2ae>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d92d      	bls.n	8000eae <__udivmoddi4+0x2ae>
 8000e52:	3f02      	subs	r7, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1acb      	subs	r3, r1, r3
 8000e58:	b281      	uxth	r1, r0
 8000e5a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e66:	fb00 f308 	mul.w	r3, r0, r8
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d907      	bls.n	8000e7e <__udivmoddi4+0x27e>
 8000e6e:	1869      	adds	r1, r5, r1
 8000e70:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e74:	d217      	bcs.n	8000ea6 <__udivmoddi4+0x2a6>
 8000e76:	428b      	cmp	r3, r1
 8000e78:	d915      	bls.n	8000ea6 <__udivmoddi4+0x2a6>
 8000e7a:	3802      	subs	r0, #2
 8000e7c:	4429      	add	r1, r5
 8000e7e:	1ac9      	subs	r1, r1, r3
 8000e80:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e84:	e73b      	b.n	8000cfe <__udivmoddi4+0xfe>
 8000e86:	4637      	mov	r7, r6
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e709      	b.n	8000ca0 <__udivmoddi4+0xa0>
 8000e8c:	4607      	mov	r7, r0
 8000e8e:	e6e7      	b.n	8000c60 <__udivmoddi4+0x60>
 8000e90:	4618      	mov	r0, r3
 8000e92:	e6fb      	b.n	8000c8c <__udivmoddi4+0x8c>
 8000e94:	4541      	cmp	r1, r8
 8000e96:	d2ab      	bcs.n	8000df0 <__udivmoddi4+0x1f0>
 8000e98:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e9c:	eb69 020e 	sbc.w	r2, r9, lr
 8000ea0:	3801      	subs	r0, #1
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	e7a4      	b.n	8000df0 <__udivmoddi4+0x1f0>
 8000ea6:	4660      	mov	r0, ip
 8000ea8:	e7e9      	b.n	8000e7e <__udivmoddi4+0x27e>
 8000eaa:	4618      	mov	r0, r3
 8000eac:	e795      	b.n	8000dda <__udivmoddi4+0x1da>
 8000eae:	4667      	mov	r7, ip
 8000eb0:	e7d1      	b.n	8000e56 <__udivmoddi4+0x256>
 8000eb2:	4681      	mov	r9, r0
 8000eb4:	e77c      	b.n	8000db0 <__udivmoddi4+0x1b0>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	442c      	add	r4, r5
 8000eba:	e747      	b.n	8000d4c <__udivmoddi4+0x14c>
 8000ebc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec0:	442b      	add	r3, r5
 8000ec2:	e72f      	b.n	8000d24 <__udivmoddi4+0x124>
 8000ec4:	4638      	mov	r0, r7
 8000ec6:	e708      	b.n	8000cda <__udivmoddi4+0xda>
 8000ec8:	4637      	mov	r7, r6
 8000eca:	e6e9      	b.n	8000ca0 <__udivmoddi4+0xa0>

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <read_calliberation_data>:
#define atmPress 101325 //Pa



void read_calliberation_data (void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
 8000ee4:	829a      	strh	r2, [r3, #20]
	uint16_t Callib_Start = 0xAA;
 8000ee6:	23aa      	movs	r3, #170	; 0xaa
 8000ee8:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000eea:	8afa      	ldrh	r2, [r7, #22]
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef0:	9302      	str	r3, [sp, #8]
 8000ef2:	2316      	movs	r3, #22
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2301      	movs	r3, #1
 8000efc:	21ee      	movs	r1, #238	; 0xee
 8000efe:	4836      	ldr	r0, [pc, #216]	; (8000fd8 <read_calliberation_data+0x108>)
 8000f00:	f009 fa08 	bl	800a314 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000f04:	783b      	ldrb	r3, [r7, #0]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	b21a      	sxth	r2, r3
 8000f0a:	787b      	ldrb	r3, [r7, #1]
 8000f0c:	b21b      	sxth	r3, r3
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	b21a      	sxth	r2, r3
 8000f12:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <read_calliberation_data+0x10c>)
 8000f14:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000f16:	78bb      	ldrb	r3, [r7, #2]
 8000f18:	021b      	lsls	r3, r3, #8
 8000f1a:	b21a      	sxth	r2, r3
 8000f1c:	78fb      	ldrb	r3, [r7, #3]
 8000f1e:	b21b      	sxth	r3, r3
 8000f20:	4313      	orrs	r3, r2
 8000f22:	b21a      	sxth	r2, r3
 8000f24:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <read_calliberation_data+0x110>)
 8000f26:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000f28:	793b      	ldrb	r3, [r7, #4]
 8000f2a:	021b      	lsls	r3, r3, #8
 8000f2c:	b21a      	sxth	r2, r3
 8000f2e:	797b      	ldrb	r3, [r7, #5]
 8000f30:	b21b      	sxth	r3, r3
 8000f32:	4313      	orrs	r3, r2
 8000f34:	b21a      	sxth	r2, r3
 8000f36:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <read_calliberation_data+0x114>)
 8000f38:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	b21b      	sxth	r3, r3
 8000f44:	4313      	orrs	r3, r2
 8000f46:	b21b      	sxth	r3, r3
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	4b27      	ldr	r3, [pc, #156]	; (8000fe8 <read_calliberation_data+0x118>)
 8000f4c:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8000f4e:	7a3b      	ldrb	r3, [r7, #8]
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	b21a      	sxth	r2, r3
 8000f54:	7a7b      	ldrb	r3, [r7, #9]
 8000f56:	b21b      	sxth	r3, r3
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	b21b      	sxth	r3, r3
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	4b23      	ldr	r3, [pc, #140]	; (8000fec <read_calliberation_data+0x11c>)
 8000f60:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8000f62:	7abb      	ldrb	r3, [r7, #10]
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	7afb      	ldrb	r3, [r7, #11]
 8000f6a:	b21b      	sxth	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <read_calliberation_data+0x120>)
 8000f74:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8000f76:	7b3b      	ldrb	r3, [r7, #12]
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	b21a      	sxth	r2, r3
 8000f7c:	7b7b      	ldrb	r3, [r7, #13]
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b21a      	sxth	r2, r3
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <read_calliberation_data+0x124>)
 8000f86:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8000f88:	7bbb      	ldrb	r3, [r7, #14]
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	b21a      	sxth	r2, r3
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <read_calliberation_data+0x128>)
 8000f98:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8000f9a:	7c3b      	ldrb	r3, [r7, #16]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	b21a      	sxth	r2, r3
 8000fa0:	7c7b      	ldrb	r3, [r7, #17]
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	b21a      	sxth	r2, r3
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <read_calliberation_data+0x12c>)
 8000faa:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8000fac:	7cbb      	ldrb	r3, [r7, #18]
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	b21a      	sxth	r2, r3
 8000fb2:	7cfb      	ldrb	r3, [r7, #19]
 8000fb4:	b21b      	sxth	r3, r3
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <read_calliberation_data+0x130>)
 8000fbc:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 8000fbe:	7d3b      	ldrb	r3, [r7, #20]
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	b21a      	sxth	r2, r3
 8000fc4:	7d7b      	ldrb	r3, [r7, #21]
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <read_calliberation_data+0x134>)
 8000fce:	801a      	strh	r2, [r3, #0]

}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000400 	.word	0x20000400
 8000fdc:	2000009c 	.word	0x2000009c
 8000fe0:	2000009e 	.word	0x2000009e
 8000fe4:	200000a0 	.word	0x200000a0
 8000fe8:	200000a2 	.word	0x200000a2
 8000fec:	200000a4 	.word	0x200000a4
 8000ff0:	200000a6 	.word	0x200000a6
 8000ff4:	200000a8 	.word	0x200000a8
 8000ff8:	200000aa 	.word	0x200000aa
 8000ffc:	200000ac 	.word	0x200000ac
 8001000:	200000ae 	.word	0x200000ae
 8001004:	200000b0 	.word	0x200000b0

08001008 <Get_UPress>:
	return Temp/10.0;
}

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af04      	add	r7, sp, #16
 800100e:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	019b      	lsls	r3, r3, #6
 8001016:	b2db      	uxtb	r3, r3
 8001018:	3334      	adds	r3, #52	; 0x34
 800101a:	b2db      	uxtb	r3, r3
 800101c:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	2100      	movs	r1, #0
 8001024:	460a      	mov	r2, r1
 8001026:	801a      	strh	r2, [r3, #0]
 8001028:	460a      	mov	r2, r1
 800102a:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 800102c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001030:	9302      	str	r3, [sp, #8]
 8001032:	2301      	movs	r3, #1
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	f107 030f 	add.w	r3, r7, #15
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2301      	movs	r3, #1
 800103e:	22f4      	movs	r2, #244	; 0xf4
 8001040:	21ee      	movs	r1, #238	; 0xee
 8001042:	481f      	ldr	r0, [pc, #124]	; (80010c0 <Get_UPress+0xb8>)
 8001044:	f009 f86c 	bl	800a120 <HAL_I2C_Mem_Write>
	switch (oss)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b03      	cmp	r3, #3
 800104c:	d81a      	bhi.n	8001084 <Get_UPress+0x7c>
 800104e:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <Get_UPress+0x4c>)
 8001050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001054:	08001065 	.word	0x08001065
 8001058:	0800106d 	.word	0x0800106d
 800105c:	08001075 	.word	0x08001075
 8001060:	0800107d 	.word	0x0800107d
	{
		case (0):
			HAL_Delay (5);
 8001064:	2005      	movs	r0, #5
 8001066:	f007 f995 	bl	8008394 <HAL_Delay>
			break;
 800106a:	e00b      	b.n	8001084 <Get_UPress+0x7c>
		case (1):
			HAL_Delay (8);
 800106c:	2008      	movs	r0, #8
 800106e:	f007 f991 	bl	8008394 <HAL_Delay>
			break;
 8001072:	e007      	b.n	8001084 <Get_UPress+0x7c>
		case (2):
			HAL_Delay (14);
 8001074:	200e      	movs	r0, #14
 8001076:	f007 f98d 	bl	8008394 <HAL_Delay>
			break;
 800107a:	e003      	b.n	8001084 <Get_UPress+0x7c>
		case (3):
			HAL_Delay (26);
 800107c:	201a      	movs	r0, #26
 800107e:	f007 f989 	bl	8008394 <HAL_Delay>
			break;
 8001082:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 8001084:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001088:	9302      	str	r3, [sp, #8]
 800108a:	2303      	movs	r3, #3
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	22f6      	movs	r2, #246	; 0xf6
 8001098:	21ee      	movs	r1, #238	; 0xee
 800109a:	4809      	ldr	r0, [pc, #36]	; (80010c0 <Get_UPress+0xb8>)
 800109c:	f009 f93a 	bl	800a314 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 80010a0:	7b3b      	ldrb	r3, [r7, #12]
 80010a2:	041a      	lsls	r2, r3, #16
 80010a4:	7b7b      	ldrb	r3, [r7, #13]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	4413      	add	r3, r2
 80010aa:	7bba      	ldrb	r2, [r7, #14]
 80010ac:	441a      	add	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f1c3 0308 	rsb	r3, r3, #8
 80010b4:	fa42 f303 	asr.w	r3, r2, r3
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000400 	.word	0x20000400

080010c4 <BMP180_GetPress>:


float BMP180_GetPress (int oss)
{
 80010c4:	b5b0      	push	{r4, r5, r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff9b 	bl	8001008 <Get_UPress>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	4ba8      	ldr	r3, [pc, #672]	; (8001378 <BMP180_GetPress+0x2b4>)
 80010d8:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80010da:	4ba8      	ldr	r3, [pc, #672]	; (800137c <BMP180_GetPress+0x2b8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4aa8      	ldr	r2, [pc, #672]	; (8001380 <BMP180_GetPress+0x2bc>)
 80010e0:	8812      	ldrh	r2, [r2, #0]
 80010e2:	1a9b      	subs	r3, r3, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f9c1 	bl	800046c <__aeabi_i2d>
 80010ea:	4604      	mov	r4, r0
 80010ec:	460d      	mov	r5, r1
 80010ee:	4ba5      	ldr	r3, [pc, #660]	; (8001384 <BMP180_GetPress+0x2c0>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f9ba 	bl	800046c <__aeabi_i2d>
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4ba2      	ldr	r3, [pc, #648]	; (8001388 <BMP180_GetPress+0x2c4>)
 80010fe:	f7ff fb49 	bl	8000794 <__aeabi_ddiv>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4620      	mov	r0, r4
 8001108:	4629      	mov	r1, r5
 800110a:	f7ff fa19 	bl	8000540 <__aeabi_dmul>
 800110e:	4603      	mov	r3, r0
 8001110:	460c      	mov	r4, r1
 8001112:	4618      	mov	r0, r3
 8001114:	4621      	mov	r1, r4
 8001116:	f7ff fcc3 	bl	8000aa0 <__aeabi_d2iz>
 800111a:	4602      	mov	r2, r0
 800111c:	4b9b      	ldr	r3, [pc, #620]	; (800138c <BMP180_GetPress+0x2c8>)
 800111e:	601a      	str	r2, [r3, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001120:	4b9b      	ldr	r3, [pc, #620]	; (8001390 <BMP180_GetPress+0x2cc>)
 8001122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff f9a0 	bl	800046c <__aeabi_i2d>
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	4b98      	ldr	r3, [pc, #608]	; (8001394 <BMP180_GetPress+0x2d0>)
 8001132:	f7ff fa05 	bl	8000540 <__aeabi_dmul>
 8001136:	4603      	mov	r3, r0
 8001138:	460c      	mov	r4, r1
 800113a:	4625      	mov	r5, r4
 800113c:	461c      	mov	r4, r3
 800113e:	4b96      	ldr	r3, [pc, #600]	; (8001398 <BMP180_GetPress+0x2d4>)
 8001140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001144:	461a      	mov	r2, r3
 8001146:	4b91      	ldr	r3, [pc, #580]	; (800138c <BMP180_GetPress+0x2c8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f98d 	bl	800046c <__aeabi_i2d>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4620      	mov	r0, r4
 8001158:	4629      	mov	r1, r5
 800115a:	f7ff fb1b 	bl	8000794 <__aeabi_ddiv>
 800115e:	4603      	mov	r3, r0
 8001160:	460c      	mov	r4, r1
 8001162:	4618      	mov	r0, r3
 8001164:	4621      	mov	r1, r4
 8001166:	f7ff fc9b 	bl	8000aa0 <__aeabi_d2iz>
 800116a:	4602      	mov	r2, r0
 800116c:	4b8b      	ldr	r3, [pc, #556]	; (800139c <BMP180_GetPress+0x2d8>)
 800116e:	601a      	str	r2, [r3, #0]
	B5 = X1+X2;
 8001170:	4b86      	ldr	r3, [pc, #536]	; (800138c <BMP180_GetPress+0x2c8>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b89      	ldr	r3, [pc, #548]	; (800139c <BMP180_GetPress+0x2d8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4413      	add	r3, r2
 800117a:	4a89      	ldr	r2, [pc, #548]	; (80013a0 <BMP180_GetPress+0x2dc>)
 800117c:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 800117e:	4b88      	ldr	r3, [pc, #544]	; (80013a0 <BMP180_GetPress+0x2dc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001186:	4a87      	ldr	r2, [pc, #540]	; (80013a4 <BMP180_GetPress+0x2e0>)
 8001188:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 800118a:	4b87      	ldr	r3, [pc, #540]	; (80013a8 <BMP180_GetPress+0x2e4>)
 800118c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f96b 	bl	800046c <__aeabi_i2d>
 8001196:	4604      	mov	r4, r0
 8001198:	460d      	mov	r5, r1
 800119a:	4b82      	ldr	r3, [pc, #520]	; (80013a4 <BMP180_GetPress+0x2e0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a81      	ldr	r2, [pc, #516]	; (80013a4 <BMP180_GetPress+0x2e0>)
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	fb02 f303 	mul.w	r3, r2, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f960 	bl	800046c <__aeabi_i2d>
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b7e      	ldr	r3, [pc, #504]	; (80013ac <BMP180_GetPress+0x2e8>)
 80011b2:	f7ff faef 	bl	8000794 <__aeabi_ddiv>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4620      	mov	r0, r4
 80011bc:	4629      	mov	r1, r5
 80011be:	f7ff f9bf 	bl	8000540 <__aeabi_dmul>
 80011c2:	4603      	mov	r3, r0
 80011c4:	460c      	mov	r4, r1
 80011c6:	4618      	mov	r0, r3
 80011c8:	4621      	mov	r1, r4
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	4b71      	ldr	r3, [pc, #452]	; (8001394 <BMP180_GetPress+0x2d0>)
 80011d0:	f7ff fae0 	bl	8000794 <__aeabi_ddiv>
 80011d4:	4603      	mov	r3, r0
 80011d6:	460c      	mov	r4, r1
 80011d8:	4618      	mov	r0, r3
 80011da:	4621      	mov	r1, r4
 80011dc:	f7ff fc60 	bl	8000aa0 <__aeabi_d2iz>
 80011e0:	4602      	mov	r2, r0
 80011e2:	4b6a      	ldr	r3, [pc, #424]	; (800138c <BMP180_GetPress+0x2c8>)
 80011e4:	601a      	str	r2, [r3, #0]
	X2 = AC2*B6/(pow(2,11));
 80011e6:	4b72      	ldr	r3, [pc, #456]	; (80013b0 <BMP180_GetPress+0x2ec>)
 80011e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b6d      	ldr	r3, [pc, #436]	; (80013a4 <BMP180_GetPress+0x2e0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	fb03 f302 	mul.w	r3, r3, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f938 	bl	800046c <__aeabi_i2d>
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	4b64      	ldr	r3, [pc, #400]	; (8001394 <BMP180_GetPress+0x2d0>)
 8001202:	f7ff fac7 	bl	8000794 <__aeabi_ddiv>
 8001206:	4603      	mov	r3, r0
 8001208:	460c      	mov	r4, r1
 800120a:	4618      	mov	r0, r3
 800120c:	4621      	mov	r1, r4
 800120e:	f7ff fc47 	bl	8000aa0 <__aeabi_d2iz>
 8001212:	4602      	mov	r2, r0
 8001214:	4b61      	ldr	r3, [pc, #388]	; (800139c <BMP180_GetPress+0x2d8>)
 8001216:	601a      	str	r2, [r3, #0]
	X3 = X1+X2;
 8001218:	4b5c      	ldr	r3, [pc, #368]	; (800138c <BMP180_GetPress+0x2c8>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b5f      	ldr	r3, [pc, #380]	; (800139c <BMP180_GetPress+0x2d8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4413      	add	r3, r2
 8001222:	4a64      	ldr	r2, [pc, #400]	; (80013b4 <BMP180_GetPress+0x2f0>)
 8001224:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 8001226:	4b64      	ldr	r3, [pc, #400]	; (80013b8 <BMP180_GetPress+0x2f4>)
 8001228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800122c:	009a      	lsls	r2, r3, #2
 800122e:	4b61      	ldr	r3, [pc, #388]	; (80013b4 <BMP180_GetPress+0x2f0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	441a      	add	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	3302      	adds	r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	da00      	bge.n	8001242 <BMP180_GetPress+0x17e>
 8001240:	3303      	adds	r3, #3
 8001242:	109b      	asrs	r3, r3, #2
 8001244:	461a      	mov	r2, r3
 8001246:	4b5d      	ldr	r3, [pc, #372]	; (80013bc <BMP180_GetPress+0x2f8>)
 8001248:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 800124a:	4b5d      	ldr	r3, [pc, #372]	; (80013c0 <BMP180_GetPress+0x2fc>)
 800124c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001250:	461a      	mov	r2, r3
 8001252:	4b54      	ldr	r3, [pc, #336]	; (80013a4 <BMP180_GetPress+0x2e0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	fb03 f302 	mul.w	r3, r3, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f906 	bl	800046c <__aeabi_i2d>
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	4b57      	ldr	r3, [pc, #348]	; (80013c4 <BMP180_GetPress+0x300>)
 8001266:	f7ff fa95 	bl	8000794 <__aeabi_ddiv>
 800126a:	4603      	mov	r3, r0
 800126c:	460c      	mov	r4, r1
 800126e:	4618      	mov	r0, r3
 8001270:	4621      	mov	r1, r4
 8001272:	f7ff fc15 	bl	8000aa0 <__aeabi_d2iz>
 8001276:	4602      	mov	r2, r0
 8001278:	4b44      	ldr	r3, [pc, #272]	; (800138c <BMP180_GetPress+0x2c8>)
 800127a:	601a      	str	r2, [r3, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 800127c:	4b52      	ldr	r3, [pc, #328]	; (80013c8 <BMP180_GetPress+0x304>)
 800127e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f8f2 	bl	800046c <__aeabi_i2d>
 8001288:	4604      	mov	r4, r0
 800128a:	460d      	mov	r5, r1
 800128c:	4b45      	ldr	r3, [pc, #276]	; (80013a4 <BMP180_GetPress+0x2e0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a44      	ldr	r2, [pc, #272]	; (80013a4 <BMP180_GetPress+0x2e0>)
 8001292:	6812      	ldr	r2, [r2, #0]
 8001294:	fb02 f303 	mul.w	r3, r2, r3
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f8e7 	bl	800046c <__aeabi_i2d>
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	4b42      	ldr	r3, [pc, #264]	; (80013ac <BMP180_GetPress+0x2e8>)
 80012a4:	f7ff fa76 	bl	8000794 <__aeabi_ddiv>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4620      	mov	r0, r4
 80012ae:	4629      	mov	r1, r5
 80012b0:	f7ff f946 	bl	8000540 <__aeabi_dmul>
 80012b4:	4603      	mov	r3, r0
 80012b6:	460c      	mov	r4, r1
 80012b8:	4618      	mov	r0, r3
 80012ba:	4621      	mov	r1, r4
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	4b42      	ldr	r3, [pc, #264]	; (80013cc <BMP180_GetPress+0x308>)
 80012c2:	f7ff fa67 	bl	8000794 <__aeabi_ddiv>
 80012c6:	4603      	mov	r3, r0
 80012c8:	460c      	mov	r4, r1
 80012ca:	4618      	mov	r0, r3
 80012cc:	4621      	mov	r1, r4
 80012ce:	f7ff fbe7 	bl	8000aa0 <__aeabi_d2iz>
 80012d2:	4602      	mov	r2, r0
 80012d4:	4b31      	ldr	r3, [pc, #196]	; (800139c <BMP180_GetPress+0x2d8>)
 80012d6:	601a      	str	r2, [r3, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 80012d8:	4b2c      	ldr	r3, [pc, #176]	; (800138c <BMP180_GetPress+0x2c8>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b2f      	ldr	r3, [pc, #188]	; (800139c <BMP180_GetPress+0x2d8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4413      	add	r3, r2
 80012e2:	3302      	adds	r3, #2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f8c1 	bl	800046c <__aeabi_i2d>
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	4b38      	ldr	r3, [pc, #224]	; (80013d0 <BMP180_GetPress+0x30c>)
 80012f0:	f7ff fa50 	bl	8000794 <__aeabi_ddiv>
 80012f4:	4603      	mov	r3, r0
 80012f6:	460c      	mov	r4, r1
 80012f8:	4618      	mov	r0, r3
 80012fa:	4621      	mov	r1, r4
 80012fc:	f7ff fbd0 	bl	8000aa0 <__aeabi_d2iz>
 8001300:	4602      	mov	r2, r0
 8001302:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <BMP180_GetPress+0x2f0>)
 8001304:	601a      	str	r2, [r3, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 8001306:	4b33      	ldr	r3, [pc, #204]	; (80013d4 <BMP180_GetPress+0x310>)
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <BMP180_GetPress+0x2f0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001314:	fb03 f302 	mul.w	r3, r3, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f897 	bl	800044c <__aeabi_ui2d>
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <BMP180_GetPress+0x2c4>)
 8001324:	f7ff fa36 	bl	8000794 <__aeabi_ddiv>
 8001328:	4603      	mov	r3, r0
 800132a:	460c      	mov	r4, r1
 800132c:	4618      	mov	r0, r3
 800132e:	4621      	mov	r1, r4
 8001330:	f7ff fbde 	bl	8000af0 <__aeabi_d2uiz>
 8001334:	4602      	mov	r2, r0
 8001336:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <BMP180_GetPress+0x314>)
 8001338:	601a      	str	r2, [r3, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <BMP180_GetPress+0x2b4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <BMP180_GetPress+0x2f8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	f24c 3150 	movw	r1, #50000	; 0xc350
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	fa41 f202 	asr.w	r2, r1, r2
 8001350:	fb02 f303 	mul.w	r3, r2, r3
 8001354:	4a21      	ldr	r2, [pc, #132]	; (80013dc <BMP180_GetPress+0x318>)
 8001356:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 8001358:	4b20      	ldr	r3, [pc, #128]	; (80013dc <BMP180_GetPress+0x318>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	db41      	blt.n	80013e4 <BMP180_GetPress+0x320>
 8001360:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <BMP180_GetPress+0x318>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	005a      	lsls	r2, r3, #1
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <BMP180_GetPress+0x314>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	fbb2 f3f3 	udiv	r3, r2, r3
 800136e:	461a      	mov	r2, r3
 8001370:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <BMP180_GetPress+0x31c>)
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	e040      	b.n	80013f8 <BMP180_GetPress+0x334>
 8001376:	bf00      	nop
 8001378:	200000b8 	.word	0x200000b8
 800137c:	200000b4 	.word	0x200000b4
 8001380:	200000a6 	.word	0x200000a6
 8001384:	200000a4 	.word	0x200000a4
 8001388:	40e00000 	.word	0x40e00000
 800138c:	200000bc 	.word	0x200000bc
 8001390:	200000ae 	.word	0x200000ae
 8001394:	40a00000 	.word	0x40a00000
 8001398:	200000b0 	.word	0x200000b0
 800139c:	200000c0 	.word	0x200000c0
 80013a0:	200000cc 	.word	0x200000cc
 80013a4:	200000d4 	.word	0x200000d4
 80013a8:	200000aa 	.word	0x200000aa
 80013ac:	40b00000 	.word	0x40b00000
 80013b0:	2000009e 	.word	0x2000009e
 80013b4:	200000c4 	.word	0x200000c4
 80013b8:	2000009c 	.word	0x2000009c
 80013bc:	200000c8 	.word	0x200000c8
 80013c0:	200000a0 	.word	0x200000a0
 80013c4:	40c00000 	.word	0x40c00000
 80013c8:	200000a8 	.word	0x200000a8
 80013cc:	40f00000 	.word	0x40f00000
 80013d0:	40100000 	.word	0x40100000
 80013d4:	200000a2 	.word	0x200000a2
 80013d8:	200000d0 	.word	0x200000d0
 80013dc:	200000d8 	.word	0x200000d8
 80013e0:	200000dc 	.word	0x200000dc
	else Press = (B7/B4)*2;
 80013e4:	4b46      	ldr	r3, [pc, #280]	; (8001500 <BMP180_GetPress+0x43c>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b46      	ldr	r3, [pc, #280]	; (8001504 <BMP180_GetPress+0x440>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	461a      	mov	r2, r3
 80013f4:	4b44      	ldr	r3, [pc, #272]	; (8001508 <BMP180_GetPress+0x444>)
 80013f6:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 80013f8:	4b43      	ldr	r3, [pc, #268]	; (8001508 <BMP180_GetPress+0x444>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f835 	bl	800046c <__aeabi_i2d>
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	4b41      	ldr	r3, [pc, #260]	; (800150c <BMP180_GetPress+0x448>)
 8001408:	f7ff f9c4 	bl	8000794 <__aeabi_ddiv>
 800140c:	4603      	mov	r3, r0
 800140e:	460c      	mov	r4, r1
 8001410:	4625      	mov	r5, r4
 8001412:	461c      	mov	r4, r3
 8001414:	4b3c      	ldr	r3, [pc, #240]	; (8001508 <BMP180_GetPress+0x444>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f827 	bl	800046c <__aeabi_i2d>
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	4b3a      	ldr	r3, [pc, #232]	; (800150c <BMP180_GetPress+0x448>)
 8001424:	f7ff f9b6 	bl	8000794 <__aeabi_ddiv>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4620      	mov	r0, r4
 800142e:	4629      	mov	r1, r5
 8001430:	f7ff f886 	bl	8000540 <__aeabi_dmul>
 8001434:	4603      	mov	r3, r0
 8001436:	460c      	mov	r4, r1
 8001438:	4618      	mov	r0, r3
 800143a:	4621      	mov	r1, r4
 800143c:	f7ff fb30 	bl	8000aa0 <__aeabi_d2iz>
 8001440:	4602      	mov	r2, r0
 8001442:	4b33      	ldr	r3, [pc, #204]	; (8001510 <BMP180_GetPress+0x44c>)
 8001444:	601a      	str	r2, [r3, #0]
	X1 = (X1*3038)/(pow(2,16));
 8001446:	4b32      	ldr	r3, [pc, #200]	; (8001510 <BMP180_GetPress+0x44c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f640 32de 	movw	r2, #3038	; 0xbde
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f80a 	bl	800046c <__aeabi_i2d>
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <BMP180_GetPress+0x450>)
 800145e:	f7ff f999 	bl	8000794 <__aeabi_ddiv>
 8001462:	4603      	mov	r3, r0
 8001464:	460c      	mov	r4, r1
 8001466:	4618      	mov	r0, r3
 8001468:	4621      	mov	r1, r4
 800146a:	f7ff fb19 	bl	8000aa0 <__aeabi_d2iz>
 800146e:	4602      	mov	r2, r0
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <BMP180_GetPress+0x44c>)
 8001472:	601a      	str	r2, [r3, #0]
	X2 = (-7357*Press)/(pow(2,16));
 8001474:	4b24      	ldr	r3, [pc, #144]	; (8001508 <BMP180_GetPress+0x444>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a27      	ldr	r2, [pc, #156]	; (8001518 <BMP180_GetPress+0x454>)
 800147a:	fb02 f303 	mul.w	r3, r2, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f7fe fff4 	bl	800046c <__aeabi_i2d>
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	4b22      	ldr	r3, [pc, #136]	; (8001514 <BMP180_GetPress+0x450>)
 800148a:	f7ff f983 	bl	8000794 <__aeabi_ddiv>
 800148e:	4603      	mov	r3, r0
 8001490:	460c      	mov	r4, r1
 8001492:	4618      	mov	r0, r3
 8001494:	4621      	mov	r1, r4
 8001496:	f7ff fb03 	bl	8000aa0 <__aeabi_d2iz>
 800149a:	4602      	mov	r2, r0
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <BMP180_GetPress+0x458>)
 800149e:	601a      	str	r2, [r3, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <BMP180_GetPress+0x444>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7fe ffe1 	bl	800046c <__aeabi_i2d>
 80014aa:	4604      	mov	r4, r0
 80014ac:	460d      	mov	r5, r1
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <BMP180_GetPress+0x44c>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4b1a      	ldr	r3, [pc, #104]	; (800151c <BMP180_GetPress+0x458>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe ffd5 	bl	800046c <__aeabi_i2d>
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <BMP180_GetPress+0x45c>)
 80014c8:	f7ff f964 	bl	8000794 <__aeabi_ddiv>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4620      	mov	r0, r4
 80014d2:	4629      	mov	r1, r5
 80014d4:	f7fe fe7e 	bl	80001d4 <__adddf3>
 80014d8:	4603      	mov	r3, r0
 80014da:	460c      	mov	r4, r1
 80014dc:	4618      	mov	r0, r3
 80014de:	4621      	mov	r1, r4
 80014e0:	f7ff fade 	bl	8000aa0 <__aeabi_d2iz>
 80014e4:	4602      	mov	r2, r0
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <BMP180_GetPress+0x444>)
 80014e8:	601a      	str	r2, [r3, #0]

	return Press;
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <BMP180_GetPress+0x444>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80014f6:	eeb0 0a67 	vmov.f32	s0, s15
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001500:	200000d8 	.word	0x200000d8
 8001504:	200000d0 	.word	0x200000d0
 8001508:	200000dc 	.word	0x200000dc
 800150c:	40700000 	.word	0x40700000
 8001510:	200000bc 	.word	0x200000bc
 8001514:	40f00000 	.word	0x40f00000
 8001518:	ffffe343 	.word	0xffffe343
 800151c:	200000c0 	.word	0x200000c0
 8001520:	40300000 	.word	0x40300000
 8001524:	00000000 	.word	0x00000000

08001528 <BMP180_GetAlt>:


float BMP180_GetAlt (int oss)
{
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff fdc7 	bl	80010c4 <BMP180_GetPress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <BMP180_GetAlt+0x90>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001542:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80015bc <BMP180_GetAlt+0x94>
 8001546:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800154a:	ee16 0a90 	vmov	r0, s13
 800154e:	f7fe ff9f 	bl	8000490 <__aeabi_f2d>
 8001552:	4603      	mov	r3, r0
 8001554:	460c      	mov	r4, r1
 8001556:	ed9f 1b14 	vldr	d1, [pc, #80]	; 80015a8 <BMP180_GetAlt+0x80>
 800155a:	ec44 3b10 	vmov	d0, r3, r4
 800155e:	f00d f823 	bl	800e5a8 <pow>
 8001562:	ec54 3b10 	vmov	r3, r4, d0
 8001566:	461a      	mov	r2, r3
 8001568:	4623      	mov	r3, r4
 800156a:	f04f 0000 	mov.w	r0, #0
 800156e:	4914      	ldr	r1, [pc, #80]	; (80015c0 <BMP180_GetAlt+0x98>)
 8001570:	f7fe fe2e 	bl	80001d0 <__aeabi_dsub>
 8001574:	4603      	mov	r3, r0
 8001576:	460c      	mov	r4, r1
 8001578:	4618      	mov	r0, r3
 800157a:	4621      	mov	r1, r4
 800157c:	a30c      	add	r3, pc, #48	; (adr r3, 80015b0 <BMP180_GetAlt+0x88>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	f7fe ffdd 	bl	8000540 <__aeabi_dmul>
 8001586:	4603      	mov	r3, r0
 8001588:	460c      	mov	r4, r1
 800158a:	4618      	mov	r0, r3
 800158c:	4621      	mov	r1, r4
 800158e:	f7ff facf 	bl	8000b30 <__aeabi_d2f>
 8001592:	4603      	mov	r3, r0
 8001594:	ee07 3a90 	vmov	s15, r3
}
 8001598:	eeb0 0a67 	vmov.f32	s0, s15
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd90      	pop	{r4, r7, pc}
 80015a2:	bf00      	nop
 80015a4:	f3af 8000 	nop.w
 80015a8:	ccd745e4 	.word	0xccd745e4
 80015ac:	3fc85b95 	.word	0x3fc85b95
 80015b0:	00000000 	.word	0x00000000
 80015b4:	40e5a540 	.word	0x40e5a540
 80015b8:	200000dc 	.word	0x200000dc
 80015bc:	47c5e680 	.word	0x47c5e680
 80015c0:	3ff00000 	.word	0x3ff00000

080015c4 <BMP180_Start>:

void BMP180_Start (void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	read_calliberation_data();
 80015c8:	f7ff fc82 	bl	8000ed0 <read_calliberation_data>
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80015da:	edd7 7a01 	vldr	s15, [r7, #4]
 80015de:	eef0 7ae7 	vabs.f32	s15, s15
 80015e2:	eeb0 0a67 	vmov.f32	s0, s15
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <_ZN3GPSC1EP12GPIO_TypeDeft>:
#include <math.h>

extern UART_HandleTypeDef huart1;
MySerial Serial1(&huart1);

GPS::GPS(GPIO_TypeDef* thePort, uint16_t thePin){
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	4613      	mov	r3, r2
 80015fc:	80fb      	strh	r3, [r7, #6]
	this->port = thePort;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	this->pin = thePin;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	88fa      	ldrh	r2, [r7, #6]
 800160a:	f8a3 2210 	strh.w	r2, [r3, #528]	; 0x210
}
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4618      	mov	r0, r3
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <_ZN3GPS20setKgainConstantRollEff>:

void GPS::setKgainConstantRoll(float thePgainRoll, float theDgainRoll){
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	ed87 0a02 	vstr	s0, [r7, #8]
 8001628:	edc7 0a01 	vstr	s1, [r7, #4]
	this->Pgain = thePgainRoll;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	this->Dgain = theDgainRoll;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_ZN3GPS4InitEv>:

HAL_StatusTypeDef GPS :: Init()
{
 8001648:	b5b0      	push	{r4, r5, r7, lr}
 800164a:	b090      	sub	sp, #64	; 0x40
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	Serial1.Init();
 8001650:	483d      	ldr	r0, [pc, #244]	; (8001748 <_ZN3GPS4InitEv+0x100>)
 8001652:	f002 fef9 	bl	8004448 <_ZN8MySerial4InitEv>
	uint8_t Disable_GPGSV[11] = {0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x03, 0x00, 0xFD, 0x15};
 8001656:	4a3d      	ldr	r2, [pc, #244]	; (800174c <_ZN3GPS4InitEv+0x104>)
 8001658:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800165c:	ca07      	ldmia	r2, {r0, r1, r2}
 800165e:	c303      	stmia	r3!, {r0, r1}
 8001660:	801a      	strh	r2, [r3, #0]
 8001662:	3302      	adds	r3, #2
 8001664:	0c12      	lsrs	r2, r2, #16
 8001666:	701a      	strb	r2, [r3, #0]
	uint8_t Set_to_5Hz[14] = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00,0xC8,
 8001668:	4b39      	ldr	r3, [pc, #228]	; (8001750 <_ZN3GPS4InitEv+0x108>)
 800166a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800166e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001670:	c407      	stmia	r4!, {r0, r1, r2}
 8001672:	8023      	strh	r3, [r4, #0]
			0x00, 0x01, 0x00, 0x01, 0x00, 0xDE, 0x6A};
	uint8_t Set_to_57kbps[28] = {0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00,
 8001674:	4b37      	ldr	r3, [pc, #220]	; (8001754 <_ZN3GPS4InitEv+0x10c>)
 8001676:	f107 0408 	add.w	r4, r7, #8
 800167a:	461d      	mov	r5, r3
 800167c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800167e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001680:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001684:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			0xD0, 0x08, 0x00, 0x00, 0x00, 0xE1, 0x00, 0x00, 0x07, 0x00,
			0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE2, 0xE1};

	// Vo hieu hoa goi tin GPGSV bang giao thuc Ublox
	if ( HAL_UART_Transmit(Serial1.uart, Disable_GPGSV, 11, 500) != HAL_OK){
 8001688:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <_ZN3GPS4InitEv+0x100>)
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001690:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001694:	220b      	movs	r2, #11
 8001696:	f00c f856 	bl	800d746 <HAL_UART_Transmit>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf14      	ite	ne
 80016a0:	2301      	movne	r3, #1
 80016a2:	2300      	moveq	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <_ZN3GPS4InitEv+0x66>
		return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e048      	b.n	8001740 <_ZN3GPS4InitEv+0xf8>
	}
	// Khoang thoi gian nho nhat de giao tiep voi module GPS o baundrat 9600bps
	HAL_Delay(350);
 80016ae:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80016b2:	f006 fe6f 	bl	8008394 <HAL_Delay>

	// Thiet lap refresh rate la 5Hz bang giao thuc ublox
	if ( HAL_UART_Transmit(Serial1.uart, Set_to_5Hz, 14, 500) != HAL_OK){
 80016b6:	4b24      	ldr	r3, [pc, #144]	; (8001748 <_ZN3GPS4InitEv+0x100>)
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80016be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016c2:	220e      	movs	r2, #14
 80016c4:	f00c f83f 	bl	800d746 <HAL_UART_Transmit>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	bf14      	ite	ne
 80016ce:	2301      	movne	r3, #1
 80016d0:	2300      	moveq	r3, #0
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <_ZN3GPS4InitEv+0x94>
		return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e031      	b.n	8001740 <_ZN3GPS4InitEv+0xf8>
	}
	// Khoang thoi gian nho nhat de giao tiep voi module GPS o baundrate 9600bps
	HAL_Delay(350);
 80016dc:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80016e0:	f006 fe58 	bl	8008394 <HAL_Delay>

	// Thiet lap toc do baud rate = 57.6kbps bang giao thuc ublox
	if ( HAL_UART_Transmit(Serial1.uart, Set_to_57kbps, 28, 500) != HAL_OK){
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <_ZN3GPS4InitEv+0x100>)
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	f107 0108 	add.w	r1, r7, #8
 80016ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016f0:	221c      	movs	r2, #28
 80016f2:	f00c f828 	bl	800d746 <HAL_UART_Transmit>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	bf14      	ite	ne
 80016fc:	2301      	movne	r3, #1
 80016fe:	2300      	moveq	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <_ZN3GPS4InitEv+0xc2>
		return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e01a      	b.n	8001740 <_ZN3GPS4InitEv+0xf8>
	}
	HAL_Delay(200);
 800170a:	20c8      	movs	r0, #200	; 0xc8
 800170c:	f006 fe42 	bl	8008394 <HAL_Delay>

	Serial1.uart->Init.BaudRate = 57600;
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <_ZN3GPS4InitEv+0x100>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001718:	605a      	str	r2, [r3, #4]
	if (HAL_UART_Init(Serial1.uart) != HAL_OK)
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <_ZN3GPS4InitEv+0x100>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f00b ffc4 	bl	800d6ac <HAL_UART_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	bf14      	ite	ne
 800172a:	2301      	movne	r3, #1
 800172c:	2300      	moveq	r3, #0
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <_ZN3GPS4InitEv+0xf0>
	{
		return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e003      	b.n	8001740 <_ZN3GPS4InitEv+0xf8>
	}
	HAL_Delay(200);
 8001738:	20c8      	movs	r0, #200	; 0xc8
 800173a:	f006 fe2b 	bl	8008394 <HAL_Delay>

	return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3740      	adds	r7, #64	; 0x40
 8001744:	46bd      	mov	sp, r7
 8001746:	bdb0      	pop	{r4, r5, r7, pc}
 8001748:	200000e0 	.word	0x200000e0
 800174c:	08010c48 	.word	0x08010c48
 8001750:	08010c54 	.word	0x08010c54
 8001754:	08010c64 	.word	0x08010c64

08001758 <_ZN3GPS7ReadGPSEhPhS0_f>:

void GPS :: ReadGPS(uint8_t theStateMachine, uint8_t* theError, uint8_t* theFlightMode, float theAngleYaw)
{
 8001758:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800175c:	b088      	sub	sp, #32
 800175e:	af00      	add	r7, sp, #0
 8001760:	6178      	str	r0, [r7, #20]
 8001762:	60fa      	str	r2, [r7, #12]
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	ed87 0a01 	vstr	s0, [r7, #4]
 800176a:	460b      	mov	r3, r1
 800176c:	74fb      	strb	r3, [r7, #19]
	if (gpsAddCounter >= 0)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f9b3 308a 	ldrsh.w	r3, [r3, #138]	; 0x8a
 8001774:	2b00      	cmp	r3, #0
 8001776:	db09      	blt.n	800178c <_ZN3GPS7ReadGPSEhPhS0_f+0x34>
	{
		gpsAddCounter --;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f9b3 308a 	ldrsh.w	r3, [r3, #138]	; 0x8a
 800177e:	b29b      	uxth	r3, r3
 8001780:	3b01      	subs	r3, #1
 8001782:	b29b      	uxth	r3, r3
 8001784:	b21a      	sxth	r2, r3
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	}
	while (Serial1.IsDataAvailable() && !newLineFound )
 800178c:	4823      	ldr	r0, [pc, #140]	; (800181c <_ZN3GPS7ReadGPSEhPhS0_f+0xc4>)
 800178e:	f002 fee1 	bl	8004554 <_ZN8MySerial15IsDataAvailableEv>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <_ZN3GPS7ReadGPSEhPhS0_f+0x4c>
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	7b1b      	ldrb	r3, [r3, #12]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <_ZN3GPS7ReadGPSEhPhS0_f+0x4c>
 80017a0:	2301      	movs	r3, #1
 80017a2:	e000      	b.n	80017a6 <_ZN3GPS7ReadGPSEhPhS0_f+0x4e>
 80017a4:	2300      	movs	r3, #0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d03a      	beq.n	8001820 <_ZN3GPS7ReadGPSEhPhS0_f+0xc8>
	{
		char readSerialByte = Serial1.Read();
 80017aa:	481c      	ldr	r0, [pc, #112]	; (800181c <_ZN3GPS7ReadGPSEhPhS0_f+0xc4>)
 80017ac:	f002 fe9d 	bl	80044ea <_ZN8MySerial4ReadEv>
 80017b0:	4603      	mov	r3, r0
 80017b2:	77fb      	strb	r3, [r7, #31]
		if (readSerialByte == '$') {
 80017b4:	7ffb      	ldrb	r3, [r7, #31]
 80017b6:	2b24      	cmp	r3, #36	; 0x24
 80017b8:	d118      	bne.n	80017ec <_ZN3GPS7ReadGPSEhPhS0_f+0x94>
			for (messageCounter = 0; messageCounter <= 99; messageCounter ++)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2200      	movs	r2, #0
 80017be:	805a      	strh	r2, [r3, #2]
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	885b      	ldrh	r3, [r3, #2]
 80017c4:	2b63      	cmp	r3, #99	; 0x63
 80017c6:	d80d      	bhi.n	80017e4 <_ZN3GPS7ReadGPSEhPhS0_f+0x8c>
			{
				incommingMessage[messageCounter] = '-';
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	885b      	ldrh	r3, [r3, #2]
 80017cc:	461a      	mov	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	4413      	add	r3, r2
 80017d2:	222d      	movs	r2, #45	; 0x2d
 80017d4:	765a      	strb	r2, [r3, #25]
			for (messageCounter = 0; messageCounter <= 99; messageCounter ++)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	885b      	ldrh	r3, [r3, #2]
 80017da:	3301      	adds	r3, #1
 80017dc:	b29a      	uxth	r2, r3
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	805a      	strh	r2, [r3, #2]
 80017e2:	e7ed      	b.n	80017c0 <_ZN3GPS7ReadGPSEhPhS0_f+0x68>
			}
			messageCounter = 0;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2200      	movs	r2, #0
 80017e8:	805a      	strh	r2, [r3, #2]
 80017ea:	e009      	b.n	8001800 <_ZN3GPS7ReadGPSEhPhS0_f+0xa8>
		}
		else if (messageCounter <= 99)messageCounter ++;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	885b      	ldrh	r3, [r3, #2]
 80017f0:	2b63      	cmp	r3, #99	; 0x63
 80017f2:	d805      	bhi.n	8001800 <_ZN3GPS7ReadGPSEhPhS0_f+0xa8>
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	885b      	ldrh	r3, [r3, #2]
 80017f8:	3301      	adds	r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	805a      	strh	r2, [r3, #2]
		incommingMessage[messageCounter] = readSerialByte;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	885b      	ldrh	r3, [r3, #2]
 8001804:	461a      	mov	r2, r3
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	4413      	add	r3, r2
 800180a:	7ffa      	ldrb	r2, [r7, #31]
 800180c:	765a      	strb	r2, [r3, #25]
		if (readSerialByte == '*') newLineFound = 1;
 800180e:	7ffb      	ldrb	r3, [r7, #31]
 8001810:	2b2a      	cmp	r3, #42	; 0x2a
 8001812:	d1bb      	bne.n	800178c <_ZN3GPS7ReadGPSEhPhS0_f+0x34>
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	2201      	movs	r2, #1
 8001818:	731a      	strb	r2, [r3, #12]
	while (Serial1.IsDataAvailable() && !newLineFound )
 800181a:	e7b7      	b.n	800178c <_ZN3GPS7ReadGPSEhPhS0_f+0x34>
 800181c:	200000e0 	.word	0x200000e0
	}
	if (newLineFound == 1)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	7b1b      	ldrb	r3, [r3, #12]
 8001824:	2b01      	cmp	r3, #1
 8001826:	f040 821a 	bne.w	8001c5e <_ZN3GPS7ReadGPSEhPhS0_f+0x506>
	{
		newLineFound = 0;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2200      	movs	r2, #0
 800182e:	731a      	strb	r2, [r3, #12]
		if (incommingMessage[4] == 'L' && incommingMessage[5] == 'L' && incommingMessage[7] == ',')
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	7f5b      	ldrb	r3, [r3, #29]
 8001834:	2b4c      	cmp	r3, #76	; 0x4c
 8001836:	d118      	bne.n	800186a <_ZN3GPS7ReadGPSEhPhS0_f+0x112>
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	7f9b      	ldrb	r3, [r3, #30]
 800183c:	2b4c      	cmp	r3, #76	; 0x4c
 800183e:	d114      	bne.n	800186a <_ZN3GPS7ReadGPSEhPhS0_f+0x112>
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001846:	2b2c      	cmp	r3, #44	; 0x2c
 8001848:	d10f      	bne.n	800186a <_ZN3GPS7ReadGPSEhPhS0_f+0x112>
		{

			latGPS = 0;
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2200      	movs	r2, #0
 800184e:	605a      	str	r2, [r3, #4]
			lonGPS = 0;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
			previousLatGPS = 0;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2200      	movs	r2, #0
 800185a:	615a      	str	r2, [r3, #20]
			previousLonGPS = 0;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
			numberUsedSats = 0;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}
		if (incommingMessage[4] == 'G' && incommingMessage[5] == 'A' && (incommingMessage[44] == '1' || incommingMessage[44] == '2'))
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	7f5b      	ldrb	r3, [r3, #29]
 800186e:	2b47      	cmp	r3, #71	; 0x47
 8001870:	f040 81e5 	bne.w	8001c3e <_ZN3GPS7ReadGPSEhPhS0_f+0x4e6>
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	7f9b      	ldrb	r3, [r3, #30]
 8001878:	2b41      	cmp	r3, #65	; 0x41
 800187a:	f040 81e0 	bne.w	8001c3e <_ZN3GPS7ReadGPSEhPhS0_f+0x4e6>
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001884:	2b31      	cmp	r3, #49	; 0x31
 8001886:	d005      	beq.n	8001894 <_ZN3GPS7ReadGPSEhPhS0_f+0x13c>
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800188e:	2b32      	cmp	r3, #50	; 0x32
 8001890:	f040 81d5 	bne.w	8001c3e <_ZN3GPS7ReadGPSEhPhS0_f+0x4e6>
		{
			actualLatGPS = ((int)incommingMessage[19] - 48) *  (long)10000000;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800189a:	3b30      	subs	r3, #48	; 0x30
 800189c:	4aa4      	ldr	r2, [pc, #656]	; (8001b30 <_ZN3GPS7ReadGPSEhPhS0_f+0x3d8>)
 800189e:	fb02 f203 	mul.w	r2, r2, r3
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			actualLatGPS += ((int)incommingMessage[20] - 48) * (long)1000000;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80018b4:	3b30      	subs	r3, #48	; 0x30
 80018b6:	499f      	ldr	r1, [pc, #636]	; (8001b34 <_ZN3GPS7ReadGPSEhPhS0_f+0x3dc>)
 80018b8:	fb01 f303 	mul.w	r3, r1, r3
 80018bc:	441a      	add	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			actualLatGPS += ((int)incommingMessage[22] - 48) * (long)100000;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80018d0:	3b30      	subs	r3, #48	; 0x30
 80018d2:	4999      	ldr	r1, [pc, #612]	; (8001b38 <_ZN3GPS7ReadGPSEhPhS0_f+0x3e0>)
 80018d4:	fb01 f303 	mul.w	r3, r1, r3
 80018d8:	441a      	add	r2, r3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			actualLatGPS += ((int)incommingMessage[23] - 48) * (long)10000;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018ec:	3b30      	subs	r3, #48	; 0x30
 80018ee:	f242 7110 	movw	r1, #10000	; 0x2710
 80018f2:	fb01 f303 	mul.w	r3, r1, r3
 80018f6:	441a      	add	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			actualLatGPS += ((int)incommingMessage[24] - 48) * (long)1000;
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800190a:	3b30      	subs	r3, #48	; 0x30
 800190c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001910:	fb01 f303 	mul.w	r3, r1, r3
 8001914:	441a      	add	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			actualLatGPS += ((int)incommingMessage[25] - 48) * (long)100;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001928:	3b30      	subs	r3, #48	; 0x30
 800192a:	2164      	movs	r1, #100	; 0x64
 800192c:	fb01 f303 	mul.w	r3, r1, r3
 8001930:	441a      	add	r2, r3
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			actualLatGPS += ((int)incommingMessage[26] - 48) * (long)10;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001944:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	18ca      	adds	r2, r1, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			actualLatGPS /= (long)6;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800195e:	4a77      	ldr	r2, [pc, #476]	; (8001b3c <_ZN3GPS7ReadGPSEhPhS0_f+0x3e4>)
 8001960:	fb82 1203 	smull	r1, r2, r2, r3
 8001964:	17db      	asrs	r3, r3, #31
 8001966:	1ad2      	subs	r2, r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			actualLatGPS += ((int)incommingMessage[17] - 48) *  (long)100000000;
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800197a:	3b30      	subs	r3, #48	; 0x30
 800197c:	4970      	ldr	r1, [pc, #448]	; (8001b40 <_ZN3GPS7ReadGPSEhPhS0_f+0x3e8>)
 800197e:	fb01 f303 	mul.w	r3, r1, r3
 8001982:	441a      	add	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			actualLatGPS += ((int)incommingMessage[18] - 48) *  (long)10000000;
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001996:	3b30      	subs	r3, #48	; 0x30
 8001998:	4965      	ldr	r1, [pc, #404]	; (8001b30 <_ZN3GPS7ReadGPSEhPhS0_f+0x3d8>)
 800199a:	fb01 f303 	mul.w	r3, r1, r3
 800199e:	441a      	add	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			actualLatGPS /= 10;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019ac:	4a65      	ldr	r2, [pc, #404]	; (8001b44 <_ZN3GPS7ReadGPSEhPhS0_f+0x3ec>)
 80019ae:	fb82 1203 	smull	r1, r2, r2, r3
 80019b2:	1092      	asrs	r2, r2, #2
 80019b4:	17db      	asrs	r3, r3, #31
 80019b6:	1ad2      	subs	r2, r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

			actualLonGPS = ((int)incommingMessage[33] - 48) *  (long)10000000;
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80019c4:	3b30      	subs	r3, #48	; 0x30
 80019c6:	4a5a      	ldr	r2, [pc, #360]	; (8001b30 <_ZN3GPS7ReadGPSEhPhS0_f+0x3d8>)
 80019c8:	fb02 f203 	mul.w	r2, r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			actualLonGPS += ((int)incommingMessage[34] - 48) * (long)1000000;
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80019de:	3b30      	subs	r3, #48	; 0x30
 80019e0:	4954      	ldr	r1, [pc, #336]	; (8001b34 <_ZN3GPS7ReadGPSEhPhS0_f+0x3dc>)
 80019e2:	fb01 f303 	mul.w	r3, r1, r3
 80019e6:	441a      	add	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			actualLonGPS += ((int)incommingMessage[36] - 48) * (long)100000;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019fa:	3b30      	subs	r3, #48	; 0x30
 80019fc:	494e      	ldr	r1, [pc, #312]	; (8001b38 <_ZN3GPS7ReadGPSEhPhS0_f+0x3e0>)
 80019fe:	fb01 f303 	mul.w	r3, r1, r3
 8001a02:	441a      	add	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			actualLonGPS += ((int)incommingMessage[37] - 48) * (long)10000;
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a16:	3b30      	subs	r3, #48	; 0x30
 8001a18:	f242 7110 	movw	r1, #10000	; 0x2710
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	441a      	add	r2, r3
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			actualLonGPS += ((int)incommingMessage[38] - 48) * (long)1000;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a34:	3b30      	subs	r3, #48	; 0x30
 8001a36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a3a:	fb01 f303 	mul.w	r3, r1, r3
 8001a3e:	441a      	add	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			actualLonGPS += ((int)incommingMessage[39] - 48) * (long)100;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a52:	3b30      	subs	r3, #48	; 0x30
 8001a54:	2164      	movs	r1, #100	; 0x64
 8001a56:	fb01 f303 	mul.w	r3, r1, r3
 8001a5a:	441a      	add	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			actualLonGPS += ((int)incommingMessage[40] - 48) * (long)10;
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a6e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	18ca      	adds	r2, r1, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			actualLonGPS /= (long)6;
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a88:	4a2c      	ldr	r2, [pc, #176]	; (8001b3c <_ZN3GPS7ReadGPSEhPhS0_f+0x3e4>)
 8001a8a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a8e:	17db      	asrs	r3, r3, #31
 8001a90:	1ad2      	subs	r2, r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			actualLonGPS += ((int)incommingMessage[30] - 48) * (long)1000000000;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001aa4:	3b30      	subs	r3, #48	; 0x30
 8001aa6:	4928      	ldr	r1, [pc, #160]	; (8001b48 <_ZN3GPS7ReadGPSEhPhS0_f+0x3f0>)
 8001aa8:	fb01 f303 	mul.w	r3, r1, r3
 8001aac:	441a      	add	r2, r3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			actualLonGPS += ((int)incommingMessage[31] - 48) * (long)100000000;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ac0:	3b30      	subs	r3, #48	; 0x30
 8001ac2:	491f      	ldr	r1, [pc, #124]	; (8001b40 <_ZN3GPS7ReadGPSEhPhS0_f+0x3e8>)
 8001ac4:	fb01 f303 	mul.w	r3, r1, r3
 8001ac8:	441a      	add	r2, r3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			actualLonGPS += ((int)incommingMessage[32] - 48) * (long)10000000;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001adc:	3b30      	subs	r3, #48	; 0x30
 8001ade:	4914      	ldr	r1, [pc, #80]	; (8001b30 <_ZN3GPS7ReadGPSEhPhS0_f+0x3d8>)
 8001ae0:	fb01 f303 	mul.w	r3, r1, r3
 8001ae4:	441a      	add	r2, r3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			actualLonGPS /= 10;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001af2:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <_ZN3GPS7ReadGPSEhPhS0_f+0x3ec>)
 8001af4:	fb82 1203 	smull	r1, r2, r2, r3
 8001af8:	1092      	asrs	r2, r2, #2
 8001afa:	17db      	asrs	r3, r3, #31
 8001afc:	1ad2      	subs	r2, r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

			if (incommingMessage[28] == 'N')
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b0a:	2b4e      	cmp	r3, #78	; 0x4e
 8001b0c:	d103      	bne.n	8001b16 <_ZN3GPS7ReadGPSEhPhS0_f+0x3be>
				latitudeNorth = 1;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	2201      	movs	r2, #1
 8001b12:	701a      	strb	r2, [r3, #0]
 8001b14:	e002      	b.n	8001b1c <_ZN3GPS7ReadGPSEhPhS0_f+0x3c4>
			else
				latitudeNorth = 0;
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]

			if (incommingMessage[42] == 'E')
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001b22:	2b45      	cmp	r3, #69	; 0x45
 8001b24:	d112      	bne.n	8001b4c <_ZN3GPS7ReadGPSEhPhS0_f+0x3f4>
				longtiudeEast = 1;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	705a      	strb	r2, [r3, #1]
 8001b2c:	e011      	b.n	8001b52 <_ZN3GPS7ReadGPSEhPhS0_f+0x3fa>
 8001b2e:	bf00      	nop
 8001b30:	00989680 	.word	0x00989680
 8001b34:	000f4240 	.word	0x000f4240
 8001b38:	000186a0 	.word	0x000186a0
 8001b3c:	2aaaaaab 	.word	0x2aaaaaab
 8001b40:	05f5e100 	.word	0x05f5e100
 8001b44:	66666667 	.word	0x66666667
 8001b48:	3b9aca00 	.word	0x3b9aca00
			else
				longtiudeEast = 0;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	705a      	strb	r2, [r3, #1]

			numberUsedSats = ((int)incommingMessage[46] - 48) * (long)10;
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001b58:	461a      	mov	r2, r3
 8001b5a:	0092      	lsls	r2, r2, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	3320      	adds	r3, #32
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
			numberUsedSats += (int)incommingMessage[47] - 48;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f893 2212 	ldrb.w	r2, [r3, #530]	; 0x212
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b78:	4413      	add	r3, r2
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	3b30      	subs	r3, #48	; 0x30
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212

			if ( previousLatGPS == 0 && previousLonGPS == 0){
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10d      	bne.n	8001baa <_ZN3GPS7ReadGPSEhPhS0_f+0x452>
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d109      	bne.n	8001baa <_ZN3GPS7ReadGPSEhPhS0_f+0x452>
				previousLatGPS = actualLatGPS;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	615a      	str	r2, [r3, #20]
				previousLonGPS = actualLonGPS;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	611a      	str	r2, [r3, #16]
			}

			lat_gps_loop_add = (float)(actualLatGPS - previousLatGPS) / 10.0;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	ee07 3a90 	vmov	s15, r3
 8001bba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bbe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001bc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
			lon_gps_loop_add = (float)(actualLonGPS - previousLonGPS) / 10.0;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001be4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0

			latGPS = previousLatGPS;
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	605a      	str	r2, [r3, #4]
			lonGPS = previousLonGPS;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	691a      	ldr	r2, [r3, #16]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	609a      	str	r2, [r3, #8]

			previousLatGPS = actualLatGPS;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	615a      	str	r2, [r3, #20]
			previousLonGPS = actualLonGPS;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	611a      	str	r2, [r3, #16]

			gpsAddCounter = 5;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2205      	movs	r2, #5
 8001c16:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
			new_gps_dataCounter = 9;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2209      	movs	r2, #9
 8001c1e:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
			lat_gps_add = 0;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			lon_gps_add = 0;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			new_gpsDataAvailable = 1;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		}

		if (incommingMessage[4] == 'S' && incommingMessage[5] == 'A')
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	7f5b      	ldrb	r3, [r3, #29]
 8001c42:	2b53      	cmp	r3, #83	; 0x53
 8001c44:	d10b      	bne.n	8001c5e <_ZN3GPS7ReadGPSEhPhS0_f+0x506>
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	7f9b      	ldrb	r3, [r3, #30]
 8001c4a:	2b41      	cmp	r3, #65	; 0x41
 8001c4c:	d107      	bne.n	8001c5e <_ZN3GPS7ReadGPSEhPhS0_f+0x506>
			fixType = (int)incommingMessage[9] - 48;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001c54:	3b30      	subs	r3, #48	; 0x30
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213

	}

	if (gpsAddCounter == 0 && new_gps_dataCounter > 0){
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f9b3 308a 	ldrsh.w	r3, [r3, #138]	; 0x8a
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f040 808c 	bne.w	8001d82 <_ZN3GPS7ReadGPSEhPhS0_f+0x62a>
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 8086 	beq.w	8001d82 <_ZN3GPS7ReadGPSEhPhS0_f+0x62a>
		new_gpsDataAvailable = 1;
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		new_gps_dataCounter--;
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8001c84:	3b01      	subs	r3, #1
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
		gpsAddCounter = 5;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2205      	movs	r2, #5
 8001c92:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

		lat_gps_add += lat_gps_loop_add;
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8001ca2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		if (abs(lat_gps_add) >= 1) {
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8001cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb6:	f7ff fc8b 	bl	80015d0 <_ZSt3absf>
 8001cba:	eeb0 7a40 	vmov.f32	s14, s0
 8001cbe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001cc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cca:	bfac      	ite	ge
 8001ccc:	2301      	movge	r3, #1
 8001cce:	2300      	movlt	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d01a      	beq.n	8001d0c <_ZN3GPS7ReadGPSEhPhS0_f+0x5b4>
			latGPS += (int)lat_gps_add;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	edd2 7a29 	vldr	s15, [r2, #164]	; 0xa4
 8001ce0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ce4:	ee17 2a90 	vmov	r2, s15
 8001ce8:	441a      	add	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	605a      	str	r2, [r3, #4]
			lat_gps_add -= (int)lat_gps_add;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8001cfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		}

		lon_gps_add += lon_gps_loop_add;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8001d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		if (abs(lon_gps_add) >= 1) {
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8001d28:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2c:	f7ff fc50 	bl	80015d0 <_ZSt3absf>
 8001d30:	eeb0 7a40 	vmov.f32	s14, s0
 8001d34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001d38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d40:	bfac      	ite	ge
 8001d42:	2301      	movge	r3, #1
 8001d44:	2300      	movlt	r3, #0
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01a      	beq.n	8001d82 <_ZN3GPS7ReadGPSEhPhS0_f+0x62a>
			lonGPS += (int)lon_gps_add;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	edd2 7a2a 	vldr	s15, [r2, #168]	; 0xa8
 8001d56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d5a:	ee17 2a90 	vmov	r2, s15
 8001d5e:	441a      	add	r2, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	609a      	str	r2, [r3, #8]
			lon_gps_add -= (int)lon_gps_add;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8001d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		}
	}

	if (new_gpsDataAvailable) {
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 8211 	beq.w	80021b0 <_ZN3GPS7ReadGPSEhPhS0_f+0xa58>
		if (numberUsedSats < 8){
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f893 3212 	ldrb.w	r3, [r3, #530]	; 0x212
 8001d94:	2b07      	cmp	r3, #7
 8001d96:	d80a      	bhi.n	8001dae <_ZN3GPS7ReadGPSEhPhS0_f+0x656>
			HAL_GPIO_TogglePin(this->port, this->pin);
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8001da4:	4619      	mov	r1, r3
 8001da6:	4610      	mov	r0, r2
 8001da8:	f007 fd43 	bl	8009832 <HAL_GPIO_TogglePin>
 8001dac:	e009      	b.n	8001dc2 <_ZN3GPS7ReadGPSEhPhS0_f+0x66a>
		}
		else {
			HAL_GPIO_WritePin(this->port, this->pin, GPIO_PIN_RESET);
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f8b3 3210 	ldrh.w	r3, [r3, #528]	; 0x210
 8001dba:	2200      	movs	r2, #0
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f007 fd1f 	bl	8009800 <HAL_GPIO_WritePin>
		}
		gps_watchdogTimer = HAL_GetTick();
 8001dc2:	f006 fadb 	bl	800837c <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		new_gpsDataAvailable = 0;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

		if (*theFlightMode >= 3 && waypointSet == 0) {
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d912      	bls.n	8001e04 <_ZN3GPS7ReadGPSEhPhS0_f+0x6ac>
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10d      	bne.n	8001e04 <_ZN3GPS7ReadGPSEhPhS0_f+0x6ac>
			waypointSet = 1;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
			l_latWaypoint = latGPS;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			l_lonWaypoint = lonGPS;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		}

		if (*theFlightMode >= 3 && waypointSet == 1) {
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	f240 81d1 	bls.w	80021b0 <_ZN3GPS7ReadGPSEhPhS0_f+0xa58>
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	f040 81cb 	bne.w	80021b0 <_ZN3GPS7ReadGPSEhPhS0_f+0xa58>
			gps_lonError = l_lonWaypoint - lonGPS;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	1ad2      	subs	r2, r2, r3
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
			gps_latError = latGPS - l_latWaypoint;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e36:	1ad2      	subs	r2, r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8

			gps_latTotalAvarage -=  gps_latRotatingMem[ gps_rotatingMemLocation];
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	312e      	adds	r1, #46	; 0x2e
 8001e50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e54:	1ad2      	subs	r2, r2, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
			gps_latRotatingMem[ gps_rotatingMemLocation] = gps_latError - gps_latErrorPrevious;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e68:	6979      	ldr	r1, [r7, #20]
 8001e6a:	f891 10ae 	ldrb.w	r1, [r1, #174]	; 0xae
 8001e6e:	4608      	mov	r0, r1
 8001e70:	1ad1      	subs	r1, r2, r3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f100 022e 	add.w	r2, r0, #46	; 0x2e
 8001e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			gps_latTotalAvarage +=  gps_latRotatingMem[ gps_rotatingMemLocation];
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8001e88:	4619      	mov	r1, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	312e      	adds	r1, #46	; 0x2e
 8001e8e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e92:	441a      	add	r2, r3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
			gps_lonTotalAvarage -=  gps_lonRotatingMem[ gps_rotatingMemLocation];
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	3156      	adds	r1, #86	; 0x56
 8001eac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001eb0:	1ad2      	subs	r2, r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			gps_lonRotatingMem[ gps_rotatingMemLocation] = gps_lonError - gps_lonErrorPrevious;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f8d3 21fc 	ldr.w	r2, [r3, #508]	; 0x1fc
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ec4:	6979      	ldr	r1, [r7, #20]
 8001ec6:	f891 10ae 	ldrb.w	r1, [r1, #174]	; 0xae
 8001eca:	4608      	mov	r0, r1
 8001ecc:	1ad1      	subs	r1, r2, r3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f100 0256 	add.w	r2, r0, #86	; 0x56
 8001ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			gps_lonTotalAvarage +=  gps_lonRotatingMem[ gps_rotatingMemLocation];
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	3156      	adds	r1, #86	; 0x56
 8001eea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001eee:	441a      	add	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			gps_rotatingMemLocation++;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8001efc:	3301      	adds	r3, #1
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
			if ( gps_rotatingMemLocation == 35) gps_rotatingMemLocation = 0;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8001f0c:	2b23      	cmp	r3, #35	; 0x23
 8001f0e:	d103      	bne.n	8001f18 <_ZN3GPS7ReadGPSEhPhS0_f+0x7c0>
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae

			gps_latErrorPrevious = gps_latError;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			gps_lonErrorPrevious = gps_lonError;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f8d3 21fc 	ldr.w	r2, [r3, #508]	; 0x1fc
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

			gpsPitchAdjustNorth = (float)gps_latError * Pgain + (float)gps_latTotalAvarage * Dgain;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8001f36:	ee07 3a90 	vmov	s15, r3
 8001f3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 8001f44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	edd3 7a86 	vldr	s15, [r3, #536]	; 0x218
 8001f5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
			gpsPitchAdjustNorth = (float)gps_lonError * Pgain + (float)gps_lonTotalAvarage * Dgain;
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8001f70:	ee07 3a90 	vmov	s15, r3
 8001f74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	edd3 7a85 	vldr	s15, [r3, #532]	; 0x214
 8001f7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001f88:	ee07 3a90 	vmov	s15, r3
 8001f8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	edd3 7a86 	vldr	s15, [r3, #536]	; 0x218
 8001f96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94

			if (!latitudeNorth)gpsPitchAdjustNorth *= -1;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d107      	bne.n	8001fbc <_ZN3GPS7ReadGPSEhPhS0_f+0x864>
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8001fb2:	eef1 7a67 	vneg.f32	s15, s15
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
			if (!longtiudeEast)gpsRollAdjustNorth *= -1;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	785b      	ldrb	r3, [r3, #1]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d107      	bne.n	8001fd4 <_ZN3GPS7ReadGPSEhPhS0_f+0x87c>
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 8001fca:	eef1 7a67 	vneg.f32	s15, s15
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98

			gpsRollAdjust = ((float)gpsRollAdjustNorth * cos(theAngleYaw * 0.017453)) + ((float)gpsPitchAdjustNorth * cos((theAngleYaw - 90) * 0.017453));
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fa58 	bl	8000490 <__aeabi_f2d>
 8001fe0:	4604      	mov	r4, r0
 8001fe2:	460d      	mov	r5, r1
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7fe fa53 	bl	8000490 <__aeabi_f2d>
 8001fea:	a3ad      	add	r3, pc, #692	; (adr r3, 80022a0 <_ZN3GPS7ReadGPSEhPhS0_f+0xb48>)
 8001fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff0:	f7fe faa6 	bl	8000540 <__aeabi_dmul>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	ec43 2b17 	vmov	d7, r2, r3
 8001ffc:	eeb0 0a47 	vmov.f32	s0, s14
 8002000:	eef0 0a67 	vmov.f32	s1, s15
 8002004:	f00c fa44 	bl	800e490 <cos>
 8002008:	ec53 2b10 	vmov	r2, r3, d0
 800200c:	4620      	mov	r0, r4
 800200e:	4629      	mov	r1, r5
 8002010:	f7fe fa96 	bl	8000540 <__aeabi_dmul>
 8002014:	4603      	mov	r3, r0
 8002016:	460c      	mov	r4, r1
 8002018:	4625      	mov	r5, r4
 800201a:	461c      	mov	r4, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fa34 	bl	8000490 <__aeabi_f2d>
 8002028:	4680      	mov	r8, r0
 800202a:	4689      	mov	r9, r1
 800202c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002030:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 80022a8 <_ZN3GPS7ReadGPSEhPhS0_f+0xb50>
 8002034:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002038:	ee17 0a90 	vmov	r0, s15
 800203c:	f7fe fa28 	bl	8000490 <__aeabi_f2d>
 8002040:	a397      	add	r3, pc, #604	; (adr r3, 80022a0 <_ZN3GPS7ReadGPSEhPhS0_f+0xb48>)
 8002042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002046:	f7fe fa7b 	bl	8000540 <__aeabi_dmul>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	ec43 2b17 	vmov	d7, r2, r3
 8002052:	eeb0 0a47 	vmov.f32	s0, s14
 8002056:	eef0 0a67 	vmov.f32	s1, s15
 800205a:	f00c fa19 	bl	800e490 <cos>
 800205e:	ec53 2b10 	vmov	r2, r3, d0
 8002062:	4640      	mov	r0, r8
 8002064:	4649      	mov	r1, r9
 8002066:	f7fe fa6b 	bl	8000540 <__aeabi_dmul>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4620      	mov	r0, r4
 8002070:	4629      	mov	r1, r5
 8002072:	f7fe f8af 	bl	80001d4 <__adddf3>
 8002076:	4603      	mov	r3, r0
 8002078:	460c      	mov	r4, r1
 800207a:	4618      	mov	r0, r3
 800207c:	4621      	mov	r1, r4
 800207e:	f7fe fd57 	bl	8000b30 <__aeabi_d2f>
 8002082:	4602      	mov	r2, r0
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
			gpsPitchAdjust = ((float)gpsPitchAdjustNorth * cos(theAngleYaw * 0.017453)) + ((float)gpsRollAdjustNorth * cos((theAngleYaw + 90) * 0.017453));
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe f9fd 	bl	8000490 <__aeabi_f2d>
 8002096:	4604      	mov	r4, r0
 8002098:	460d      	mov	r5, r1
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7fe f9f8 	bl	8000490 <__aeabi_f2d>
 80020a0:	a37f      	add	r3, pc, #508	; (adr r3, 80022a0 <_ZN3GPS7ReadGPSEhPhS0_f+0xb48>)
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	f7fe fa4b 	bl	8000540 <__aeabi_dmul>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	ec43 2b17 	vmov	d7, r2, r3
 80020b2:	eeb0 0a47 	vmov.f32	s0, s14
 80020b6:	eef0 0a67 	vmov.f32	s1, s15
 80020ba:	f00c f9e9 	bl	800e490 <cos>
 80020be:	ec53 2b10 	vmov	r2, r3, d0
 80020c2:	4620      	mov	r0, r4
 80020c4:	4629      	mov	r1, r5
 80020c6:	f7fe fa3b 	bl	8000540 <__aeabi_dmul>
 80020ca:	4603      	mov	r3, r0
 80020cc:	460c      	mov	r4, r1
 80020ce:	4625      	mov	r5, r4
 80020d0:	461c      	mov	r4, r3
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe f9d9 	bl	8000490 <__aeabi_f2d>
 80020de:	4680      	mov	r8, r0
 80020e0:	4689      	mov	r9, r1
 80020e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80020e6:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80022a8 <_ZN3GPS7ReadGPSEhPhS0_f+0xb50>
 80020ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020ee:	ee17 0a90 	vmov	r0, s15
 80020f2:	f7fe f9cd 	bl	8000490 <__aeabi_f2d>
 80020f6:	a36a      	add	r3, pc, #424	; (adr r3, 80022a0 <_ZN3GPS7ReadGPSEhPhS0_f+0xb48>)
 80020f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fc:	f7fe fa20 	bl	8000540 <__aeabi_dmul>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	ec43 2b17 	vmov	d7, r2, r3
 8002108:	eeb0 0a47 	vmov.f32	s0, s14
 800210c:	eef0 0a67 	vmov.f32	s1, s15
 8002110:	f00c f9be 	bl	800e490 <cos>
 8002114:	ec53 2b10 	vmov	r2, r3, d0
 8002118:	4640      	mov	r0, r8
 800211a:	4649      	mov	r1, r9
 800211c:	f7fe fa10 	bl	8000540 <__aeabi_dmul>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4620      	mov	r0, r4
 8002126:	4629      	mov	r1, r5
 8002128:	f7fe f854 	bl	80001d4 <__adddf3>
 800212c:	4603      	mov	r3, r0
 800212e:	460c      	mov	r4, r1
 8002130:	4618      	mov	r0, r3
 8002132:	4621      	mov	r1, r4
 8002134:	f7fe fcfc 	bl	8000b30 <__aeabi_d2f>
 8002138:	4602      	mov	r2, r0
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

			if (gpsRollAdjust > 300) gpsRollAdjust = 300;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	edd3 7a88 	vldr	s15, [r3, #544]	; 0x220
 8002146:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80022ac <_ZN3GPS7ReadGPSEhPhS0_f+0xb54>
 800214a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800214e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002152:	dd03      	ble.n	800215c <_ZN3GPS7ReadGPSEhPhS0_f+0xa04>
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	4a56      	ldr	r2, [pc, #344]	; (80022b0 <_ZN3GPS7ReadGPSEhPhS0_f+0xb58>)
 8002158:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
			if (gpsRollAdjust < -300) gpsRollAdjust = -300;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	edd3 7a88 	vldr	s15, [r3, #544]	; 0x220
 8002162:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80022b4 <_ZN3GPS7ReadGPSEhPhS0_f+0xb5c>
 8002166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800216a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216e:	d503      	bpl.n	8002178 <_ZN3GPS7ReadGPSEhPhS0_f+0xa20>
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	4a51      	ldr	r2, [pc, #324]	; (80022b8 <_ZN3GPS7ReadGPSEhPhS0_f+0xb60>)
 8002174:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
			if (gpsPitchAdjust > 300) gpsPitchAdjust = 300;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	edd3 7a87 	vldr	s15, [r3, #540]	; 0x21c
 800217e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80022ac <_ZN3GPS7ReadGPSEhPhS0_f+0xb54>
 8002182:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218a:	dd03      	ble.n	8002194 <_ZN3GPS7ReadGPSEhPhS0_f+0xa3c>
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	4a48      	ldr	r2, [pc, #288]	; (80022b0 <_ZN3GPS7ReadGPSEhPhS0_f+0xb58>)
 8002190:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			if (gpsPitchAdjust < -300) gpsPitchAdjust = -300;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	edd3 7a87 	vldr	s15, [r3, #540]	; 0x21c
 800219a:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80022b4 <_ZN3GPS7ReadGPSEhPhS0_f+0xb5c>
 800219e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a6:	d503      	bpl.n	80021b0 <_ZN3GPS7ReadGPSEhPhS0_f+0xa58>
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	4a43      	ldr	r2, [pc, #268]	; (80022b8 <_ZN3GPS7ReadGPSEhPhS0_f+0xb60>)
 80021ac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
		}
	}

	if (gps_watchdogTimer + 1000 < HAL_GetTick()) {
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80021b6:	f503 747a 	add.w	r4, r3, #1000	; 0x3e8
 80021ba:	f006 f8df 	bl	800837c <HAL_GetTick>
 80021be:	4603      	mov	r3, r0
 80021c0:	429c      	cmp	r4, r3
 80021c2:	bf34      	ite	cc
 80021c4:	2301      	movcc	r3, #1
 80021c6:	2300      	movcs	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00c      	beq.n	80021e8 <_ZN3GPS7ReadGPSEhPhS0_f+0xa90>
		if (*theFlightMode >= 3 && theStateMachine > 0) {
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d908      	bls.n	80021e8 <_ZN3GPS7ReadGPSEhPhS0_f+0xa90>
 80021d6:	7cfb      	ldrb	r3, [r7, #19]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <_ZN3GPS7ReadGPSEhPhS0_f+0xa90>
			*theFlightMode = 2;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2202      	movs	r2, #2
 80021e0:	701a      	strb	r2, [r3, #0]
			*theError = 4;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2204      	movs	r2, #4
 80021e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (*theFlightMode < 3 && waypointSet > 0) {
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d852      	bhi.n	8002296 <_ZN3GPS7ReadGPSEhPhS0_f+0xb3e>
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d04d      	beq.n	8002296 <_ZN3GPS7ReadGPSEhPhS0_f+0xb3e>
		gpsRollAdjust = 0;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		gpsPitchAdjust = 0;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
		if (waypointSet == 1) {
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8002214:	2b01      	cmp	r3, #1
 8002216:	d107      	bne.n	8002228 <_ZN3GPS7ReadGPSEhPhS0_f+0xad0>
			gps_rotatingMemLocation = 0;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
			waypointSet = 2;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	2202      	movs	r2, #2
 8002224:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		}
		gps_lonRotatingMem[ gps_rotatingMemLocation] = 0;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800222e:	461a      	mov	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	3256      	adds	r2, #86	; 0x56
 8002234:	2100      	movs	r1, #0
 8002236:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		gps_latRotatingMem[ gps_rotatingMemLocation] = 0;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8002240:	461a      	mov	r2, r3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	322e      	adds	r2, #46	; 0x2e
 8002246:	2100      	movs	r1, #0
 8002248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		gps_rotatingMemLocation++;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8002252:	3301      	adds	r3, #1
 8002254:	b2da      	uxtb	r2, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
		if (gps_rotatingMemLocation == 36) {
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8002262:	2b24      	cmp	r3, #36	; 0x24
 8002264:	d117      	bne.n	8002296 <_ZN3GPS7ReadGPSEhPhS0_f+0xb3e>
			waypointSet = 0;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
			gps_latErrorPrevious = 0;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2200      	movs	r2, #0
 8002272:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			gps_lonErrorPrevious = 0;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2200      	movs	r2, #0
 800227a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			gps_latTotalAvarage = 0;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2200      	movs	r2, #0
 8002282:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
			gps_lonTotalAvarage = 0;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2200      	movs	r2, #0
 800228a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			gps_rotatingMemLocation = 0;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
		}
	}

}
 8002296:	bf00      	nop
 8002298:	3720      	adds	r7, #32
 800229a:	46bd      	mov	sp, r7
 800229c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022a0:	00de4c51 	.word	0x00de4c51
 80022a4:	3f91df33 	.word	0x3f91df33
 80022a8:	42b40000 	.word	0x42b40000
 80022ac:	43960000 	.word	0x43960000
 80022b0:	43960000 	.word	0x43960000
 80022b4:	c3960000 	.word	0xc3960000
 80022b8:	c3960000 	.word	0xc3960000

080022bc <USART1_IRQHandler>:
}

extern "C"
{
void USART1_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */
	Serial1.UartIsr();
 80022c0:	4803      	ldr	r0, [pc, #12]	; (80022d0 <USART1_IRQHandler+0x14>)
 80022c2:	f002 f960 	bl	8004586 <_ZN8MySerial7UartIsrEv>
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 80022c6:	4803      	ldr	r0, [pc, #12]	; (80022d4 <USART1_IRQHandler+0x18>)
 80022c8:	f00b fad6 	bl	800d878 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	200000e0 	.word	0x200000e0
 80022d4:	200005ec 	.word	0x200005ec

080022d8 <_Z41__static_initialization_and_destruction_0ii>:
}
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d108      	bne.n	80022fa <_Z41__static_initialization_and_destruction_0ii+0x22>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d103      	bne.n	80022fa <_Z41__static_initialization_and_destruction_0ii+0x22>
MySerial Serial1(&huart1);
 80022f2:	4904      	ldr	r1, [pc, #16]	; (8002304 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80022f4:	4804      	ldr	r0, [pc, #16]	; (8002308 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80022f6:	f002 f889 	bl	800440c <_ZN8MySerialC1EP20__UART_HandleTypeDef>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200005ec 	.word	0x200005ec
 8002308:	200000e0 	.word	0x200000e0

0800230c <_GLOBAL__sub_I_Serial1>:
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
 8002310:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002314:	2001      	movs	r0, #1
 8002316:	f7ff ffdf 	bl	80022d8 <_Z41__static_initialization_and_destruction_0ii>
 800231a:	bd80      	pop	{r7, pc}

0800231c <CS_Select>:

#define NRF24_CSN_PORT	GPIOA
#define NRF24_CSN_PIN	GPIO_PIN_4

void CS_Select (void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8002320:	2200      	movs	r2, #0
 8002322:	2110      	movs	r1, #16
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <CS_Select+0x14>)
 8002326:	f007 fa6b 	bl	8009800 <HAL_GPIO_WritePin>
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40020000 	.word	0x40020000

08002334 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8002338:	2201      	movs	r2, #1
 800233a:	2110      	movs	r1, #16
 800233c:	4802      	ldr	r0, [pc, #8]	; (8002348 <CS_UnSelect+0x14>)
 800233e:	f007 fa5f 	bl	8009800 <HAL_GPIO_WritePin>
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40020000 	.word	0x40020000

0800234c <CE_Enable>:


void CE_Enable (void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8002350:	2201      	movs	r2, #1
 8002352:	2120      	movs	r1, #32
 8002354:	4802      	ldr	r0, [pc, #8]	; (8002360 <CE_Enable+0x14>)
 8002356:	f007 fa53 	bl	8009800 <HAL_GPIO_WritePin>
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40020800 	.word	0x40020800

08002364 <CE_Disable>:

void CE_Disable (void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8002368:	2200      	movs	r2, #0
 800236a:	2120      	movs	r1, #32
 800236c:	4802      	ldr	r0, [pc, #8]	; (8002378 <CE_Disable+0x14>)
 800236e:	f007 fa47 	bl	8009800 <HAL_GPIO_WritePin>
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40020800 	.word	0x40020800

0800237c <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	460a      	mov	r2, r1
 8002386:	71fb      	strb	r3, [r7, #7]
 8002388:	4613      	mov	r3, r2
 800238a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f043 0320 	orr.w	r3, r3, #32
 8002392:	b2db      	uxtb	r3, r3
 8002394:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8002396:	79bb      	ldrb	r3, [r7, #6]
 8002398:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800239a:	f7ff ffbf 	bl	800231c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 800239e:	f107 010c 	add.w	r1, r7, #12
 80023a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023a6:	2202      	movs	r2, #2
 80023a8:	4804      	ldr	r0, [pc, #16]	; (80023bc <nrf24_WriteReg+0x40>)
 80023aa:	f009 fc79 	bl	800bca0 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80023ae:	f7ff ffc1 	bl	8002334 <CS_UnSelect>
}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000454 	.word	0x20000454

080023c0 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	f043 0320 	orr.w	r3, r3, #32
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80023d8:	f7ff ffa0 	bl	800231c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80023dc:	f107 0114 	add.w	r1, r7, #20
 80023e0:	2364      	movs	r3, #100	; 0x64
 80023e2:	2201      	movs	r2, #1
 80023e4:	4808      	ldr	r0, [pc, #32]	; (8002408 <nrf24_WriteRegMulti+0x48>)
 80023e6:	f009 fc5b 	bl	800bca0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	4804      	ldr	r0, [pc, #16]	; (8002408 <nrf24_WriteRegMulti+0x48>)
 80023f6:	f009 fc53 	bl	800bca0 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80023fa:	f7ff ff9b 	bl	8002334 <CS_UnSelect>
}
 80023fe:	bf00      	nop
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000454 	.word	0x20000454

0800240c <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8002416:	2300      	movs	r3, #0
 8002418:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800241a:	f7ff ff7f 	bl	800231c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800241e:	1df9      	adds	r1, r7, #7
 8002420:	2364      	movs	r3, #100	; 0x64
 8002422:	2201      	movs	r2, #1
 8002424:	4808      	ldr	r0, [pc, #32]	; (8002448 <nrf24_ReadReg+0x3c>)
 8002426:	f009 fc3b 	bl	800bca0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800242a:	f107 010f 	add.w	r1, r7, #15
 800242e:	2364      	movs	r3, #100	; 0x64
 8002430:	2201      	movs	r2, #1
 8002432:	4805      	ldr	r0, [pc, #20]	; (8002448 <nrf24_ReadReg+0x3c>)
 8002434:	f009 fd68 	bl	800bf08 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8002438:	f7ff ff7c 	bl	8002334 <CS_UnSelect>

	return data;
 800243c:	7bfb      	ldrb	r3, [r7, #15]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000454 	.word	0x20000454

0800244c <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8002456:	f7ff ff61 	bl	800231c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 800245a:	1df9      	adds	r1, r7, #7
 800245c:	2364      	movs	r3, #100	; 0x64
 800245e:	2201      	movs	r2, #1
 8002460:	4804      	ldr	r0, [pc, #16]	; (8002474 <nrfsendCmd+0x28>)
 8002462:	f009 fc1d 	bl	800bca0 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8002466:	f7ff ff65 	bl	8002334 <CS_UnSelect>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000454 	.word	0x20000454

08002478 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	2b07      	cmp	r3, #7
 8002486:	d104      	bne.n	8002492 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8002488:	2100      	movs	r1, #0
 800248a:	2007      	movs	r0, #7
 800248c:	f7ff ff76 	bl	800237c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8002490:	e090      	b.n	80025b4 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	2b17      	cmp	r3, #23
 8002496:	d104      	bne.n	80024a2 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8002498:	2111      	movs	r1, #17
 800249a:	2017      	movs	r0, #23
 800249c:	f7ff ff6e 	bl	800237c <nrf24_WriteReg>
}
 80024a0:	e088      	b.n	80025b4 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 80024a2:	2108      	movs	r1, #8
 80024a4:	2000      	movs	r0, #0
 80024a6:	f7ff ff69 	bl	800237c <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80024aa:	213f      	movs	r1, #63	; 0x3f
 80024ac:	2001      	movs	r0, #1
 80024ae:	f7ff ff65 	bl	800237c <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80024b2:	2103      	movs	r1, #3
 80024b4:	2002      	movs	r0, #2
 80024b6:	f7ff ff61 	bl	800237c <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80024ba:	2103      	movs	r1, #3
 80024bc:	2003      	movs	r0, #3
 80024be:	f7ff ff5d 	bl	800237c <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80024c2:	2103      	movs	r1, #3
 80024c4:	2004      	movs	r0, #4
 80024c6:	f7ff ff59 	bl	800237c <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80024ca:	2102      	movs	r1, #2
 80024cc:	2005      	movs	r0, #5
 80024ce:	f7ff ff55 	bl	800237c <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80024d2:	210e      	movs	r1, #14
 80024d4:	2006      	movs	r0, #6
 80024d6:	f7ff ff51 	bl	800237c <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 80024da:	2100      	movs	r1, #0
 80024dc:	2007      	movs	r0, #7
 80024de:	f7ff ff4d 	bl	800237c <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 80024e2:	2100      	movs	r1, #0
 80024e4:	2008      	movs	r0, #8
 80024e6:	f7ff ff49 	bl	800237c <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 80024ea:	2100      	movs	r1, #0
 80024ec:	2009      	movs	r0, #9
 80024ee:	f7ff ff45 	bl	800237c <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80024f2:	4a32      	ldr	r2, [pc, #200]	; (80025bc <nrf24_reset+0x144>)
 80024f4:	f107 0318 	add.w	r3, r7, #24
 80024f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024fc:	6018      	str	r0, [r3, #0]
 80024fe:	3304      	adds	r3, #4
 8002500:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8002502:	f107 0318 	add.w	r3, r7, #24
 8002506:	2205      	movs	r2, #5
 8002508:	4619      	mov	r1, r3
 800250a:	200a      	movs	r0, #10
 800250c:	f7ff ff58 	bl	80023c0 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8002510:	4a2b      	ldr	r2, [pc, #172]	; (80025c0 <nrf24_reset+0x148>)
 8002512:	f107 0310 	add.w	r3, r7, #16
 8002516:	e892 0003 	ldmia.w	r2, {r0, r1}
 800251a:	6018      	str	r0, [r3, #0]
 800251c:	3304      	adds	r3, #4
 800251e:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8002520:	f107 0310 	add.w	r3, r7, #16
 8002524:	2205      	movs	r2, #5
 8002526:	4619      	mov	r1, r3
 8002528:	200b      	movs	r0, #11
 800252a:	f7ff ff49 	bl	80023c0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800252e:	21c3      	movs	r1, #195	; 0xc3
 8002530:	200c      	movs	r0, #12
 8002532:	f7ff ff23 	bl	800237c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8002536:	21c4      	movs	r1, #196	; 0xc4
 8002538:	200d      	movs	r0, #13
 800253a:	f7ff ff1f 	bl	800237c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 800253e:	21c5      	movs	r1, #197	; 0xc5
 8002540:	200e      	movs	r0, #14
 8002542:	f7ff ff1b 	bl	800237c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8002546:	21c6      	movs	r1, #198	; 0xc6
 8002548:	200f      	movs	r0, #15
 800254a:	f7ff ff17 	bl	800237c <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800254e:	4a1b      	ldr	r2, [pc, #108]	; (80025bc <nrf24_reset+0x144>)
 8002550:	f107 0308 	add.w	r3, r7, #8
 8002554:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002558:	6018      	str	r0, [r3, #0]
 800255a:	3304      	adds	r3, #4
 800255c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 800255e:	f107 0308 	add.w	r3, r7, #8
 8002562:	2205      	movs	r2, #5
 8002564:	4619      	mov	r1, r3
 8002566:	2010      	movs	r0, #16
 8002568:	f7ff ff2a 	bl	80023c0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 800256c:	2100      	movs	r1, #0
 800256e:	2011      	movs	r0, #17
 8002570:	f7ff ff04 	bl	800237c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8002574:	2100      	movs	r1, #0
 8002576:	2012      	movs	r0, #18
 8002578:	f7ff ff00 	bl	800237c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 800257c:	2100      	movs	r1, #0
 800257e:	2013      	movs	r0, #19
 8002580:	f7ff fefc 	bl	800237c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8002584:	2100      	movs	r1, #0
 8002586:	2014      	movs	r0, #20
 8002588:	f7ff fef8 	bl	800237c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 800258c:	2100      	movs	r1, #0
 800258e:	2015      	movs	r0, #21
 8002590:	f7ff fef4 	bl	800237c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8002594:	2100      	movs	r1, #0
 8002596:	2016      	movs	r0, #22
 8002598:	f7ff fef0 	bl	800237c <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 800259c:	2111      	movs	r1, #17
 800259e:	2017      	movs	r0, #23
 80025a0:	f7ff feec 	bl	800237c <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80025a4:	2100      	movs	r1, #0
 80025a6:	201c      	movs	r0, #28
 80025a8:	f7ff fee8 	bl	800237c <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80025ac:	2100      	movs	r1, #0
 80025ae:	201d      	movs	r0, #29
 80025b0:	f7ff fee4 	bl	800237c <nrf24_WriteReg>
}
 80025b4:	bf00      	nop
 80025b6:	3720      	adds	r7, #32
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	08010c80 	.word	0x08010c80
 80025c0:	08010c88 	.word	0x08010c88

080025c4 <NRF24_Init>:




void NRF24_Init (void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80025c8:	f7ff fecc 	bl	8002364 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80025cc:	2000      	movs	r0, #0
 80025ce:	f7ff ff53 	bl	8002478 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80025d2:	2100      	movs	r1, #0
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7ff fed1 	bl	800237c <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80025da:	2100      	movs	r1, #0
 80025dc:	2001      	movs	r0, #1
 80025de:	f7ff fecd 	bl	800237c <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80025e2:	2100      	movs	r1, #0
 80025e4:	2002      	movs	r0, #2
 80025e6:	f7ff fec9 	bl	800237c <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 80025ea:	2103      	movs	r1, #3
 80025ec:	2003      	movs	r0, #3
 80025ee:	f7ff fec5 	bl	800237c <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 80025f2:	2100      	movs	r1, #0
 80025f4:	2004      	movs	r0, #4
 80025f6:	f7ff fec1 	bl	800237c <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 80025fa:	2100      	movs	r1, #0
 80025fc:	2005      	movs	r0, #5
 80025fe:	f7ff febd 	bl	800237c <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8002602:	210e      	movs	r1, #14
 8002604:	2006      	movs	r0, #6
 8002606:	f7ff feb9 	bl	800237c <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800260a:	f7ff fe9f 	bl	800234c <CE_Enable>

}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}

08002612 <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b084      	sub	sp, #16
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	460b      	mov	r3, r1
 800261c:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800261e:	f7ff fea1 	bl	8002364 <CE_Disable>

	nrf24_reset (STATUS);
 8002622:	2007      	movs	r0, #7
 8002624:	f7ff ff28 	bl	8002478 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	4619      	mov	r1, r3
 800262c:	2005      	movs	r0, #5
 800262e:	f7ff fea5 	bl	800237c <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 8002632:	2002      	movs	r0, #2
 8002634:	f7ff feea 	bl	800240c <nrf24_ReadReg>
 8002638:	4603      	mov	r3, r0
 800263a:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	f043 0304 	orr.w	r3, r3, #4
 8002642:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	4619      	mov	r1, r3
 8002648:	2002      	movs	r0, #2
 800264a:	f7ff fe97 	bl	800237c <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 800264e:	2205      	movs	r2, #5
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	200b      	movs	r0, #11
 8002654:	f7ff feb4 	bl	80023c0 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8002658:	21ee      	movs	r1, #238	; 0xee
 800265a:	200c      	movs	r0, #12
 800265c:	f7ff fe8e 	bl	800237c <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8002660:	2120      	movs	r1, #32
 8002662:	2013      	movs	r0, #19
 8002664:	f7ff fe8a 	bl	800237c <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8002668:	2000      	movs	r0, #0
 800266a:	f7ff fecf 	bl	800240c <nrf24_ReadReg>
 800266e:	4603      	mov	r3, r0
 8002670:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 8002672:	7bbb      	ldrb	r3, [r7, #14]
 8002674:	f043 0303 	orr.w	r3, r3, #3
 8002678:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 800267a:	7bbb      	ldrb	r3, [r7, #14]
 800267c:	4619      	mov	r1, r3
 800267e:	2000      	movs	r0, #0
 8002680:	f7ff fe7c 	bl	800237c <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8002684:	f7ff fe62 	bl	800234c <CE_Enable>
}
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8002698:	2007      	movs	r0, #7
 800269a:	f7ff feb7 	bl	800240c <nrf24_ReadReg>
 800269e:	4603      	mov	r3, r0
 80026a0:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00b      	beq.n	80026c4 <isDataAvailable+0x34>
 80026ac:	7bfa      	ldrb	r2, [r7, #15]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 80026b8:	2140      	movs	r1, #64	; 0x40
 80026ba:	2007      	movs	r0, #7
 80026bc:	f7ff fe5e 	bl	800237c <nrf24_WriteReg>

		return 1;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <isDataAvailable+0x36>
	}

	return 0;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 80026dc:	f7ff fe1e 	bl	800231c <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 80026e0:	2361      	movs	r3, #97	; 0x61
 80026e2:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80026e4:	f107 010f 	add.w	r1, r7, #15
 80026e8:	2364      	movs	r3, #100	; 0x64
 80026ea:	2201      	movs	r2, #1
 80026ec:	480c      	ldr	r0, [pc, #48]	; (8002720 <NRF24_Receive+0x50>)
 80026ee:	f009 fad7 	bl	800bca0 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 80026f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026f6:	2220      	movs	r2, #32
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	4809      	ldr	r0, [pc, #36]	; (8002720 <NRF24_Receive+0x50>)
 80026fc:	f009 fc04 	bl	800bf08 <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8002700:	f7ff fe18 	bl	8002334 <CS_UnSelect>

	HAL_Delay(1);
 8002704:	2001      	movs	r0, #1
 8002706:	f005 fe45 	bl	8008394 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 800270a:	23e2      	movs	r3, #226	; 0xe2
 800270c:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fe9b 	bl	800244c <nrfsendCmd>
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000454 	.word	0x20000454

08002724 <_ZSt4asinf>:
  using ::asin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  asin(float __x)
  { return __builtin_asinf(__x); }
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	ed87 0a01 	vstr	s0, [r7, #4]
 800272e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002732:	f00c f903 	bl	800e93c <asinf>
 8002736:	eef0 7a40 	vmov.f32	s15, s0
 800273a:	eeb0 0a67 	vmov.f32	s0, s15
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	ed87 0a01 	vstr	s0, [r7, #4]
 800274e:	edc7 0a00 	vstr	s1, [r7]
 8002752:	edd7 0a00 	vldr	s1, [r7]
 8002756:	ed97 0a01 	vldr	s0, [r7, #4]
 800275a:	f00c f947 	bl	800e9ec <atan2f>
 800275e:	eef0 7a40 	vmov.f32	s15, s0
 8002762:	eeb0 0a67 	vmov.f32	s0, s15
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002774:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <DWT_Delay_us+0x48>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800277a:	f009 f9f9 	bl	800bb70 <HAL_RCC_GetHCLKFreq>
 800277e:	4602      	mov	r2, r0
 8002780:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <DWT_Delay_us+0x4c>)
 8002782:	fba3 2302 	umull	r2, r3, r3, r2
 8002786:	0c9b      	lsrs	r3, r3, #18
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	fb02 f303 	mul.w	r3, r2, r3
 800278e:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <DWT_Delay_us+0x48>)
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1ad2      	subs	r2, r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	429a      	cmp	r2, r3
 800279c:	bf34      	ite	cc
 800279e:	2301      	movcc	r3, #1
 80027a0:	2300      	movcs	r3, #0
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d000      	beq.n	80027aa <DWT_Delay_us+0x3e>
 80027a8:	e7f2      	b.n	8002790 <DWT_Delay_us+0x24>
}
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	e0001000 	.word	0xe0001000
 80027b8:	431bde83 	.word	0x431bde83

080027bc <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv>:
#define HMC5883L_IDEN_A				0x10
#define HMC5883L_IDEN_B				0x11
#define HMC5883L_IDEN_C				0x12

void IMU9DOF::VerticalAccelerationCalculations()  //Tính toán gia tốc theo phương dọc
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
	indexShortAverageRotatingMem++;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80027ca:	3301      	adds	r3, #1
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	if (indexShortAverageRotatingMem == 25)indexShortAverageRotatingMem = 0;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80027da:	2b19      	cmp	r3, #25
 80027dc:	d103      	bne.n	80027e6 <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x2a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

	shortTotalAccel_Z -= shortAverageAccel_Z[indexShortAverageRotatingMem];
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	3338      	adds	r3, #56	; 0x38
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	440b      	add	r3, r1
 80027fa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80027fe:	1ad2      	subs	r2, r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	shortAverageAccel_Z[indexShortAverageRotatingMem] = accelTotalVector;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002812:	b211      	sxth	r1, r2
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	3338      	adds	r3, #56	; 0x38
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	460a      	mov	r2, r1
 800281e:	80da      	strh	r2, [r3, #6]
	shortTotalAccel_Z += shortAverageAccel_Z[indexShortAverageRotatingMem];
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	3338      	adds	r3, #56	; 0x38
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	440b      	add	r3, r1
 8002834:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002838:	441a      	add	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	if (indexShortAverageRotatingMem == 0) {
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002846:	2b00      	cmp	r3, #0
 8002848:	d140      	bne.n	80028cc <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x110>
		indexLongAverageRotatingMem++;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8002850:	3301      	adds	r3, #1
 8002852:	b2da      	uxtb	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75

		if (indexLongAverageRotatingMem == 50)indexLongAverageRotatingMem = 0;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8002860:	2b32      	cmp	r3, #50	; 0x32
 8002862:	d103      	bne.n	800286c <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0xb0>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75

		longTotalAccel_Z -= longAverageAccel_Z[indexLongAverageRotatingMem];
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	f892 2075 	ldrb.w	r2, [r2, #117]	; 0x75
 8002878:	4611      	mov	r1, r2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	3154      	adds	r1, #84	; 0x54
 800287e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8002882:	1a9a      	subs	r2, r3, r2
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		longAverageAccel_Z[indexLongAverageRotatingMem] = shortTotalAccel_Z / 25;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002890:	4a46      	ldr	r2, [pc, #280]	; (80029ac <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x1f0>)
 8002892:	fb82 1203 	smull	r1, r2, r2, r3
 8002896:	10d2      	asrs	r2, r2, #3
 8002898:	17db      	asrs	r3, r3, #31
 800289a:	1ad1      	subs	r1, r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80028a2:	461a      	mov	r2, r3
 80028a4:	b209      	sxth	r1, r1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3254      	adds	r2, #84	; 0x54
 80028aa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		longTotalAccel_Z += longAverageAccel_Z[indexLongAverageRotatingMem];
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	f892 2075 	ldrb.w	r2, [r2, #117]	; 0x75
 80028ba:	4611      	mov	r1, r2
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	3154      	adds	r1, #84	; 0x54
 80028c0:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80028c4:	441a      	add	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	}
	accelAverageTotal = longTotalAccel_Z / 50;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80028d2:	4a36      	ldr	r2, [pc, #216]	; (80029ac <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x1f0>)
 80028d4:	fb82 1203 	smull	r1, r2, r2, r3
 80028d8:	1112      	asrs	r2, r2, #4
 80028da:	17db      	asrs	r3, r3, #31
 80028dc:	1ad2      	subs	r2, r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114


	accelAltIntegrated += accelTotalVector - accelAverageTotal;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80028f6:	1acb      	subs	r3, r1, r3
 80028f8:	441a      	add	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	if (accelTotalVector - accelAverageTotal < 400 || accelTotalVector - accelAverageTotal > 400) {
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002912:	db09      	blt.n	8002928 <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x16c>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002926:	dd3b      	ble.n	80029a0 <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x1e4>
		if (shortTotalAccel_Z / 25 - accelAverageTotal < 500 && shortTotalAccel_Z / 25 - accelAverageTotal > -500)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800292e:	4a1f      	ldr	r2, [pc, #124]	; (80029ac <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x1f0>)
 8002930:	fb82 1203 	smull	r1, r2, r2, r3
 8002934:	10d2      	asrs	r2, r2, #3
 8002936:	17db      	asrs	r3, r3, #31
 8002938:	1ad2      	subs	r2, r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002946:	da2b      	bge.n	80029a0 <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x1e4>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800294e:	4a17      	ldr	r2, [pc, #92]	; (80029ac <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x1f0>)
 8002950:	fb82 1203 	smull	r1, r2, r2, r3
 8002954:	10d2      	asrs	r2, r2, #3
 8002956:	17db      	asrs	r3, r3, #31
 8002958:	1ad2      	subs	r2, r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8002966:	dd1b      	ble.n	80029a0 <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x1e4>
		{
			if (accelAltIntegrated > 200)accelAltIntegrated -= 200;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800296e:	2bc8      	cmp	r3, #200	; 0xc8
 8002970:	dd08      	ble.n	8002984 <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x1c8>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8002978:	f1a3 02c8 	sub.w	r2, r3, #200	; 0xc8
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			else if (accelAltIntegrated < -200)accelAltIntegrated += 200;
		}
	}
}
 8002982:	e00d      	b.n	80029a0 <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x1e4>
			else if (accelAltIntegrated < -200)accelAltIntegrated += 200;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800298a:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 800298e:	da07      	bge.n	80029a0 <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv+0x1e4>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8002996:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	51eb851f 	.word	0x51eb851f

080029b0 <_ZN7IMU9DOFC1EP17I2C_HandleTypeDefhm>:
IMU9DOF::IMU9DOF(I2C_HandleTypeDef * theI2c, uint8_t theSector, uint32_t theAddrs)
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	4613      	mov	r3, r2
 80029be:	71fb      	strb	r3, [r7, #7]
{
	this->hi2c = theI2c;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	669a      	str	r2, [r3, #104]	; 0x68
	this->sectorFlash = theSector;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	79fa      	ldrb	r2, [r7, #7]
 80029ca:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	this->addrsFlash = theAddrs;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
}
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4618      	mov	r0, r3
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	0000      	movs	r0, r0
	...

080029e8 <_ZN7IMU9DOF11ReadCompassEv>:

IMU9DOF_Result IMU9DOF::ReadCompass()
{
 80029e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
	magn.y *= -1;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	425b      	negs	r3, r3
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	b21a      	sxth	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	83da      	strh	r2, [r3, #30]
	magn.x *= -1;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	425b      	negs	r3, r3
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	b21a      	sxth	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	839a      	strh	r2, [r3, #28]

	// calib lại giá trị thô vừa đọc để sử dụng tính toán heading lúc khởi động
	if (isAlreadyCalibCompass == 0)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 8002a1c:	f083 0301 	eor.w	r3, r3, #1
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d04c      	beq.n	8002ac0 <_ZN7IMU9DOF11ReadCompassEv+0xd8>
	{
		magn.y += compassOffset_Y;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f9b3 313a 	ldrsh.w	r3, [r3, #314]	; 0x13a
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	b21a      	sxth	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	83da      	strh	r2, [r3, #30]
		magn.y = (int16_t) ((float)(magn.y) *compassScaleY);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8002a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a5c:	ee17 3a90 	vmov	r3, s15
 8002a60:	b21a      	sxth	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	83da      	strh	r2, [r3, #30]
		magn.z += compassOffset_Z;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f9b3 313c 	ldrsh.w	r3, [r3, #316]	; 0x13c
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	b21a      	sxth	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	841a      	strh	r2, [r3, #32]
		magn.z = (int16_t) ((float)(magn.z) *compassScaleZ);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002a86:	ee07 3a90 	vmov	s15, r3
 8002a8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 8002a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a9c:	ee17 3a90 	vmov	r3, s15
 8002aa0:	b21a      	sxth	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	841a      	strh	r2, [r3, #32]
		magn.x += compassOffset_X;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f9b3 3138 	ldrsh.w	r3, [r3, #312]	; 0x138
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	b21a      	sxth	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	839a      	strh	r2, [r3, #28]
	/*
	 * Giá trị compass sẽ thay đổi khi góc roll và pitch thay đổi.
	 * Do đó các giá trị compass x&y cần được hiệu chỉnh lại theo
	 * các góc roll và pitch để đạt được vị trí phương ngang ảo.
	 */
	compassHorizontal_X = (float)magn.x * cos(anglePitch * -0.0174533) + (float)magn.y * sin(angleRoll * 0.0174533) * sin(anglePitch * -0.0174533) - (float)magn.z * cos(angleRoll * 0.0174533) * sin(anglePitch * -0.0174533);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002ac6:	ee07 3a90 	vmov	s15, r3
 8002aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ace:	ee17 0a90 	vmov	r0, s15
 8002ad2:	f7fd fcdd 	bl	8000490 <__aeabi_f2d>
 8002ad6:	4604      	mov	r4, r0
 8002ad8:	460d      	mov	r5, r1
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fd fcd6 	bl	8000490 <__aeabi_f2d>
 8002ae4:	a3da      	add	r3, pc, #872	; (adr r3, 8002e50 <_ZN7IMU9DOF11ReadCompassEv+0x468>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f7fd fd29 	bl	8000540 <__aeabi_dmul>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	ec43 2b17 	vmov	d7, r2, r3
 8002af6:	eeb0 0a47 	vmov.f32	s0, s14
 8002afa:	eef0 0a67 	vmov.f32	s1, s15
 8002afe:	f00b fcc7 	bl	800e490 <cos>
 8002b02:	ec53 2b10 	vmov	r2, r3, d0
 8002b06:	4620      	mov	r0, r4
 8002b08:	4629      	mov	r1, r5
 8002b0a:	f7fd fd19 	bl	8000540 <__aeabi_dmul>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	460c      	mov	r4, r1
 8002b12:	4625      	mov	r5, r4
 8002b14:	461c      	mov	r4, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002b1c:	ee07 3a90 	vmov	s15, r3
 8002b20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b24:	ee17 0a90 	vmov	r0, s15
 8002b28:	f7fd fcb2 	bl	8000490 <__aeabi_f2d>
 8002b2c:	4680      	mov	r8, r0
 8002b2e:	4689      	mov	r9, r1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fd fcab 	bl	8000490 <__aeabi_f2d>
 8002b3a:	a3c7      	add	r3, pc, #796	; (adr r3, 8002e58 <_ZN7IMU9DOF11ReadCompassEv+0x470>)
 8002b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b40:	f7fd fcfe 	bl	8000540 <__aeabi_dmul>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	ec43 2b17 	vmov	d7, r2, r3
 8002b4c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b50:	eef0 0a67 	vmov.f32	s1, s15
 8002b54:	f00b fce0 	bl	800e518 <sin>
 8002b58:	ec53 2b10 	vmov	r2, r3, d0
 8002b5c:	4640      	mov	r0, r8
 8002b5e:	4649      	mov	r1, r9
 8002b60:	f7fd fcee 	bl	8000540 <__aeabi_dmul>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4690      	mov	r8, r2
 8002b6a:	4699      	mov	r9, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fc8d 	bl	8000490 <__aeabi_f2d>
 8002b76:	a3b6      	add	r3, pc, #728	; (adr r3, 8002e50 <_ZN7IMU9DOF11ReadCompassEv+0x468>)
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	f7fd fce0 	bl	8000540 <__aeabi_dmul>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	ec43 2b17 	vmov	d7, r2, r3
 8002b88:	eeb0 0a47 	vmov.f32	s0, s14
 8002b8c:	eef0 0a67 	vmov.f32	s1, s15
 8002b90:	f00b fcc2 	bl	800e518 <sin>
 8002b94:	ec53 2b10 	vmov	r2, r3, d0
 8002b98:	4640      	mov	r0, r8
 8002b9a:	4649      	mov	r1, r9
 8002b9c:	f7fd fcd0 	bl	8000540 <__aeabi_dmul>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	f7fd fb14 	bl	80001d4 <__adddf3>
 8002bac:	4603      	mov	r3, r0
 8002bae:	460c      	mov	r4, r1
 8002bb0:	4625      	mov	r5, r4
 8002bb2:	461c      	mov	r4, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002bba:	ee07 3a90 	vmov	s15, r3
 8002bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bc2:	ee17 0a90 	vmov	r0, s15
 8002bc6:	f7fd fc63 	bl	8000490 <__aeabi_f2d>
 8002bca:	4680      	mov	r8, r0
 8002bcc:	4689      	mov	r9, r1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fd fc5c 	bl	8000490 <__aeabi_f2d>
 8002bd8:	a39f      	add	r3, pc, #636	; (adr r3, 8002e58 <_ZN7IMU9DOF11ReadCompassEv+0x470>)
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	f7fd fcaf 	bl	8000540 <__aeabi_dmul>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	ec43 2b17 	vmov	d7, r2, r3
 8002bea:	eeb0 0a47 	vmov.f32	s0, s14
 8002bee:	eef0 0a67 	vmov.f32	s1, s15
 8002bf2:	f00b fc4d 	bl	800e490 <cos>
 8002bf6:	ec53 2b10 	vmov	r2, r3, d0
 8002bfa:	4640      	mov	r0, r8
 8002bfc:	4649      	mov	r1, r9
 8002bfe:	f7fd fc9f 	bl	8000540 <__aeabi_dmul>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4690      	mov	r8, r2
 8002c08:	4699      	mov	r9, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fd fc3e 	bl	8000490 <__aeabi_f2d>
 8002c14:	a390      	add	r3, pc, #576	; (adr r3, 8002e58 <_ZN7IMU9DOF11ReadCompassEv+0x470>)
 8002c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1a:	f7fd fc91 	bl	8000540 <__aeabi_dmul>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	ec43 2b17 	vmov	d7, r2, r3
 8002c26:	eeb0 0a47 	vmov.f32	s0, s14
 8002c2a:	eef0 0a67 	vmov.f32	s1, s15
 8002c2e:	f00b fc73 	bl	800e518 <sin>
 8002c32:	ec53 2b10 	vmov	r2, r3, d0
 8002c36:	4640      	mov	r0, r8
 8002c38:	4649      	mov	r1, r9
 8002c3a:	f7fd fc81 	bl	8000540 <__aeabi_dmul>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	4620      	mov	r0, r4
 8002c44:	4629      	mov	r1, r5
 8002c46:	f7fd fac5 	bl	80001d4 <__adddf3>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	460c      	mov	r4, r1
 8002c4e:	4618      	mov	r0, r3
 8002c50:	4621      	mov	r1, r4
 8002c52:	f7fd ff6d 	bl	8000b30 <__aeabi_d2f>
 8002c56:	4602      	mov	r2, r0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
	compassHorizontal_Y = (float)magn.y * cos(angleRoll * 0.0174533) + (float)magn.z * sin(angleRoll * 0.0174533);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002c62:	ee07 3a90 	vmov	s15, r3
 8002c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c6a:	ee17 0a90 	vmov	r0, s15
 8002c6e:	f7fd fc0f 	bl	8000490 <__aeabi_f2d>
 8002c72:	4604      	mov	r4, r0
 8002c74:	460d      	mov	r5, r1
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fc08 	bl	8000490 <__aeabi_f2d>
 8002c80:	a375      	add	r3, pc, #468	; (adr r3, 8002e58 <_ZN7IMU9DOF11ReadCompassEv+0x470>)
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	f7fd fc5b 	bl	8000540 <__aeabi_dmul>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	ec43 2b17 	vmov	d7, r2, r3
 8002c92:	eeb0 0a47 	vmov.f32	s0, s14
 8002c96:	eef0 0a67 	vmov.f32	s1, s15
 8002c9a:	f00b fbf9 	bl	800e490 <cos>
 8002c9e:	ec53 2b10 	vmov	r2, r3, d0
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	4629      	mov	r1, r5
 8002ca6:	f7fd fc4b 	bl	8000540 <__aeabi_dmul>
 8002caa:	4603      	mov	r3, r0
 8002cac:	460c      	mov	r4, r1
 8002cae:	4625      	mov	r5, r4
 8002cb0:	461c      	mov	r4, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002cb8:	ee07 3a90 	vmov	s15, r3
 8002cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cc0:	ee17 0a90 	vmov	r0, s15
 8002cc4:	f7fd fbe4 	bl	8000490 <__aeabi_f2d>
 8002cc8:	4680      	mov	r8, r0
 8002cca:	4689      	mov	r9, r1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fbdd 	bl	8000490 <__aeabi_f2d>
 8002cd6:	a360      	add	r3, pc, #384	; (adr r3, 8002e58 <_ZN7IMU9DOF11ReadCompassEv+0x470>)
 8002cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cdc:	f7fd fc30 	bl	8000540 <__aeabi_dmul>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	ec43 2b17 	vmov	d7, r2, r3
 8002ce8:	eeb0 0a47 	vmov.f32	s0, s14
 8002cec:	eef0 0a67 	vmov.f32	s1, s15
 8002cf0:	f00b fc12 	bl	800e518 <sin>
 8002cf4:	ec53 2b10 	vmov	r2, r3, d0
 8002cf8:	4640      	mov	r0, r8
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	f7fd fc20 	bl	8000540 <__aeabi_dmul>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4620      	mov	r0, r4
 8002d06:	4629      	mov	r1, r5
 8002d08:	f7fd fa64 	bl	80001d4 <__adddf3>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	460c      	mov	r4, r1
 8002d10:	4618      	mov	r0, r3
 8002d12:	4621      	mov	r1, r4
 8002d14:	f7fd ff0c 	bl	8000b30 <__aeabi_d2f>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	60da      	str	r2, [r3, #12]
	//Now that the horizontal values are known the heading can be calculated. With the following lines of code the heading is calculated in degrees.
	//Please note that the atan2 uses radians in stead of degrees. That is why the 180/3.14 is used.
	if (compassHorizontal_Y < 0)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2c:	d531      	bpl.n	8002d92 <_ZN7IMU9DOF11ReadCompassEv+0x3aa>
	{
		actualCompassHeading = 180 + (180 + ((atan2(compassHorizontal_Y, compassHorizontal_X)) * (180 / 3.14)));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d3a:	eef0 0a47 	vmov.f32	s1, s14
 8002d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d42:	f7ff fcff 	bl	8002744 <_ZSt5atan2ff>
 8002d46:	ee10 3a10 	vmov	r3, s0
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd fba0 	bl	8000490 <__aeabi_f2d>
 8002d50:	a33b      	add	r3, pc, #236	; (adr r3, 8002e40 <_ZN7IMU9DOF11ReadCompassEv+0x458>)
 8002d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d56:	f7fd fbf3 	bl	8000540 <__aeabi_dmul>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	460c      	mov	r4, r1
 8002d5e:	4618      	mov	r0, r3
 8002d60:	4621      	mov	r1, r4
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	4b38      	ldr	r3, [pc, #224]	; (8002e48 <_ZN7IMU9DOF11ReadCompassEv+0x460>)
 8002d68:	f7fd fa34 	bl	80001d4 <__adddf3>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	460c      	mov	r4, r1
 8002d70:	4618      	mov	r0, r3
 8002d72:	4621      	mov	r1, r4
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	4b33      	ldr	r3, [pc, #204]	; (8002e48 <_ZN7IMU9DOF11ReadCompassEv+0x460>)
 8002d7a:	f7fd fa2b 	bl	80001d4 <__adddf3>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	460c      	mov	r4, r1
 8002d82:	4618      	mov	r0, r3
 8002d84:	4621      	mov	r1, r4
 8002d86:	f7fd fed3 	bl	8000b30 <__aeabi_d2f>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	611a      	str	r2, [r3, #16]
 8002d90:	e01e      	b.n	8002dd0 <_ZN7IMU9DOF11ReadCompassEv+0x3e8>
	}
	else
	{
		actualCompassHeading = (atan2(compassHorizontal_Y, compassHorizontal_X)) * (180 / 3.14);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d9e:	eef0 0a47 	vmov.f32	s1, s14
 8002da2:	eeb0 0a67 	vmov.f32	s0, s15
 8002da6:	f7ff fccd 	bl	8002744 <_ZSt5atan2ff>
 8002daa:	ee10 3a10 	vmov	r3, s0
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fd fb6e 	bl	8000490 <__aeabi_f2d>
 8002db4:	a322      	add	r3, pc, #136	; (adr r3, 8002e40 <_ZN7IMU9DOF11ReadCompassEv+0x458>)
 8002db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dba:	f7fd fbc1 	bl	8000540 <__aeabi_dmul>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	460c      	mov	r4, r1
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	f7fd feb3 	bl	8000b30 <__aeabi_d2f>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	611a      	str	r2, [r3, #16]
	}

	actualCompassHeading += declination;                                 //Add the declination to the magnetic compass heading to get the geographic north.
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	ed93 7a04 	vldr	s14, [r3, #16]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	edc3 7a04 	vstr	s15, [r3, #16]
	if (actualCompassHeading < 0) actualCompassHeading += 360;         //If the compass heading becomes smaller then 0, 360 is added to keep it in the 0 till 360 degrees range.
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	edd3 7a04 	vldr	s15, [r3, #16]
 8002dec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df4:	d50a      	bpl.n	8002e0c <_ZN7IMU9DOF11ReadCompassEv+0x424>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	edd3 7a04 	vldr	s15, [r3, #16]
 8002dfc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002e4c <_ZN7IMU9DOF11ReadCompassEv+0x464>
 8002e00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	edc3 7a04 	vstr	s15, [r3, #16]
 8002e0a:	e013      	b.n	8002e34 <_ZN7IMU9DOF11ReadCompassEv+0x44c>
	else if (actualCompassHeading >= 360) actualCompassHeading -= 360; //If the compass heading becomes larger then 360, 360 is subtracted to keep it in the 0 till 360 degrees range.
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e12:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002e4c <_ZN7IMU9DOF11ReadCompassEv+0x464>
 8002e16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e1e:	db09      	blt.n	8002e34 <_ZN7IMU9DOF11ReadCompassEv+0x44c>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e26:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002e4c <_ZN7IMU9DOF11ReadCompassEv+0x464>
 8002e2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	edc3 7a04 	vstr	s15, [r3, #16]

	return IMU9DOF_Result_Ok;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e40:	61d59ae7 	.word	0x61d59ae7
 8002e44:	404ca994 	.word	0x404ca994
 8002e48:	40668000 	.word	0x40668000
 8002e4c:	43b40000 	.word	0x43b40000
 8002e50:	22d4405f 	.word	0x22d4405f
 8002e54:	bf91df47 	.word	0xbf91df47
 8002e58:	22d4405f 	.word	0x22d4405f
 8002e5c:	3f91df47 	.word	0x3f91df47

08002e60 <_ZN7IMU9DOF25IsReadyToInterfaceMPU6050Ev>:


IMU9DOF_Result IMU9DOF::IsReadyToInterfaceMPU6050()
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af04      	add	r7, sp, #16
 8002e66:	6078      	str	r0, [r7, #4]
	uint8_t data;	// value to wakeup MPU6050

	/**** Kiểm tra giao tiếp I2C của MPU6050 *****/
	if (HAL_I2C_IsDeviceReady(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, 2, 5) != HAL_OK)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002e6c:	2305      	movs	r3, #5
 8002e6e:	2202      	movs	r2, #2
 8002e70:	21d0      	movs	r1, #208	; 0xd0
 8002e72:	f007 fc75 	bl	800a760 <HAL_I2C_IsDeviceReady>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	bf14      	ite	ne
 8002e7c:	2301      	movne	r3, #1
 8002e7e:	2300      	moveq	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <_ZN7IMU9DOF25IsReadyToInterfaceMPU6050Ev+0x2a>
	{
		return IMU9DFO_Result_MPU6050_NotConnected;
 8002e86:	2304      	movs	r3, #4
 8002e88:	e039      	b.n	8002efe <_ZN7IMU9DOF25IsReadyToInterfaceMPU6050Ev+0x9e>
	}

	/* Check who am I */
	if (HAL_I2C_Mem_Read(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, &data, 1, 500) != HAL_OK)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002e8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002e92:	9302      	str	r3, [sp, #8]
 8002e94:	2301      	movs	r3, #1
 8002e96:	9301      	str	r3, [sp, #4]
 8002e98:	f107 030f 	add.w	r3, r7, #15
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	2275      	movs	r2, #117	; 0x75
 8002ea2:	21d0      	movs	r1, #208	; 0xd0
 8002ea4:	f007 fa36 	bl	800a314 <HAL_I2C_Mem_Read>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bf14      	ite	ne
 8002eae:	2301      	movne	r3, #1
 8002eb0:	2300      	moveq	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <_ZN7IMU9DOF25IsReadyToInterfaceMPU6050Ev+0x5c>
	{
		return IMU9DFO_Result_MPU6050_NotConnected;
 8002eb8:	2304      	movs	r3, #4
 8002eba:	e020      	b.n	8002efe <_ZN7IMU9DOF25IsReadyToInterfaceMPU6050Ev+0x9e>
	}

	/* Checking */
	while(data != MPU6050_I_AM)
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	2b68      	cmp	r3, #104	; 0x68
 8002ec0:	d001      	beq.n	8002ec6 <_ZN7IMU9DOF25IsReadyToInterfaceMPU6050Ev+0x66>
	{
		/* Return error */
		return IMU9DFO_Result_MPU6050_NotConnected;
 8002ec2:	2304      	movs	r3, #4
 8002ec4:	e01b      	b.n	8002efe <_ZN7IMU9DOF25IsReadyToInterfaceMPU6050Ev+0x9e>
	}

	data = 0x00;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	73fb      	strb	r3, [r7, #15]
	/* Wakeup MPU6050 */
	if (HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &data, 1, 500) != HAL_OK)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002ece:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002ed2:	9302      	str	r3, [sp, #8]
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	9301      	str	r3, [sp, #4]
 8002ed8:	f107 030f 	add.w	r3, r7, #15
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	2301      	movs	r3, #1
 8002ee0:	226b      	movs	r2, #107	; 0x6b
 8002ee2:	21d0      	movs	r1, #208	; 0xd0
 8002ee4:	f007 f91c 	bl	800a120 <HAL_I2C_Mem_Write>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	bf14      	ite	ne
 8002eee:	2301      	movne	r3, #1
 8002ef0:	2300      	moveq	r3, #0
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <_ZN7IMU9DOF25IsReadyToInterfaceMPU6050Ev+0x9c>
	{
		return IMU9DFO_Result_MPU6050_NotConnected;
 8002ef8:	2304      	movs	r3, #4
 8002efa:	e000      	b.n	8002efe <_ZN7IMU9DOF25IsReadyToInterfaceMPU6050Ev+0x9e>
	}

	return IMU9DOF_Result_Ok;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <_ZN7IMU9DOF26IsReadyToInterfaceHMC5883LEv>:

IMU9DOF_Result IMU9DOF::IsReadyToInterfaceHMC5883L()
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b088      	sub	sp, #32
 8002f0a:	af04      	add	r7, sp, #16
 8002f0c:	6078      	str	r0, [r7, #4]

	// Tắt chế độ I2C master mode
	uint8_t data = 0x00;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_USER_CTRL, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002f16:	2332      	movs	r3, #50	; 0x32
 8002f18:	9302      	str	r3, [sp, #8]
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	9301      	str	r3, [sp, #4]
 8002f1e:	f107 030f 	add.w	r3, r7, #15
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	2301      	movs	r3, #1
 8002f26:	226a      	movs	r2, #106	; 0x6a
 8002f28:	21d0      	movs	r1, #208	; 0xd0
 8002f2a:	f007 f8f9 	bl	800a120 <HAL_I2C_Mem_Write>

	// Bật chế độ I2C master bypass mode
	data = 0x02;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_INT_PIN_CFG, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002f36:	2332      	movs	r3, #50	; 0x32
 8002f38:	9302      	str	r3, [sp, #8]
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	9301      	str	r3, [sp, #4]
 8002f3e:	f107 030f 	add.w	r3, r7, #15
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	2301      	movs	r3, #1
 8002f46:	2237      	movs	r2, #55	; 0x37
 8002f48:	21d0      	movs	r1, #208	; 0xd0
 8002f4a:	f007 f8e9 	bl	800a120 <HAL_I2C_Mem_Write>

	/**** Kiểm tra giao tiếp I2C của HMC5883L *****/
	if (HAL_I2C_IsDeviceReady(this->hi2c, (uint16_t)HMC5883L_ADDRESS, 2, 5) != HAL_OK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002f52:	2305      	movs	r3, #5
 8002f54:	2202      	movs	r2, #2
 8002f56:	213c      	movs	r1, #60	; 0x3c
 8002f58:	f007 fc02 	bl	800a760 <HAL_I2C_IsDeviceReady>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bf14      	ite	ne
 8002f62:	2301      	movne	r3, #1
 8002f64:	2300      	moveq	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <_ZN7IMU9DOF26IsReadyToInterfaceHMC5883LEv+0x6a>
	{
		return IMU9DFO_Result_HMC5883L_NotConnected;
 8002f6c:	2305      	movs	r3, #5
 8002f6e:	e020      	b.n	8002fb2 <_ZN7IMU9DOF26IsReadyToInterfaceHMC5883LEv+0xac>
	}

	// Tắt chế độ I2C master bypass mode
	data = 0x00;
 8002f70:	2300      	movs	r3, #0
 8002f72:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_INT_PIN_CFG, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002f78:	2332      	movs	r3, #50	; 0x32
 8002f7a:	9302      	str	r3, [sp, #8]
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	9301      	str	r3, [sp, #4]
 8002f80:	f107 030f 	add.w	r3, r7, #15
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	2301      	movs	r3, #1
 8002f88:	2237      	movs	r2, #55	; 0x37
 8002f8a:	21d0      	movs	r1, #208	; 0xd0
 8002f8c:	f007 f8c8 	bl	800a120 <HAL_I2C_Mem_Write>

	// Bật chế độ I2C master mode
	data = 0x20;
 8002f90:	2320      	movs	r3, #32
 8002f92:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_USER_CTRL, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002f98:	2332      	movs	r3, #50	; 0x32
 8002f9a:	9302      	str	r3, [sp, #8]
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	9301      	str	r3, [sp, #4]
 8002fa0:	f107 030f 	add.w	r3, r7, #15
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	226a      	movs	r2, #106	; 0x6a
 8002faa:	21d0      	movs	r1, #208	; 0xd0
 8002fac:	f007 f8b8 	bl	800a120 <HAL_I2C_Mem_Write>

	return IMU9DOF_Result_Ok;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <_ZN7IMU9DOF19ReadRawAllParameterEv>:

	return IMU9DOF_Result_Ok;
}

IMU9DOF_Result IMU9DOF::ReadRawAllParameter()   // đọc các giá trị thô
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b08c      	sub	sp, #48	; 0x30
 8002fbe:	af04      	add	r7, sp, #16
 8002fc0:	6078      	str	r0, [r7, #4]
	uint8_t data[20];

	if (HAL_I2C_Mem_Read(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, data, 20, 500) != HAL_OK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002fc6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002fca:	9302      	str	r3, [sp, #8]
 8002fcc:	2314      	movs	r3, #20
 8002fce:	9301      	str	r3, [sp, #4]
 8002fd0:	f107 030c 	add.w	r3, r7, #12
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	223b      	movs	r2, #59	; 0x3b
 8002fda:	21d0      	movs	r1, #208	; 0xd0
 8002fdc:	f007 f99a 	bl	800a314 <HAL_I2C_Mem_Read>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	bf14      	ite	ne
 8002fe6:	2301      	movne	r3, #1
 8002fe8:	2300      	moveq	r3, #0
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <_ZN7IMU9DOF19ReadRawAllParameterEv+0x3a>
	{
		return IMU9DOF_Result_Error;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e063      	b.n	80030bc <_ZN7IMU9DOF19ReadRawAllParameterEv+0x102>
	}

	/* Format accelerometer data */
	// -139, -640 la gia tri offset theo cac phuong x, y do viec dat cam bien MPU6050 khong nam thang bang
	this->accel.y = (int16_t)(data[0] << 8 | data[1]) - 139 ;
 8002ff4:	7b3b      	ldrb	r3, [r7, #12]
 8002ff6:	021b      	lsls	r3, r3, #8
 8002ff8:	b21a      	sxth	r2, r3
 8002ffa:	7b7b      	ldrb	r3, [r7, #13]
 8002ffc:	b21b      	sxth	r3, r3
 8002ffe:	4313      	orrs	r3, r2
 8003000:	b21b      	sxth	r3, r3
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b8b      	subs	r3, #139	; 0x8b
 8003006:	b29b      	uxth	r3, r3
 8003008:	b21a      	sxth	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	855a      	strh	r2, [r3, #42]	; 0x2a
	this->accel.x = (int16_t)(data[2] << 8 | data[3]) - 640;
 800300e:	7bbb      	ldrb	r3, [r7, #14]
 8003010:	021b      	lsls	r3, r3, #8
 8003012:	b21a      	sxth	r2, r3
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	b21b      	sxth	r3, r3
 8003018:	4313      	orrs	r3, r2
 800301a:	b21b      	sxth	r3, r3
 800301c:	b29b      	uxth	r3, r3
 800301e:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8003022:	b29b      	uxth	r3, r3
 8003024:	b21a      	sxth	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	851a      	strh	r2, [r3, #40]	; 0x28
	this->accel.z = (int16_t)(data[4] << 8 | data[5]);
 800302a:	7c3b      	ldrb	r3, [r7, #16]
 800302c:	021b      	lsls	r3, r3, #8
 800302e:	b21a      	sxth	r2, r3
 8003030:	7c7b      	ldrb	r3, [r7, #17]
 8003032:	b21b      	sxth	r3, r3
 8003034:	4313      	orrs	r3, r2
 8003036:	b21a      	sxth	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	859a      	strh	r2, [r3, #44]	; 0x2c

		/* Format temperature */
	this->temp = (data[6] << 8 | data[7]);
 800303c:	7cbb      	ldrb	r3, [r7, #18]
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	b21a      	sxth	r2, r3
 8003042:	7cfb      	ldrb	r3, [r7, #19]
 8003044:	b21b      	sxth	r3, r3
 8003046:	4313      	orrs	r3, r2
 8003048:	b21a      	sxth	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	831a      	strh	r2, [r3, #24]

	/* Format gyroscope data */
	this->gyro.x = (int16_t)(data[8] << 8 | data[9]);
 800304e:	7d3b      	ldrb	r3, [r7, #20]
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	b21a      	sxth	r2, r3
 8003054:	7d7b      	ldrb	r3, [r7, #21]
 8003056:	b21b      	sxth	r3, r3
 8003058:	4313      	orrs	r3, r2
 800305a:	b21a      	sxth	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	869a      	strh	r2, [r3, #52]	; 0x34
	this->gyro.y = (int16_t)(data[10] << 8 | data[11]);
 8003060:	7dbb      	ldrb	r3, [r7, #22]
 8003062:	021b      	lsls	r3, r3, #8
 8003064:	b21a      	sxth	r2, r3
 8003066:	7dfb      	ldrb	r3, [r7, #23]
 8003068:	b21b      	sxth	r3, r3
 800306a:	4313      	orrs	r3, r2
 800306c:	b21a      	sxth	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	86da      	strh	r2, [r3, #54]	; 0x36
	this->gyro.z = (int16_t)(data[12] << 8 | data[13]);
 8003072:	7e3b      	ldrb	r3, [r7, #24]
 8003074:	021b      	lsls	r3, r3, #8
 8003076:	b21a      	sxth	r2, r3
 8003078:	7e7b      	ldrb	r3, [r7, #25]
 800307a:	b21b      	sxth	r3, r3
 800307c:	4313      	orrs	r3, r2
 800307e:	b21a      	sxth	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	871a      	strh	r2, [r3, #56]	; 0x38

	this->magn.y   = (int16_t)(data[14] << 8 | data[15]);
 8003084:	7ebb      	ldrb	r3, [r7, #26]
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	b21a      	sxth	r2, r3
 800308a:	7efb      	ldrb	r3, [r7, #27]
 800308c:	b21b      	sxth	r3, r3
 800308e:	4313      	orrs	r3, r2
 8003090:	b21a      	sxth	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	83da      	strh	r2, [r3, #30]
	this->magn.z   = (int16_t)(data[16] << 8 | data[17]);
 8003096:	7f3b      	ldrb	r3, [r7, #28]
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	b21a      	sxth	r2, r3
 800309c:	7f7b      	ldrb	r3, [r7, #29]
 800309e:	b21b      	sxth	r3, r3
 80030a0:	4313      	orrs	r3, r2
 80030a2:	b21a      	sxth	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	841a      	strh	r2, [r3, #32]
	this->magn.x   = (int16_t)(data[18] << 8 | data[19]);
 80030a8:	7fbb      	ldrb	r3, [r7, #30]
 80030aa:	021b      	lsls	r3, r3, #8
 80030ac:	b21a      	sxth	r2, r3
 80030ae:	7ffb      	ldrb	r3, [r7, #31]
 80030b0:	b21b      	sxth	r3, r3
 80030b2:	4313      	orrs	r3, r2
 80030b4:	b21a      	sxth	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	839a      	strh	r2, [r3, #28]

	/* Return OK */
	return IMU9DOF_Result_Ok;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3720      	adds	r7, #32
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <_ZN7IMU9DOF26SetAccelSensitivityMPU6050E21MPU6050_Accelerometer>:

HAL_StatusTypeDef IMU9DOF::SetAccelSensitivityMPU6050(MPU6050_Accelerometer theAccelSens)  // SetupGyro
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af04      	add	r7, sp, #16
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	70fb      	strb	r3, [r7, #3]
	uint8_t data;

	HAL_I2C_Mem_Read(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, 500);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80030d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80030d8:	9302      	str	r3, [sp, #8]
 80030da:	2301      	movs	r3, #1
 80030dc:	9301      	str	r3, [sp, #4]
 80030de:	f107 030f 	add.w	r3, r7, #15
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	2301      	movs	r3, #1
 80030e6:	221c      	movs	r2, #28
 80030e8:	21d0      	movs	r1, #208	; 0xd0
 80030ea:	f007 f913 	bl	800a314 <HAL_I2C_Mem_Read>

	data = (data & 0xE7) | ((uint8_t)theAccelSens << 3);
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	b25b      	sxtb	r3, r3
 80030f2:	f023 0318 	bic.w	r3, r3, #24
 80030f6:	b25a      	sxtb	r2, r3
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	b25b      	sxtb	r3, r3
 80030fe:	4313      	orrs	r3, r2
 8003100:	b25b      	sxtb	r3, r3
 8003102:	b2db      	uxtb	r3, r3
 8003104:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, 500);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800310a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800310e:	9302      	str	r3, [sp, #8]
 8003110:	2301      	movs	r3, #1
 8003112:	9301      	str	r3, [sp, #4]
 8003114:	f107 030f 	add.w	r3, r7, #15
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	2301      	movs	r3, #1
 800311c:	221c      	movs	r2, #28
 800311e:	21d0      	movs	r1, #208	; 0xd0
 8003120:	f006 fffe 	bl	800a120 <HAL_I2C_Mem_Write>

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (theAccelSens) {
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	2b03      	cmp	r3, #3
 8003128:	d81e      	bhi.n	8003168 <_ZN7IMU9DOF26SetAccelSensitivityMPU6050E21MPU6050_Accelerometer+0xa4>
 800312a:	a201      	add	r2, pc, #4	; (adr r2, 8003130 <_ZN7IMU9DOF26SetAccelSensitivityMPU6050E21MPU6050_Accelerometer+0x6c>)
 800312c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003130:	08003141 	.word	0x08003141
 8003134:	0800314b 	.word	0x0800314b
 8003138:	08003155 	.word	0x08003155
 800313c:	0800315f 	.word	0x0800315f
	case MPU6050_Accelerometer_2G:
		this->accel.accelMult= (float)1 / MPU6050_ACCE_SENS_2;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8003146:	631a      	str	r2, [r3, #48]	; 0x30
		break;
 8003148:	e00f      	b.n	800316a <_ZN7IMU9DOF26SetAccelSensitivityMPU6050E21MPU6050_Accelerometer+0xa6>
	case MPU6050_Accelerometer_4G:
		this->accel.accelMult = (float)1 / MPU6050_ACCE_SENS_4;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8003150:	631a      	str	r2, [r3, #48]	; 0x30
		break;
 8003152:	e00a      	b.n	800316a <_ZN7IMU9DOF26SetAccelSensitivityMPU6050E21MPU6050_Accelerometer+0xa6>
	case MPU6050_Accelerometer_8G:
		this->accel.accelMult = (float)1 / MPU6050_ACCE_SENS_8;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800315a:	631a      	str	r2, [r3, #48]	; 0x30
		break;
 800315c:	e005      	b.n	800316a <_ZN7IMU9DOF26SetAccelSensitivityMPU6050E21MPU6050_Accelerometer+0xa6>
	case MPU6050_Accelerometer_16G:
		this->accel.accelMult = (float)1 / MPU6050_ACCE_SENS_16;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8003164:	631a      	str	r2, [r3, #48]	; 0x30
		break;
 8003166:	e000      	b.n	800316a <_ZN7IMU9DOF26SetAccelSensitivityMPU6050E21MPU6050_Accelerometer+0xa6>
	default:
		break;
 8003168:	bf00      	nop
	}
	/* Return OK */
	return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope>:

HAL_StatusTypeDef IMU9DOF::SetGyroSensitivityMPU6050(MPU6050_Gyroscope theGyroSens) // SetupGyro
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af04      	add	r7, sp, #16
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	70fb      	strb	r3, [r7, #3]
	uint8_t data;

	HAL_I2C_Mem_Read(this->hi2c, (uint16_t) MPU6050_I2C_ADDR, (uint16_t)MPU6050_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, 500);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003184:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003188:	9302      	str	r3, [sp, #8]
 800318a:	2301      	movs	r3, #1
 800318c:	9301      	str	r3, [sp, #4]
 800318e:	f107 030f 	add.w	r3, r7, #15
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	2301      	movs	r3, #1
 8003196:	221b      	movs	r2, #27
 8003198:	21d0      	movs	r1, #208	; 0xd0
 800319a:	f007 f8bb 	bl	800a314 <HAL_I2C_Mem_Read>


	data = (data & 0xE7) | ((uint8_t)theGyroSens << 3);
 800319e:	7bfb      	ldrb	r3, [r7, #15]
 80031a0:	b25b      	sxtb	r3, r3
 80031a2:	f023 0318 	bic.w	r3, r3, #24
 80031a6:	b25a      	sxtb	r2, r3
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	b25b      	sxtb	r3, r3
 80031ae:	4313      	orrs	r3, r2
 80031b0:	b25b      	sxtb	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(this->hi2c, (uint16_t) MPU6050_I2C_ADDR, (uint16_t)MPU6050_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, 500);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80031ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80031be:	9302      	str	r3, [sp, #8]
 80031c0:	2301      	movs	r3, #1
 80031c2:	9301      	str	r3, [sp, #4]
 80031c4:	f107 030f 	add.w	r3, r7, #15
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	2301      	movs	r3, #1
 80031cc:	221b      	movs	r2, #27
 80031ce:	21d0      	movs	r1, #208	; 0xd0
 80031d0:	f006 ffa6 	bl	800a120 <HAL_I2C_Mem_Write>


	switch (theGyroSens) {
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	d81a      	bhi.n	8003210 <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope+0x9c>
 80031da:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope+0x6c>)
 80031dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e0:	080031f1 	.word	0x080031f1
 80031e4:	080031f9 	.word	0x080031f9
 80031e8:	08003201 	.word	0x08003201
 80031ec:	08003209 	.word	0x08003209
	case MPU6050_Gyroscope_250s:
		this->gyro.gyroMult = (float)1 / MPU6050_GYRO_SENS_250;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a0a      	ldr	r2, [pc, #40]	; (800321c <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope+0xa8>)
 80031f4:	649a      	str	r2, [r3, #72]	; 0x48
		break;
 80031f6:	e00c      	b.n	8003212 <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope+0x9e>
	case MPU6050_Gyroscope_500s:
		this->gyro.gyroMult = (float)1 / MPU6050_GYRO_SENS_500;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a09      	ldr	r2, [pc, #36]	; (8003220 <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope+0xac>)
 80031fc:	649a      	str	r2, [r3, #72]	; 0x48
		break;
 80031fe:	e008      	b.n	8003212 <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope+0x9e>
	case MPU6050_Gyroscope_1000s:
		this->gyro.gyroMult = (float)1 / MPU6050_GYRO_SENS_1000;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a08      	ldr	r2, [pc, #32]	; (8003224 <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope+0xb0>)
 8003204:	649a      	str	r2, [r3, #72]	; 0x48
		break;
 8003206:	e004      	b.n	8003212 <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope+0x9e>
	case MPU6050_Gyroscope_2000s:
		this->gyro.gyroMult = (float)1 / MPU6050_GYRO_SENS_2000;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a07      	ldr	r2, [pc, #28]	; (8003228 <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope+0xb4>)
 800320c:	649a      	str	r2, [r3, #72]	; 0x48
		break;
 800320e:	e000      	b.n	8003212 <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope+0x9e>
	default:
		break;
 8003210:	bf00      	nop
	}

	return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	3bfa232d 	.word	0x3bfa232d
 8003220:	3c7a232d 	.word	0x3c7a232d
 8003224:	3cf9c190 	.word	0x3cf9c190
 8003228:	3d79c190 	.word	0x3d79c190

0800322c <_ZN7IMU9DOF9SetupGyroEv>:
HAL_StatusTypeDef IMU9DOF::SetupGyro(){ // init
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af04      	add	r7, sp, #16
 8003232:	6078      	str	r0, [r7, #4]
	uint8_t data = 0x00;
 8003234:	2300      	movs	r3, #0
 8003236:	73fb      	strb	r3, [r7, #15]

	/* Config accelerometer */
	if ( SetAccelSensitivityMPU6050(MPU6050_Accelerometer_8G) != HAL_OK){
 8003238:	2102      	movs	r1, #2
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff ff42 	bl	80030c4 <_ZN7IMU9DOF26SetAccelSensitivityMPU6050E21MPU6050_Accelerometer>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	bf14      	ite	ne
 8003246:	2301      	movne	r3, #1
 8003248:	2300      	moveq	r3, #0
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <_ZN7IMU9DOF9SetupGyroEv+0x28>
		return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e028      	b.n	80032a6 <_ZN7IMU9DOF9SetupGyroEv+0x7a>
	}

	/* Config Gyroscope */
	if ( SetGyroSensitivityMPU6050(MPU6050_Gyroscope_500s) != HAL_OK){
 8003254:	2101      	movs	r1, #1
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff ff8c 	bl	8003174 <_ZN7IMU9DOF25SetGyroSensitivityMPU6050E17MPU6050_Gyroscope>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	bf14      	ite	ne
 8003262:	2301      	movne	r3, #1
 8003264:	2300      	moveq	r3, #0
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <_ZN7IMU9DOF9SetupGyroEv+0x44>
		return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e01a      	b.n	80032a6 <_ZN7IMU9DOF9SetupGyroEv+0x7a>
	}

	// Thiết lập digital low pass filter với tần số là 43Hz
	data = 0x03;
 8003270:	2303      	movs	r3, #3
 8003272:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_CONFIG, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003278:	2332      	movs	r3, #50	; 0x32
 800327a:	9302      	str	r3, [sp, #8]
 800327c:	2301      	movs	r3, #1
 800327e:	9301      	str	r3, [sp, #4]
 8003280:	f107 030f 	add.w	r3, r7, #15
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	2301      	movs	r3, #1
 8003288:	221a      	movs	r2, #26
 800328a:	21d0      	movs	r1, #208	; 0xd0
 800328c:	f006 ff48 	bl	800a120 <HAL_I2C_Mem_Write>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	bf14      	ite	ne
 8003296:	2301      	movne	r3, #1
 8003298:	2300      	moveq	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <_ZN7IMU9DOF9SetupGyroEv+0x78>
		return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <_ZN7IMU9DOF9SetupGyroEv+0x7a>
	}

	return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <_ZN7IMU9DOF12SetupCompassEv>:

HAL_StatusTypeDef IMU9DOF::SetupCompass(){ // init
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b088      	sub	sp, #32
 80032b2:	af04      	add	r7, sp, #16
 80032b4:	6078      	str	r0, [r7, #4]
	// Tắt chế độ I2C master mode
	uint8_t data = 0x00;
 80032b6:	2300      	movs	r3, #0
 80032b8:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_USER_CTRL, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80032be:	2332      	movs	r3, #50	; 0x32
 80032c0:	9302      	str	r3, [sp, #8]
 80032c2:	2301      	movs	r3, #1
 80032c4:	9301      	str	r3, [sp, #4]
 80032c6:	f107 030f 	add.w	r3, r7, #15
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	2301      	movs	r3, #1
 80032ce:	226a      	movs	r2, #106	; 0x6a
 80032d0:	21d0      	movs	r1, #208	; 0xd0
 80032d2:	f006 ff25 	bl	800a120 <HAL_I2C_Mem_Write>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	bf14      	ite	ne
 80032dc:	2301      	movne	r3, #1
 80032de:	2300      	moveq	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <_ZN7IMU9DOF12SetupCompassEv+0x3c>
		return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e09c      	b.n	8003424 <_ZN7IMU9DOF12SetupCompassEv+0x176>
	}

	// Bật chế độ I2C master bypass mode
	data = 0x02;
 80032ea:	2302      	movs	r3, #2
 80032ec:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_INT_PIN_CFG, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80032f2:	2332      	movs	r3, #50	; 0x32
 80032f4:	9302      	str	r3, [sp, #8]
 80032f6:	2301      	movs	r3, #1
 80032f8:	9301      	str	r3, [sp, #4]
 80032fa:	f107 030f 	add.w	r3, r7, #15
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	2301      	movs	r3, #1
 8003302:	2237      	movs	r2, #55	; 0x37
 8003304:	21d0      	movs	r1, #208	; 0xd0
 8003306:	f006 ff0b 	bl	800a120 <HAL_I2C_Mem_Write>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	bf14      	ite	ne
 8003310:	2301      	movne	r3, #1
 8003312:	2300      	moveq	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <_ZN7IMU9DOF12SetupCompassEv+0x70>
		return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e082      	b.n	8003424 <_ZN7IMU9DOF12SetupCompassEv+0x176>
	}

	// Thiết lập sample rate = 75Hz và số lần lấy mẫu trung bình là 8
	data = 0x78;
 800331e:	2378      	movs	r3, #120	; 0x78
 8003320:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Mem_Write(this->hi2c, (uint16_t)HMC5883L_ADDRESS, (uint16_t)HMC5883L_CONFIG_A, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003326:	2332      	movs	r3, #50	; 0x32
 8003328:	9302      	str	r3, [sp, #8]
 800332a:	2301      	movs	r3, #1
 800332c:	9301      	str	r3, [sp, #4]
 800332e:	f107 030f 	add.w	r3, r7, #15
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	2301      	movs	r3, #1
 8003336:	2200      	movs	r2, #0
 8003338:	213c      	movs	r1, #60	; 0x3c
 800333a:	f006 fef1 	bl	800a120 <HAL_I2C_Mem_Write>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <_ZN7IMU9DOF12SetupCompassEv+0xa4>
		return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e068      	b.n	8003424 <_ZN7IMU9DOF12SetupCompassEv+0x176>
	}

	// Thiết lập full scale = +/- 1.3 Gauss
	data= 0x20;
 8003352:	2320      	movs	r3, #32
 8003354:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Mem_Write(this->hi2c, (uint16_t)HMC5883L_ADDRESS, (uint16_t)HMC5883L_CONFIG_B, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800335a:	2332      	movs	r3, #50	; 0x32
 800335c:	9302      	str	r3, [sp, #8]
 800335e:	2301      	movs	r3, #1
 8003360:	9301      	str	r3, [sp, #4]
 8003362:	f107 030f 	add.w	r3, r7, #15
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	2301      	movs	r3, #1
 800336a:	2201      	movs	r2, #1
 800336c:	213c      	movs	r1, #60	; 0x3c
 800336e:	f006 fed7 	bl	800a120 <HAL_I2C_Mem_Write>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf14      	ite	ne
 8003378:	2301      	movne	r3, #1
 800337a:	2300      	moveq	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <_ZN7IMU9DOF12SetupCompassEv+0xd8>
		return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e04e      	b.n	8003424 <_ZN7IMU9DOF12SetupCompassEv+0x176>
	}

	// Bật chế độ continuous measurement
	data = 0x00;
 8003386:	2300      	movs	r3, #0
 8003388:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Mem_Write(this->hi2c, (uint16_t)HMC5883L_ADDRESS, (uint16_t)HMC5883L_MODE_REG, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800338e:	2332      	movs	r3, #50	; 0x32
 8003390:	9302      	str	r3, [sp, #8]
 8003392:	2301      	movs	r3, #1
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	f107 030f 	add.w	r3, r7, #15
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	2301      	movs	r3, #1
 800339e:	2202      	movs	r2, #2
 80033a0:	213c      	movs	r1, #60	; 0x3c
 80033a2:	f006 febd 	bl	800a120 <HAL_I2C_Mem_Write>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf14      	ite	ne
 80033ac:	2301      	movne	r3, #1
 80033ae:	2300      	moveq	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <_ZN7IMU9DOF12SetupCompassEv+0x10c>
		return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e034      	b.n	8003424 <_ZN7IMU9DOF12SetupCompassEv+0x176>
	}

	// Tắt chế độ I2C master bypass mode
	data = 0x00;
 80033ba:	2300      	movs	r3, #0
 80033bc:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_INT_PIN_CFG, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80033c2:	2332      	movs	r3, #50	; 0x32
 80033c4:	9302      	str	r3, [sp, #8]
 80033c6:	2301      	movs	r3, #1
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	f107 030f 	add.w	r3, r7, #15
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	2301      	movs	r3, #1
 80033d2:	2237      	movs	r2, #55	; 0x37
 80033d4:	21d0      	movs	r1, #208	; 0xd0
 80033d6:	f006 fea3 	bl	800a120 <HAL_I2C_Mem_Write>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	bf14      	ite	ne
 80033e0:	2301      	movne	r3, #1
 80033e2:	2300      	moveq	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <_ZN7IMU9DOF12SetupCompassEv+0x140>
		return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e01a      	b.n	8003424 <_ZN7IMU9DOF12SetupCompassEv+0x176>
	}

	// Bật chế độ I2C master mode
	data = 0x20;
 80033ee:	2320      	movs	r3, #32
 80033f0:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_USER_CTRL, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80033f6:	2332      	movs	r3, #50	; 0x32
 80033f8:	9302      	str	r3, [sp, #8]
 80033fa:	2301      	movs	r3, #1
 80033fc:	9301      	str	r3, [sp, #4]
 80033fe:	f107 030f 	add.w	r3, r7, #15
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	2301      	movs	r3, #1
 8003406:	226a      	movs	r2, #106	; 0x6a
 8003408:	21d0      	movs	r1, #208	; 0xd0
 800340a:	f006 fe89 	bl	800a120 <HAL_I2C_Mem_Write>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf14      	ite	ne
 8003414:	2301      	movne	r3, #1
 8003416:	2300      	moveq	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <_ZN7IMU9DOF12SetupCompassEv+0x174>
		return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <_ZN7IMU9DOF12SetupCompassEv+0x176>
	}

	return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <_ZN7IMU9DOF25SetupAutomaticReadCompassEv>:

HAL_StatusTypeDef IMU9DOF::SetupAutomaticReadCompass(){  // init
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af04      	add	r7, sp, #16
 8003432:	6078      	str	r0, [r7, #4]
	// Thiết lập địa chỉ của thanh ghi cần đọc là HMC5883L
	uint8_t data = HMC5883L_ADDRESS_DATASHEET | 0x80;
 8003434:	239e      	movs	r3, #158	; 0x9e
 8003436:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_I2C_SLV0_ADDR, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800343c:	2332      	movs	r3, #50	; 0x32
 800343e:	9302      	str	r3, [sp, #8]
 8003440:	2301      	movs	r3, #1
 8003442:	9301      	str	r3, [sp, #4]
 8003444:	f107 030f 	add.w	r3, r7, #15
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	2301      	movs	r3, #1
 800344c:	2225      	movs	r2, #37	; 0x25
 800344e:	21d0      	movs	r1, #208	; 0xd0
 8003450:	f006 fe66 	bl	800a120 <HAL_I2C_Mem_Write>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	bf14      	ite	ne
 800345a:	2301      	movne	r3, #1
 800345c:	2300      	moveq	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <_ZN7IMU9DOF25SetupAutomaticReadCompassEv+0x3c>
		return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e04e      	b.n	8003506 <_ZN7IMU9DOF25SetupAutomaticReadCompassEv+0xda>
	}

	// Bắt đầu đọc giá trị địa chỉ thanh ghi là 0x03 (x axis)
	data = 0x03;
 8003468:	2303      	movs	r3, #3
 800346a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_I2C_SLV0_REG, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003470:	2332      	movs	r3, #50	; 0x32
 8003472:	9302      	str	r3, [sp, #8]
 8003474:	2301      	movs	r3, #1
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	f107 030f 	add.w	r3, r7, #15
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	2301      	movs	r3, #1
 8003480:	2226      	movs	r2, #38	; 0x26
 8003482:	21d0      	movs	r1, #208	; 0xd0
 8003484:	f006 fe4c 	bl	800a120 <HAL_I2C_Mem_Write>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	bf14      	ite	ne
 800348e:	2301      	movne	r3, #1
 8003490:	2300      	moveq	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <_ZN7IMU9DOF25SetupAutomaticReadCompassEv+0x70>
		return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e034      	b.n	8003506 <_ZN7IMU9DOF25SetupAutomaticReadCompassEv+0xda>
	}

	// Đọc 6 thanh ghi liên tiếp trong HMC5883L
	data = 6 | 0x80;
 800349c:	2386      	movs	r3, #134	; 0x86
 800349e:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_I2C_SLV0_CTRL, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80034a4:	2332      	movs	r3, #50	; 0x32
 80034a6:	9302      	str	r3, [sp, #8]
 80034a8:	2301      	movs	r3, #1
 80034aa:	9301      	str	r3, [sp, #4]
 80034ac:	f107 030f 	add.w	r3, r7, #15
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	2301      	movs	r3, #1
 80034b4:	2227      	movs	r2, #39	; 0x27
 80034b6:	21d0      	movs	r1, #208	; 0xd0
 80034b8:	f006 fe32 	bl	800a120 <HAL_I2C_Mem_Write>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	bf14      	ite	ne
 80034c2:	2301      	movne	r3, #1
 80034c4:	2300      	moveq	r3, #0
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <_ZN7IMU9DOF25SetupAutomaticReadCompassEv+0xa4>
		return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e01a      	b.n	8003506 <_ZN7IMU9DOF25SetupAutomaticReadCompassEv+0xda>
	}
	// cho phép slave 0
	data = 1;
 80034d0:	2301      	movs	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)0x67, I2C_MEMADD_SIZE_8BIT, &data, 1, 50) != HAL_OK){
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80034d8:	2332      	movs	r3, #50	; 0x32
 80034da:	9302      	str	r3, [sp, #8]
 80034dc:	2301      	movs	r3, #1
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	f107 030f 	add.w	r3, r7, #15
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	2301      	movs	r3, #1
 80034e8:	2267      	movs	r2, #103	; 0x67
 80034ea:	21d0      	movs	r1, #208	; 0xd0
 80034ec:	f006 fe18 	bl	800a120 <HAL_I2C_Mem_Write>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	bf14      	ite	ne
 80034f6:	2301      	movne	r3, #1
 80034f8:	2300      	moveq	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <_ZN7IMU9DOF25SetupAutomaticReadCompassEv+0xd8>
		return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <_ZN7IMU9DOF25SetupAutomaticReadCompassEv+0xda>
	}

	return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <_ZN7IMU9DOF4InitEv>:
HAL_StatusTypeDef IMU9DOF::Init()
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

	if (SetupGyro() != HAL_OK){
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff fe87 	bl	800322c <_ZN7IMU9DOF9SetupGyroEv>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf14      	ite	ne
 8003524:	2301      	movne	r3, #1
 8003526:	2300      	moveq	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <_ZN7IMU9DOF4InitEv+0x22>
		return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e0f0      	b.n	8003714 <_ZN7IMU9DOF4InitEv+0x204>
	}
	if (SetupCompass() != HAL_OK){
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff febb 	bl	80032ae <_ZN7IMU9DOF12SetupCompassEv>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	bf14      	ite	ne
 800353e:	2301      	movne	r3, #1
 8003540:	2300      	moveq	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <_ZN7IMU9DOF4InitEv+0x3c>
		return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0e3      	b.n	8003714 <_ZN7IMU9DOF4InitEv+0x204>
	}
	if (SetupAutomaticReadCompass() != HAL_OK){
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff ff6d 	bl	800342c <_ZN7IMU9DOF25SetupAutomaticReadCompassEv>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	bf14      	ite	ne
 8003558:	2301      	movne	r3, #1
 800355a:	2300      	moveq	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <_ZN7IMU9DOF4InitEv+0x56>
		return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e0d6      	b.n	8003714 <_ZN7IMU9DOF4InitEv+0x204>
	}


	MyFlash_SetSectorAddrs(this->sectorFlash, this->addrsFlash);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003572:	4619      	mov	r1, r3
 8003574:	4610      	mov	r0, r2
 8003576:	f002 fa57 	bl	8005a28 <MyFlash_SetSectorAddrs>
	MyFlash_ReadN(0, dataFlash, 6, DATA_TYPE_16);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 8003580:	2301      	movs	r3, #1
 8003582:	2206      	movs	r2, #6
 8003584:	2000      	movs	r0, #0
 8003586:	f002 fad7 	bl	8005b38 <MyFlash_ReadN>

	compassScaleY = ((float)dataFlash[1] - dataFlash[0]) / (dataFlash[3] - dataFlash[2]);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f9b3 3152 	ldrsh.w	r3, [r3, #338]	; 0x152
 8003590:	ee07 3a90 	vmov	s15, r3
 8003594:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f9b3 3150 	ldrsh.w	r3, [r3, #336]	; 0x150
 800359e:	ee07 3a90 	vmov	s15, r3
 80035a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 80035b0:	461a      	mov	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f9b3 3154 	ldrsh.w	r3, [r3, #340]	; 0x154
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	ee07 3a90 	vmov	s15, r3
 80035be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
	compassScaleZ = ((float)dataFlash[1] - dataFlash[0]) / (dataFlash[5] - dataFlash[4]);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f9b3 3152 	ldrsh.w	r3, [r3, #338]	; 0x152
 80035d2:	ee07 3a90 	vmov	s15, r3
 80035d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f9b3 3150 	ldrsh.w	r3, [r3, #336]	; 0x150
 80035e0:	ee07 3a90 	vmov	s15, r3
 80035e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035e8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 80035f2:	461a      	mov	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	ee07 3a90 	vmov	s15, r3
 8003600:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144

	compassOffset_X = (dataFlash[1] - dataFlash[0]) / 2 - dataFlash[1];
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f9b3 3152 	ldrsh.w	r3, [r3, #338]	; 0x152
 8003614:	461a      	mov	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f9b3 3150 	ldrsh.w	r3, [r3, #336]	; 0x150
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	0fda      	lsrs	r2, r3, #31
 8003620:	4413      	add	r3, r2
 8003622:	105b      	asrs	r3, r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f9b3 3152 	ldrsh.w	r3, [r3, #338]	; 0x152
 800362c:	b29b      	uxth	r3, r3
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	b29b      	uxth	r3, r3
 8003632:	b21a      	sxth	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	compassOffset_Y = (((float)dataFlash[3] - dataFlash[2]) / 2 - dataFlash[3]) * compassScaleY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003640:	ee07 3a90 	vmov	s15, r3
 8003644:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f9b3 3154 	ldrsh.w	r3, [r3, #340]	; 0x154
 800364e:	ee07 3a90 	vmov	s15, r3
 8003652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800365a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800365e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003668:	ee07 3a90 	vmov	s15, r3
 800366c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003670:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 800367a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800367e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003682:	ee17 3a90 	vmov	r3, s15
 8003686:	b21a      	sxth	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
	compassOffset_Z = (((float)dataFlash[5] - dataFlash[4]) / 2 - dataFlash[5]) * compassScaleZ;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 8003694:	ee07 3a90 	vmov	s15, r3
 8003698:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 80036a2:	ee07 3a90 	vmov	s15, r3
 80036a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80036b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 80036bc:	ee07 3a90 	vmov	s15, r3
 80036c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 80036ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036d6:	ee17 3a90 	vmov	r3, s15
 80036da:	b21a      	sxth	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	MyFlash_SetSectorAddrs(10, 0x080D0000);
 80036e2:	490e      	ldr	r1, [pc, #56]	; (800371c <_ZN7IMU9DOF4InitEv+0x20c>)
 80036e4:	200a      	movs	r0, #10
 80036e6:	f002 f99f 	bl	8005a28 <MyFlash_SetSectorAddrs>
	MyFlash_ReadN(0, accelCalValue, 2, DATA_TYPE_32);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 80036f0:	2302      	movs	r3, #2
 80036f2:	2202      	movs	r2, #2
 80036f4:	2000      	movs	r0, #0
 80036f6:	f002 fa1f 	bl	8005b38 <MyFlash_ReadN>
	accPitchCalValue = accelCalValue[0];
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036fe:	b21a      	sxth	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	accRollCalValue = accelCalValue[1];
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370a:	b21a      	sxth	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	080d0000 	.word	0x080d0000

08003720 <_ZN7IMU9DOF13ReadGyroAccelEv>:

void IMU9DOF::ReadGyroAccel()
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
	ReadRawAllParameter();
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff fc46 	bl	8002fba <_ZN7IMU9DOF19ReadRawAllParameterEv>

	gyro.y *= -1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8003734:	b29b      	uxth	r3, r3
 8003736:	425b      	negs	r3, r3
 8003738:	b29b      	uxth	r3, r3
 800373a:	b21a      	sxth	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	86da      	strh	r2, [r3, #54]	; 0x36
	gyro.z *= -1;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8003746:	b29b      	uxth	r3, r3
 8003748:	425b      	negs	r3, r3
 800374a:	b29b      	uxth	r3, r3
 800374c:	b21a      	sxth	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	871a      	strh	r2, [r3, #56]	; 0x38

	if (isOnLevelCalib == 0)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 8003758:	f083 0301 	eor.w	r3, r3, #1
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d019      	beq.n	8003796 <_ZN7IMU9DOF13ReadGyroAccelEv+0x76>
	{
		accel.y -= accPitchCalValue;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8003768:	b29a      	uxth	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8003770:	b29b      	uxth	r3, r3
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	b29b      	uxth	r3, r3
 8003776:	b21a      	sxth	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	855a      	strh	r2, [r3, #42]	; 0x2a
		accel.x -= accRollCalValue ;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003782:	b29a      	uxth	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 800378a:	b29b      	uxth	r3, r3
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	b29b      	uxth	r3, r3
 8003790:	b21a      	sxth	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	851a      	strh	r2, [r3, #40]	; 0x28
	}

	if (IsAlreadyCalibGyro >= 2000)  // lấy 2000 mẫu để hiệu chuẩn
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f9b3 3134 	ldrsh.w	r3, [r3, #308]	; 0x134
 800379c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80037a0:	db23      	blt.n	80037ea <_ZN7IMU9DOF13ReadGyroAccelEv+0xca>
	{
		gyro.x -= gyroRollCalValue;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	b21a      	sxth	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	869a      	strh	r2, [r3, #52]	; 0x34
		gyro.y -= gyroPitchCalValue;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	b21a      	sxth	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	86da      	strh	r2, [r3, #54]	; 0x36
		gyro.z -= gyroYawCalValue;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80037d8:	b29a      	uxth	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037de:	b29b      	uxth	r3, r3
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	b21a      	sxth	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	871a      	strh	r2, [r3, #56]	; 0x38
	}
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <_ZN7IMU9DOF12CalibCompassEv>:
	HAL_I2C_Mem_Write(this->hi2c, (uint16_t)MPU6050_I2C_ADDR, (uint16_t)MPU6050_USER_CTRL, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);


	return HAL_OK;
}
void IMU9DOF::CalibCompass(){
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
	isAlreadyCalibCompass = 1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	//TODO tao den bao trang thai

		// TODO gui du lieu
		DWT_Delay_us(3700);
 8003802:	f640 6074 	movw	r0, #3700	; 0xe74
 8003806:	f7fe ffb1 	bl	800276c <DWT_Delay_us>
		ReadRawAllParameter();
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff fbd5 	bl	8002fba <_ZN7IMU9DOF19ReadRawAllParameterEv>
		ReadCompass();
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff f8e9 	bl	80029e8 <_ZN7IMU9DOF11ReadCompassEv>

		if ( magn.x < dataFlash[0]){
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f9b3 3150 	ldrsh.w	r3, [r3, #336]	; 0x150
 8003822:	429a      	cmp	r2, r3
 8003824:	da05      	bge.n	8003832 <_ZN7IMU9DOF12CalibCompassEv+0x40>
			dataFlash[0] = magn.x;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
		}
		if ( magn.x > dataFlash[1]){
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f9b3 3152 	ldrsh.w	r3, [r3, #338]	; 0x152
 800383e:	429a      	cmp	r2, r3
 8003840:	dd05      	ble.n	800384e <_ZN7IMU9DOF12CalibCompassEv+0x5c>
			dataFlash[1] = magn.x;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152
		}
		if ( magn.y < dataFlash[2]){
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f9b3 3154 	ldrsh.w	r3, [r3, #340]	; 0x154
 800385a:	429a      	cmp	r2, r3
 800385c:	da05      	bge.n	800386a <_ZN7IMU9DOF12CalibCompassEv+0x78>
			dataFlash[2] = magn.y;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
		}
		if ( magn.y > dataFlash[3]){
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f9b3 3156 	ldrsh.w	r3, [r3, #342]	; 0x156
 8003876:	429a      	cmp	r2, r3
 8003878:	dd05      	ble.n	8003886 <_ZN7IMU9DOF12CalibCompassEv+0x94>
			dataFlash[3] = magn.y;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
		}
		if ( magn.z < dataFlash[4]){
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f9b3 3158 	ldrsh.w	r3, [r3, #344]	; 0x158
 8003892:	429a      	cmp	r2, r3
 8003894:	da05      	bge.n	80038a2 <_ZN7IMU9DOF12CalibCompassEv+0xb0>
			dataFlash[4] = magn.z;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
		}
		if ( magn.z > dataFlash[5]){
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f9b3 315a 	ldrsh.w	r3, [r3, #346]	; 0x15a
 80038ae:	429a      	cmp	r2, r3
 80038b0:	dd05      	ble.n	80038be <_ZN7IMU9DOF12CalibCompassEv+0xcc>
			dataFlash[5] = magn.z;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
		}


	isAlreadyCalibCompass = 0;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	MyFlash_SetSectorAddrs(this->sectorFlash, this->addrsFlash);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 2148 	ldrb.w	r2, [r3, #328]	; 0x148
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80038d2:	4619      	mov	r1, r3
 80038d4:	4610      	mov	r0, r2
 80038d6:	f002 f8a7 	bl	8005a28 <MyFlash_SetSectorAddrs>
	MyFlash_WriteN(0, dataFlash, 6, DATA_TYPE_16);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 80038e0:	2301      	movs	r3, #1
 80038e2:	2206      	movs	r2, #6
 80038e4:	2000      	movs	r0, #0
 80038e6:	f002 f8b5 	bl	8005a54 <MyFlash_WriteN>

	SetupCompass();
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff fcdf 	bl	80032ae <_ZN7IMU9DOF12SetupCompassEv>
	ReadRawAllParameter();
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff fb62 	bl	8002fba <_ZN7IMU9DOF19ReadRawAllParameterEv>
	ReadCompass();
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff f876 	bl	80029e8 <_ZN7IMU9DOF11ReadCompassEv>
	angleYaw = actualCompassHeading;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	665a      	str	r2, [r3, #100]	; 0x64

	// TODO bao de trang thai ket thuc qua trinh calib
}
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	0000      	movs	r0, r0
	...

08003910 <_ZN7IMU9DOF10CalibLevelEPh>:

void IMU9DOF::CalibLevel(uint8_t* theError){  // Qua trinh calib mat phang , lấy roll pitch khi khởi động
 8003910:	b590      	push	{r4, r7, lr}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
	isOnLevelCalib = 1;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137


	//TODO bao den trang thai

	accelCalValue[0] = 0;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	66da      	str	r2, [r3, #108]	; 0x6c
	accelCalValue[1] = 0;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	671a      	str	r2, [r3, #112]	; 0x70

	for ( int i = 0; i < 64; i++){
 800392e:	2300      	movs	r3, #0
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2b3f      	cmp	r3, #63	; 0x3f
 8003936:	dc38      	bgt.n	80039aa <_ZN7IMU9DOF10CalibLevelEPh+0x9a>
		//TODO gui du lieu telemetry
		ReadGyroAccel();
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff fef1 	bl	8003720 <_ZN7IMU9DOF13ReadGyroAccelEv>
		accelCalValue[0] += accel.y;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	f9b2 202a 	ldrsh.w	r2, [r2, #42]	; 0x2a
 8003948:	441a      	add	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	66da      	str	r2, [r3, #108]	; 0x6c
		accelCalValue[1] += accel.x;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	f9b2 2028 	ldrsh.w	r2, [r2, #40]	; 0x28
 8003958:	441a      	add	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	671a      	str	r2, [r3, #112]	; 0x70
		if ( accel.y > 500 || accel.y < -500){
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8003964:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003968:	dc05      	bgt.n	8003976 <_ZN7IMU9DOF10CalibLevelEPh+0x66>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8003970:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8003974:	da02      	bge.n	800397c <_ZN7IMU9DOF10CalibLevelEPh+0x6c>
			*theError = 80;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2250      	movs	r2, #80	; 0x50
 800397a:	701a      	strb	r2, [r3, #0]
		}
		if ( accel.x > 500 || accel.x < -500){
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003982:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003986:	dc05      	bgt.n	8003994 <_ZN7IMU9DOF10CalibLevelEPh+0x84>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800398e:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8003992:	da02      	bge.n	800399a <_ZN7IMU9DOF10CalibLevelEPh+0x8a>
			*theError = 80;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2250      	movs	r2, #80	; 0x50
 8003998:	701a      	strb	r2, [r3, #0]
		}
		DWT_Delay_us(3700);
 800399a:	f640 6074 	movw	r0, #3700	; 0xe74
 800399e:	f7fe fee5 	bl	800276c <DWT_Delay_us>
	for ( int i = 0; i < 64; i++){
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	3301      	adds	r3, #1
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	e7c3      	b.n	8003932 <_ZN7IMU9DOF10CalibLevelEPh+0x22>
	}

	accelCalValue[0] /= 64;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	da00      	bge.n	80039b4 <_ZN7IMU9DOF10CalibLevelEPh+0xa4>
 80039b2:	333f      	adds	r3, #63	; 0x3f
 80039b4:	119b      	asrs	r3, r3, #6
 80039b6:	461a      	mov	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	66da      	str	r2, [r3, #108]	; 0x6c
	accelCalValue[1] /= 64;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	da00      	bge.n	80039c6 <_ZN7IMU9DOF10CalibLevelEPh+0xb6>
 80039c4:	333f      	adds	r3, #63	; 0x3f
 80039c6:	119b      	asrs	r3, r3, #6
 80039c8:	461a      	mov	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	671a      	str	r2, [r3, #112]	; 0x70
	// TODO bao trang thai
	if (*theError < 80){
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b4f      	cmp	r3, #79	; 0x4f
 80039d4:	d80f      	bhi.n	80039f6 <_ZN7IMU9DOF10CalibLevelEPh+0xe6>
		MyFlash_SetSectorAddrs(10, 0x080D0000);
 80039d6:	4966      	ldr	r1, [pc, #408]	; (8003b70 <_ZN7IMU9DOF10CalibLevelEPh+0x260>)
 80039d8:	200a      	movs	r0, #10
 80039da:	f002 f825 	bl	8005a28 <MyFlash_SetSectorAddrs>
		MyFlash_WriteN(0, accelCalValue, 2, DATA_TYPE_32);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 80039e4:	2302      	movs	r3, #2
 80039e6:	2202      	movs	r2, #2
 80039e8:	2000      	movs	r0, #0
 80039ea:	f002 f833 	bl	8005a54 <MyFlash_WriteN>
		//TODO nhay den bao trang thai
		*theError = 0;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2200      	movs	r2, #0
 80039f2:	701a      	strb	r2, [r3, #0]
 80039f4:	e002      	b.n	80039fc <_ZN7IMU9DOF10CalibLevelEPh+0xec>
	}
	else{
		*theError = 3;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2203      	movs	r2, #3
 80039fa:	701a      	strb	r2, [r3, #0]
	}

	isOnLevelCalib = 0;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2137 	strb.w	r2, [r3, #311]	; 0x137
	//todo moi them vao
	accPitchCalValue = (int16_t)accelCalValue[0];
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a08:	b21a      	sxth	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	accRollCalValue = (int16_t)accelCalValue[1];
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	b21a      	sxth	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	ReadGyroAccel();
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff fe7f 	bl	8003720 <_ZN7IMU9DOF13ReadGyroAccelEv>

	accelTotalVector  = sqrt((accel.x * accel.x) + (accel.y * accel.y) + (accel.z * accel.z));    //Tính tổng vectơ gia tốc kế.
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003a28:	461a      	mov	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003a30:	fb03 f202 	mul.w	r2, r3, r2
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8003a42:	fb03 f301 	mul.w	r3, r3, r1
 8003a46:	441a      	add	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003a4e:	4619      	mov	r1, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003a56:	fb03 f301 	mul.w	r3, r3, r1
 8003a5a:	4413      	add	r3, r2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fcbd 	bl	80043dc <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8003a62:	ec54 3b10 	vmov	r3, r4, d0
 8003a66:	4618      	mov	r0, r3
 8003a68:	4621      	mov	r1, r4
 8003a6a:	f7fd f819 	bl	8000aa0 <__aeabi_d2iz>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	if (abs(accel.y) < accelTotalVector) {                                             //Ngăn chặn chức năng asin tạo ra NaN.
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8003a7c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003a80:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	da27      	bge.n	8003ade <_ZN7IMU9DOF10CalibLevelEPh+0x1ce>
	    anglePitchAccel = asin((float)accel.y / accelTotalVector) * 57.296;              //Calculate the pitch angle.
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8003a94:	ee07 3a90 	vmov	s15, r3
 8003a98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aaa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003aae:	eeb0 0a66 	vmov.f32	s0, s13
 8003ab2:	f7fe fe37 	bl	8002724 <_ZSt4asinf>
 8003ab6:	ee10 3a10 	vmov	r3, s0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fc fce8 	bl	8000490 <__aeabi_f2d>
 8003ac0:	a329      	add	r3, pc, #164	; (adr r3, 8003b68 <_ZN7IMU9DOF10CalibLevelEPh+0x258>)
 8003ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac6:	f7fc fd3b 	bl	8000540 <__aeabi_dmul>
 8003aca:	4603      	mov	r3, r0
 8003acc:	460c      	mov	r4, r1
 8003ace:	4618      	mov	r0, r3
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	f7fd f82d 	bl	8000b30 <__aeabi_d2f>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	  }
	  if (abs(accel.x) < accelTotalVector) {                                             //Ngăn chặn chức năng asin tạo ra NaN.
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003ae4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003ae8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003af2:	429a      	cmp	r2, r3
 8003af4:	da27      	bge.n	8003b46 <_ZN7IMU9DOF10CalibLevelEPh+0x236>
		  angleRollAccel = asin((float)accel.x / accelTotalVector) * 57.296;               //Calculate the roll angle.
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003afc:	ee07 3a90 	vmov	s15, r3
 8003b00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003b0a:	ee07 3a90 	vmov	s15, r3
 8003b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b12:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003b16:	eeb0 0a66 	vmov.f32	s0, s13
 8003b1a:	f7fe fe03 	bl	8002724 <_ZSt4asinf>
 8003b1e:	ee10 3a10 	vmov	r3, s0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fc fcb4 	bl	8000490 <__aeabi_f2d>
 8003b28:	a30f      	add	r3, pc, #60	; (adr r3, 8003b68 <_ZN7IMU9DOF10CalibLevelEPh+0x258>)
 8003b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2e:	f7fc fd07 	bl	8000540 <__aeabi_dmul>
 8003b32:	4603      	mov	r3, r0
 8003b34:	460c      	mov	r4, r1
 8003b36:	4618      	mov	r0, r3
 8003b38:	4621      	mov	r1, r4
 8003b3a:	f7fc fff9 	bl	8000b30 <__aeabi_d2f>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	  }
	  anglePitch = anglePitchAccel;        //Đặt góc của con quay hồi chuyển bằng góc bước của gia tốc kế khi khởi động quadcopter.
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	661a      	str	r2, [r3, #96]	; 0x60
	  angleRoll = angleRollAccel;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	65da      	str	r2, [r3, #92]	; 0x5c

}
 8003b5a:	bf00      	nop
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd90      	pop	{r4, r7, pc}
 8003b62:	bf00      	nop
 8003b64:	f3af 8000 	nop.w
 8003b68:	53f7ced9 	.word	0x53f7ced9
 8003b6c:	404ca5e3 	.word	0x404ca5e3
 8003b70:	080d0000 	.word	0x080d0000

08003b74 <_ZN7IMU9DOF9CalibGyroEv>:

void IMU9DOF::CalibGyro()
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
	IsAlreadyCalibGyro = 0;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	if (IsAlreadyCalibGyro != 2000) {
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f9b3 3134 	ldrsh.w	r3, [r3, #308]	; 0x134
 8003b8a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003b8e:	d05e      	beq.n	8003c4e <_ZN7IMU9DOF9CalibGyroEv+0xda>
		//Hãy lấy nhiều mẫu dữ liệu con quay hồi chuyển để chúng ta có thể xác định độ lệch con quay hồi chuyển trung bình (calibration).
		for (IsAlreadyCalibGyro = 0; IsAlreadyCalibGyro < 2000 ; IsAlreadyCalibGyro ++)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f9b3 3134 	ldrsh.w	r3, [r3, #308]	; 0x134
 8003b9e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003ba2:	da36      	bge.n	8003c12 <_ZN7IMU9DOF9CalibGyroEv+0x9e>
		{                                  //Take 2000 readings for calibration.
			if (IsAlreadyCalibGyro % 25 == 0)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f9b3 3134 	ldrsh.w	r3, [r3, #308]	; 0x134
 8003baa:	4a2b      	ldr	r2, [pc, #172]	; (8003c58 <_ZN7IMU9DOF9CalibGyroEv+0xe4>)
 8003bac:	fb82 1203 	smull	r1, r2, r2, r3
 8003bb0:	10d2      	asrs	r2, r2, #3
 8003bb2:	17db      	asrs	r3, r3, #31
 8003bb4:	1ad2      	subs	r2, r2, r3
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	009a      	lsls	r2, r3, #2
 8003bbe:	4413      	add	r3, r2
			{
				// TODO : báo hiệu đèn đang trong trạng thái calib

			}
			ReadGyroAccel();                                                                //Read the gyro output.
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff fdad 	bl	8003720 <_ZN7IMU9DOF13ReadGyroAccelEv>
			gyroRollCalValue += gyro.x;                                                     //Ad roll value to gyro_roll_cal.
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	f9b2 2034 	ldrsh.w	r2, [r2, #52]	; 0x34
 8003bd0:	441a      	add	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	651a      	str	r2, [r3, #80]	; 0x50
			gyroPitchCalValue += gyro.y;                                                   //Ad pitch value to gyro_pitch_cal.
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	f9b2 2036 	ldrsh.w	r2, [r2, #54]	; 0x36
 8003be0:	441a      	add	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	655a      	str	r2, [r3, #84]	; 0x54
			gyroYawCalValue += gyro.z;                                                       //Ad yaw value to gyro_yaw_cal.
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	f9b2 2038 	ldrsh.w	r2, [r2, #56]	; 0x38
 8003bf0:	441a      	add	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	659a      	str	r2, [r3, #88]	; 0x58
			HAL_Delay(4);                                                                       //Small delay to simulate a 250Hz loop during calibration.
 8003bf6:	2004      	movs	r0, #4
 8003bf8:	f004 fbcc 	bl	8008394 <HAL_Delay>
		for (IsAlreadyCalibGyro = 0; IsAlreadyCalibGyro < 2000 ; IsAlreadyCalibGyro ++)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f9b3 3134 	ldrsh.w	r3, [r3, #308]	; 0x134
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3301      	adds	r3, #1
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	b21a      	sxth	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
 8003c10:	e7c2      	b.n	8003b98 <_ZN7IMU9DOF9CalibGyroEv+0x24>
		}
		// TODO báo hiệu
		//Now that we have 2000 measures, we need to devide by 2000 to get the average gyro offset.
		gyroRollCalValue /= 2000;                                                            //Divide the roll total by 2000.
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c16:	4a11      	ldr	r2, [pc, #68]	; (8003c5c <_ZN7IMU9DOF9CalibGyroEv+0xe8>)
 8003c18:	fb82 1203 	smull	r1, r2, r2, r3
 8003c1c:	11d2      	asrs	r2, r2, #7
 8003c1e:	17db      	asrs	r3, r3, #31
 8003c20:	1ad2      	subs	r2, r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	651a      	str	r2, [r3, #80]	; 0x50
		gyroPitchCalValue /= 2000;                                                           //Divide the pitch total by 2000.
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2a:	4a0c      	ldr	r2, [pc, #48]	; (8003c5c <_ZN7IMU9DOF9CalibGyroEv+0xe8>)
 8003c2c:	fb82 1203 	smull	r1, r2, r2, r3
 8003c30:	11d2      	asrs	r2, r2, #7
 8003c32:	17db      	asrs	r3, r3, #31
 8003c34:	1ad2      	subs	r2, r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	655a      	str	r2, [r3, #84]	; 0x54
		gyroYawCalValue /= 2000;                                                             //Divide the yaw total by 2000.
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3e:	4a07      	ldr	r2, [pc, #28]	; (8003c5c <_ZN7IMU9DOF9CalibGyroEv+0xe8>)
 8003c40:	fb82 1203 	smull	r1, r2, r2, r3
 8003c44:	11d2      	asrs	r2, r2, #7
 8003c46:	17db      	asrs	r3, r3, #31
 8003c48:	1ad2      	subs	r2, r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	659a      	str	r2, [r3, #88]	; 0x58
	}
}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	51eb851f 	.word	0x51eb851f
 8003c5c:	10624dd3 	.word	0x10624dd3

08003c60 <_ZN7IMU9DOF12ReadAngleRPYEv>:
void IMU9DOF::ReadAngleRPY()
{
 8003c60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003c64:	b082      	sub	sp, #8
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
	//Gyro angle calculations
	//0.0000611 = 1 / (250Hz / 65.5)
	anglePitch += (float)gyro.y * 0.0000611;        //tính góc pitch angle đã di chuyển and thêm nó vào biến anglepitch .
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fc fc0e 	bl	8000490 <__aeabi_f2d>
 8003c74:	4604      	mov	r4, r0
 8003c76:	460d      	mov	r5, r1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8003c7e:	ee07 3a90 	vmov	s15, r3
 8003c82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c86:	ee17 0a90 	vmov	r0, s15
 8003c8a:	f7fc fc01 	bl	8000490 <__aeabi_f2d>
 8003c8e:	a3a3      	add	r3, pc, #652	; (adr r3, 8003f1c <_ZN7IMU9DOF12ReadAngleRPYEv+0x2bc>)
 8003c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c94:	f7fc fc54 	bl	8000540 <__aeabi_dmul>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	f7fc fa98 	bl	80001d4 <__adddf3>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	4618      	mov	r0, r3
 8003caa:	4621      	mov	r1, r4
 8003cac:	f7fc ff40 	bl	8000b30 <__aeabi_d2f>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	661a      	str	r2, [r3, #96]	; 0x60
	angleRoll += (float)gyro.x * 0.0000611;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fc fbe8 	bl	8000490 <__aeabi_f2d>
 8003cc0:	4604      	mov	r4, r0
 8003cc2:	460d      	mov	r5, r1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8003cca:	ee07 3a90 	vmov	s15, r3
 8003cce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cd2:	ee17 0a90 	vmov	r0, s15
 8003cd6:	f7fc fbdb 	bl	8000490 <__aeabi_f2d>
 8003cda:	a390      	add	r3, pc, #576	; (adr r3, 8003f1c <_ZN7IMU9DOF12ReadAngleRPYEv+0x2bc>)
 8003cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce0:	f7fc fc2e 	bl	8000540 <__aeabi_dmul>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4620      	mov	r0, r4
 8003cea:	4629      	mov	r1, r5
 8003cec:	f7fc fa72 	bl	80001d4 <__adddf3>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	460c      	mov	r4, r1
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	f7fc ff1a 	bl	8000b30 <__aeabi_d2f>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	65da      	str	r2, [r3, #92]	; 0x5c
	angleYaw += (float)gyro.z * 0.0000611;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fc fbc2 	bl	8000490 <__aeabi_f2d>
 8003d0c:	4604      	mov	r4, r0
 8003d0e:	460d      	mov	r5, r1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8003d16:	ee07 3a90 	vmov	s15, r3
 8003d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d1e:	ee17 0a90 	vmov	r0, s15
 8003d22:	f7fc fbb5 	bl	8000490 <__aeabi_f2d>
 8003d26:	a37d      	add	r3, pc, #500	; (adr r3, 8003f1c <_ZN7IMU9DOF12ReadAngleRPYEv+0x2bc>)
 8003d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2c:	f7fc fc08 	bl	8000540 <__aeabi_dmul>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4620      	mov	r0, r4
 8003d36:	4629      	mov	r1, r5
 8003d38:	f7fc fa4c 	bl	80001d4 <__adddf3>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	460c      	mov	r4, r1
 8003d40:	4618      	mov	r0, r3
 8003d42:	4621      	mov	r1, r4
 8003d44:	f7fc fef4 	bl	8000b30 <__aeabi_d2f>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	665a      	str	r2, [r3, #100]	; 0x64
	if (angleYaw < 0) angleYaw += 360;                //Nếu la bàn nhỏ hơn thì 0, 360 được thêm vào để giữ nó trong phạm vi 0 đến 360 độ.
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003d54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d5c:	d50a      	bpl.n	8003d74 <_ZN7IMU9DOF12ReadAngleRPYEv+0x114>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003d64:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8003f24 <_ZN7IMU9DOF12ReadAngleRPYEv+0x2c4>
 8003d68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8003d72:	e013      	b.n	8003d9c <_ZN7IMU9DOF12ReadAngleRPYEv+0x13c>
	else if (angleYaw >= 360) angleYaw -= 360;        //Nếu la bànlớn hơn thì 360, 360 được trừ đi để giữ nó trong phạm vi 0 đến 360 độ
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003d7a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8003f24 <_ZN7IMU9DOF12ReadAngleRPYEv+0x2c4>
 8003d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d86:	db09      	blt.n	8003d9c <_ZN7IMU9DOF12ReadAngleRPYEv+0x13c>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003d8e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8003f24 <_ZN7IMU9DOF12ReadAngleRPYEv+0x2c4>
 8003d92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	//0.000001066 = 0.0000611 * (3.142(PI) / 180degr) Hàm sin STM32 tính bằng radian chứ không phải độ
	anglePitch -= angleRoll * sin((float)gyro.z * 0.000001066);    //nếu IMU bị lệch thì chuyên roll sang pitch
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fc fb75 	bl	8000490 <__aeabi_f2d>
 8003da6:	4604      	mov	r4, r0
 8003da8:	460d      	mov	r5, r1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fc fb6e 	bl	8000490 <__aeabi_f2d>
 8003db4:	4680      	mov	r8, r0
 8003db6:	4689      	mov	r9, r1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8003dbe:	ee07 3a90 	vmov	s15, r3
 8003dc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dc6:	ee17 0a90 	vmov	r0, s15
 8003dca:	f7fc fb61 	bl	8000490 <__aeabi_f2d>
 8003dce:	a350      	add	r3, pc, #320	; (adr r3, 8003f10 <_ZN7IMU9DOF12ReadAngleRPYEv+0x2b0>)
 8003dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd4:	f7fc fbb4 	bl	8000540 <__aeabi_dmul>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	ec43 2b17 	vmov	d7, r2, r3
 8003de0:	eeb0 0a47 	vmov.f32	s0, s14
 8003de4:	eef0 0a67 	vmov.f32	s1, s15
 8003de8:	f00a fb96 	bl	800e518 <sin>
 8003dec:	ec53 2b10 	vmov	r2, r3, d0
 8003df0:	4640      	mov	r0, r8
 8003df2:	4649      	mov	r1, r9
 8003df4:	f7fc fba4 	bl	8000540 <__aeabi_dmul>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	4629      	mov	r1, r5
 8003e00:	f7fc f9e6 	bl	80001d0 <__aeabi_dsub>
 8003e04:	4603      	mov	r3, r0
 8003e06:	460c      	mov	r4, r1
 8003e08:	4618      	mov	r0, r3
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	f7fc fe90 	bl	8000b30 <__aeabi_d2f>
 8003e10:	4602      	mov	r2, r0
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	661a      	str	r2, [r3, #96]	; 0x60
	angleRoll += anglePitch * sin((float)gyro.z * 0.000001066);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fc fb38 	bl	8000490 <__aeabi_f2d>
 8003e20:	4604      	mov	r4, r0
 8003e22:	460d      	mov	r5, r1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fc fb31 	bl	8000490 <__aeabi_f2d>
 8003e2e:	4680      	mov	r8, r0
 8003e30:	4689      	mov	r9, r1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8003e38:	ee07 3a90 	vmov	s15, r3
 8003e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e40:	ee17 0a90 	vmov	r0, s15
 8003e44:	f7fc fb24 	bl	8000490 <__aeabi_f2d>
 8003e48:	a331      	add	r3, pc, #196	; (adr r3, 8003f10 <_ZN7IMU9DOF12ReadAngleRPYEv+0x2b0>)
 8003e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4e:	f7fc fb77 	bl	8000540 <__aeabi_dmul>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	ec43 2b17 	vmov	d7, r2, r3
 8003e5a:	eeb0 0a47 	vmov.f32	s0, s14
 8003e5e:	eef0 0a67 	vmov.f32	s1, s15
 8003e62:	f00a fb59 	bl	800e518 <sin>
 8003e66:	ec53 2b10 	vmov	r2, r3, d0
 8003e6a:	4640      	mov	r0, r8
 8003e6c:	4649      	mov	r1, r9
 8003e6e:	f7fc fb67 	bl	8000540 <__aeabi_dmul>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4620      	mov	r0, r4
 8003e78:	4629      	mov	r1, r5
 8003e7a:	f7fc f9ab 	bl	80001d4 <__adddf3>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	460c      	mov	r4, r1
 8003e82:	4618      	mov	r0, r3
 8003e84:	4621      	mov	r1, r4
 8003e86:	f7fc fe53 	bl	8000b30 <__aeabi_d2f>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	65da      	str	r2, [r3, #92]	; 0x5c

	angleYaw -= CourseDeviation(angleYaw, actualCompassHeading) / 1200.0; //Tính toán sự khác biệt giữa actualCompassHeading và angleYaw và thực hiện một hiệu chỉnh nhỏ.
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	ed93 7a04 	vldr	s14, [r3, #16]
 8003e9c:	eef0 0a47 	vmov.f32	s1, s14
 8003ea0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 fa27 	bl	80042f8 <_ZN7IMU9DOF15CourseDeviationEff>
 8003eaa:	ee10 3a10 	vmov	r3, s0
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fc faee 	bl	8000490 <__aeabi_f2d>
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <_ZN7IMU9DOF12ReadAngleRPYEv+0x2b8>)
 8003eba:	f7fc fc6b 	bl	8000794 <__aeabi_ddiv>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	460c      	mov	r4, r1
 8003ec2:	4625      	mov	r5, r4
 8003ec4:	461c      	mov	r4, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fc fae0 	bl	8000490 <__aeabi_f2d>
 8003ed0:	4622      	mov	r2, r4
 8003ed2:	462b      	mov	r3, r5
 8003ed4:	f7fc f97c 	bl	80001d0 <__aeabi_dsub>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	460c      	mov	r4, r1
 8003edc:	4618      	mov	r0, r3
 8003ede:	4621      	mov	r1, r4
 8003ee0:	f7fc fe26 	bl	8000b30 <__aeabi_d2f>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	665a      	str	r2, [r3, #100]	; 0x64
	if (angleYaw < 0) angleYaw += 360;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003ef0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef8:	d516      	bpl.n	8003f28 <_ZN7IMU9DOF12ReadAngleRPYEv+0x2c8>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003f00:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003f24 <_ZN7IMU9DOF12ReadAngleRPYEv+0x2c4>
 8003f04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 8003f0e:	e01f      	b.n	8003f50 <_ZN7IMU9DOF12ReadAngleRPYEv+0x2f0>
 8003f10:	652c6e62 	.word	0x652c6e62
 8003f14:	3eb1e26f 	.word	0x3eb1e26f
 8003f18:	4092c000 	.word	0x4092c000
 8003f1c:	01d41596 	.word	0x01d41596
 8003f20:	3f10045a 	.word	0x3f10045a
 8003f24:	43b40000 	.word	0x43b40000
	else if (angleYaw >= 360) angleYaw -= 360;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003f2e:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8003f24 <_ZN7IMU9DOF12ReadAngleRPYEv+0x2c4>
 8003f32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f3a:	db09      	blt.n	8003f50 <_ZN7IMU9DOF12ReadAngleRPYEv+0x2f0>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003f42:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8003f24 <_ZN7IMU9DOF12ReadAngleRPYEv+0x2c4>
 8003f46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64


	//Accelerometer angle calculations
	accelTotalVector = sqrt((accel.x * accel.x) + (accel.y * accel.y) + (accel.z * accel.z));    //Tính tổng vectơ gia tốc kế.
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003f56:	461a      	mov	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003f5e:	fb03 f202 	mul.w	r2, r3, r2
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8003f68:	4619      	mov	r1, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8003f70:	fb03 f301 	mul.w	r3, r3, r1
 8003f74:	441a      	add	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003f84:	fb03 f301 	mul.w	r3, r3, r1
 8003f88:	4413      	add	r3, r2
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fa26 	bl	80043dc <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8003f90:	ec54 3b10 	vmov	r3, r4, d0
 8003f94:	4618      	mov	r0, r3
 8003f96:	4621      	mov	r1, r4
 8003f98:	f7fc fd82 	bl	8000aa0 <__aeabi_d2iz>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	if (abs(accel.y) < accelTotalVector) {                                             //tránh góc asin bị lỗi.
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8003faa:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003fae:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	da27      	bge.n	800400c <_ZN7IMU9DOF12ReadAngleRPYEv+0x3ac>
		anglePitchAccel = asin((float)accel.y / accelTotalVector) * 57.296;              //Calculate the pitch angle.
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003fd0:	ee07 3a90 	vmov	s15, r3
 8003fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fd8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003fdc:	eeb0 0a66 	vmov.f32	s0, s13
 8003fe0:	f7fe fba0 	bl	8002724 <_ZSt4asinf>
 8003fe4:	ee10 3a10 	vmov	r3, s0
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fc fa51 	bl	8000490 <__aeabi_f2d>
 8003fee:	a34c      	add	r3, pc, #304	; (adr r3, 8004120 <_ZN7IMU9DOF12ReadAngleRPYEv+0x4c0>)
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	f7fc faa4 	bl	8000540 <__aeabi_dmul>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	460c      	mov	r4, r1
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	4621      	mov	r1, r4
 8004000:	f7fc fd96 	bl	8000b30 <__aeabi_d2f>
 8004004:	4602      	mov	r2, r0
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	}
	if (abs(accel.x) < accelTotalVector) {                                             //tránh góc asin bị lỗi.
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8004012:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004016:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004020:	429a      	cmp	r2, r3
 8004022:	da27      	bge.n	8004074 <_ZN7IMU9DOF12ReadAngleRPYEv+0x414>
		angleRollAccel = asin((float)accel.x / accelTotalVector) * 57.296;               //Calculate the roll angle.
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800402a:	ee07 3a90 	vmov	s15, r3
 800402e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004038:	ee07 3a90 	vmov	s15, r3
 800403c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004040:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004044:	eeb0 0a66 	vmov.f32	s0, s13
 8004048:	f7fe fb6c 	bl	8002724 <_ZSt4asinf>
 800404c:	ee10 3a10 	vmov	r3, s0
 8004050:	4618      	mov	r0, r3
 8004052:	f7fc fa1d 	bl	8000490 <__aeabi_f2d>
 8004056:	a332      	add	r3, pc, #200	; (adr r3, 8004120 <_ZN7IMU9DOF12ReadAngleRPYEv+0x4c0>)
 8004058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405c:	f7fc fa70 	bl	8000540 <__aeabi_dmul>
 8004060:	4603      	mov	r3, r0
 8004062:	460c      	mov	r4, r1
 8004064:	4618      	mov	r0, r3
 8004066:	4621      	mov	r1, r4
 8004068:	f7fc fd62 	bl	8000b30 <__aeabi_d2f>
 800406c:	4602      	mov	r2, r0
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	}

	anglePitch = anglePitch * 0.9996 + anglePitchAccel * 0.0004;                   //Hiệu chỉnh độ lệch góc của con quay hồi chuyển bằng góc của gia tốc kế..
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004078:	4618      	mov	r0, r3
 800407a:	f7fc fa09 	bl	8000490 <__aeabi_f2d>
 800407e:	a32a      	add	r3, pc, #168	; (adr r3, 8004128 <_ZN7IMU9DOF12ReadAngleRPYEv+0x4c8>)
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f7fc fa5c 	bl	8000540 <__aeabi_dmul>
 8004088:	4603      	mov	r3, r0
 800408a:	460c      	mov	r4, r1
 800408c:	4625      	mov	r5, r4
 800408e:	461c      	mov	r4, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8004096:	4618      	mov	r0, r3
 8004098:	f7fc f9fa 	bl	8000490 <__aeabi_f2d>
 800409c:	a324      	add	r3, pc, #144	; (adr r3, 8004130 <_ZN7IMU9DOF12ReadAngleRPYEv+0x4d0>)
 800409e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a2:	f7fc fa4d 	bl	8000540 <__aeabi_dmul>
 80040a6:	4602      	mov	r2, r0
 80040a8:	460b      	mov	r3, r1
 80040aa:	4620      	mov	r0, r4
 80040ac:	4629      	mov	r1, r5
 80040ae:	f7fc f891 	bl	80001d4 <__adddf3>
 80040b2:	4603      	mov	r3, r0
 80040b4:	460c      	mov	r4, r1
 80040b6:	4618      	mov	r0, r3
 80040b8:	4621      	mov	r1, r4
 80040ba:	f7fc fd39 	bl	8000b30 <__aeabi_d2f>
 80040be:	4602      	mov	r2, r0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	661a      	str	r2, [r3, #96]	; 0x60
	angleRoll = angleRoll * 0.9996 + angleRollAccel * 0.0004;                      //Điều chỉnh độ lệch của góc con quay hồi chuyển bằng góc của gia tốc kế
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fc f9e1 	bl	8000490 <__aeabi_f2d>
 80040ce:	a316      	add	r3, pc, #88	; (adr r3, 8004128 <_ZN7IMU9DOF12ReadAngleRPYEv+0x4c8>)
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	f7fc fa34 	bl	8000540 <__aeabi_dmul>
 80040d8:	4603      	mov	r3, r0
 80040da:	460c      	mov	r4, r1
 80040dc:	4625      	mov	r5, r4
 80040de:	461c      	mov	r4, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fc f9d2 	bl	8000490 <__aeabi_f2d>
 80040ec:	a310      	add	r3, pc, #64	; (adr r3, 8004130 <_ZN7IMU9DOF12ReadAngleRPYEv+0x4d0>)
 80040ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f2:	f7fc fa25 	bl	8000540 <__aeabi_dmul>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	4620      	mov	r0, r4
 80040fc:	4629      	mov	r1, r5
 80040fe:	f7fc f869 	bl	80001d4 <__adddf3>
 8004102:	4603      	mov	r3, r0
 8004104:	460c      	mov	r4, r1
 8004106:	4618      	mov	r0, r3
 8004108:	4621      	mov	r1, r4
 800410a:	f7fc fd11 	bl	8000b30 <__aeabi_d2f>
 800410e:	4602      	mov	r2, r0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	65da      	str	r2, [r3, #92]	; 0x5c

}
 8004114:	bf00      	nop
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800411e:	bf00      	nop
 8004120:	53f7ced9 	.word	0x53f7ced9
 8004124:	404ca5e3 	.word	0x404ca5e3
 8004128:	23a29c78 	.word	0x23a29c78
 800412c:	3feffcb9 	.word	0x3feffcb9
 8004130:	eb1c432d 	.word	0xeb1c432d
 8004134:	3f3a36e2 	.word	0x3f3a36e2

08004138 <_ZN7IMU9DOF18CalculateGyroInputEv>:
void IMU9DOF::CalculateGyroInput()
{
 8004138:	b5b0      	push	{r4, r5, r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
	gyro.rollInput = (gyro.rollInput * 0.7) + (((float)gyro.x / 65.5) * 0.3);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004144:	4618      	mov	r0, r3
 8004146:	f7fc f9a3 	bl	8000490 <__aeabi_f2d>
 800414a:	a351      	add	r3, pc, #324	; (adr r3, 8004290 <_ZN7IMU9DOF18CalculateGyroInputEv+0x158>)
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	f7fc f9f6 	bl	8000540 <__aeabi_dmul>
 8004154:	4603      	mov	r3, r0
 8004156:	460c      	mov	r4, r1
 8004158:	4625      	mov	r5, r4
 800415a:	461c      	mov	r4, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8004162:	ee07 3a90 	vmov	s15, r3
 8004166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800416a:	ee17 0a90 	vmov	r0, s15
 800416e:	f7fc f98f 	bl	8000490 <__aeabi_f2d>
 8004172:	a349      	add	r3, pc, #292	; (adr r3, 8004298 <_ZN7IMU9DOF18CalculateGyroInputEv+0x160>)
 8004174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004178:	f7fc fb0c 	bl	8000794 <__aeabi_ddiv>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4610      	mov	r0, r2
 8004182:	4619      	mov	r1, r3
 8004184:	a346      	add	r3, pc, #280	; (adr r3, 80042a0 <_ZN7IMU9DOF18CalculateGyroInputEv+0x168>)
 8004186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418a:	f7fc f9d9 	bl	8000540 <__aeabi_dmul>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4620      	mov	r0, r4
 8004194:	4629      	mov	r1, r5
 8004196:	f7fc f81d 	bl	80001d4 <__adddf3>
 800419a:	4603      	mov	r3, r0
 800419c:	460c      	mov	r4, r1
 800419e:	4618      	mov	r0, r3
 80041a0:	4621      	mov	r1, r4
 80041a2:	f7fc fcc5 	bl	8000b30 <__aeabi_d2f>
 80041a6:	4602      	mov	r2, r0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	63da      	str	r2, [r3, #60]	; 0x3c
	gyro.pitchInput = (gyro.pitchInput * 0.7) + (((float)gyro.y / 65.5) * 0.3);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fc f96d 	bl	8000490 <__aeabi_f2d>
 80041b6:	a336      	add	r3, pc, #216	; (adr r3, 8004290 <_ZN7IMU9DOF18CalculateGyroInputEv+0x158>)
 80041b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041bc:	f7fc f9c0 	bl	8000540 <__aeabi_dmul>
 80041c0:	4603      	mov	r3, r0
 80041c2:	460c      	mov	r4, r1
 80041c4:	4625      	mov	r5, r4
 80041c6:	461c      	mov	r4, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80041ce:	ee07 3a90 	vmov	s15, r3
 80041d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041d6:	ee17 0a90 	vmov	r0, s15
 80041da:	f7fc f959 	bl	8000490 <__aeabi_f2d>
 80041de:	a32e      	add	r3, pc, #184	; (adr r3, 8004298 <_ZN7IMU9DOF18CalculateGyroInputEv+0x160>)
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f7fc fad6 	bl	8000794 <__aeabi_ddiv>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4610      	mov	r0, r2
 80041ee:	4619      	mov	r1, r3
 80041f0:	a32b      	add	r3, pc, #172	; (adr r3, 80042a0 <_ZN7IMU9DOF18CalculateGyroInputEv+0x168>)
 80041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f6:	f7fc f9a3 	bl	8000540 <__aeabi_dmul>
 80041fa:	4602      	mov	r2, r0
 80041fc:	460b      	mov	r3, r1
 80041fe:	4620      	mov	r0, r4
 8004200:	4629      	mov	r1, r5
 8004202:	f7fb ffe7 	bl	80001d4 <__adddf3>
 8004206:	4603      	mov	r3, r0
 8004208:	460c      	mov	r4, r1
 800420a:	4618      	mov	r0, r3
 800420c:	4621      	mov	r1, r4
 800420e:	f7fc fc8f 	bl	8000b30 <__aeabi_d2f>
 8004212:	4602      	mov	r2, r0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	641a      	str	r2, [r3, #64]	; 0x40
	gyro.yawInput = (gyro.yawInput * 0.7) + (((float)gyro.z / 65.5) * 0.3);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421c:	4618      	mov	r0, r3
 800421e:	f7fc f937 	bl	8000490 <__aeabi_f2d>
 8004222:	a31b      	add	r3, pc, #108	; (adr r3, 8004290 <_ZN7IMU9DOF18CalculateGyroInputEv+0x158>)
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	f7fc f98a 	bl	8000540 <__aeabi_dmul>
 800422c:	4603      	mov	r3, r0
 800422e:	460c      	mov	r4, r1
 8004230:	4625      	mov	r5, r4
 8004232:	461c      	mov	r4, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004242:	ee17 0a90 	vmov	r0, s15
 8004246:	f7fc f923 	bl	8000490 <__aeabi_f2d>
 800424a:	a313      	add	r3, pc, #76	; (adr r3, 8004298 <_ZN7IMU9DOF18CalculateGyroInputEv+0x160>)
 800424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004250:	f7fc faa0 	bl	8000794 <__aeabi_ddiv>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4610      	mov	r0, r2
 800425a:	4619      	mov	r1, r3
 800425c:	a310      	add	r3, pc, #64	; (adr r3, 80042a0 <_ZN7IMU9DOF18CalculateGyroInputEv+0x168>)
 800425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004262:	f7fc f96d 	bl	8000540 <__aeabi_dmul>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	4620      	mov	r0, r4
 800426c:	4629      	mov	r1, r5
 800426e:	f7fb ffb1 	bl	80001d4 <__adddf3>
 8004272:	4603      	mov	r3, r0
 8004274:	460c      	mov	r4, r1
 8004276:	4618      	mov	r0, r3
 8004278:	4621      	mov	r1, r4
 800427a:	f7fc fc59 	bl	8000b30 <__aeabi_d2f>
 800427e:	4602      	mov	r2, r0
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004284:	bf00      	nop
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bdb0      	pop	{r4, r5, r7, pc}
 800428c:	f3af 8000 	nop.w
 8004290:	66666666 	.word	0x66666666
 8004294:	3fe66666 	.word	0x3fe66666
 8004298:	00000000 	.word	0x00000000
 800429c:	40506000 	.word	0x40506000
 80042a0:	33333333 	.word	0x33333333
 80042a4:	3fd33333 	.word	0x3fd33333

080042a8 <_ZN7IMU9DOF14setLevelAdjustEhh>:


void IMU9DOF::setLevelAdjust(uint8_t theRateRoll, uint8_t theRatePitch)// hiệu chỉnh cân bằng ban đầu khi khởi động
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	70fb      	strb	r3, [r7, #3]
 80042b4:	4613      	mov	r3, r2
 80042b6:	70bb      	strb	r3, [r7, #2]
	pitchLevelAdjust = anglePitch * theRatePitch;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80042be:	78bb      	ldrb	r3, [r7, #2]
 80042c0:	ee07 3a90 	vmov	s15, r3
 80042c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	edc3 7a49 	vstr	s15, [r3, #292]	; 0x124
	rollLevelAdjust = angleRoll * theRateRoll;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	edc3 7a4a 	vstr	s15, [r3, #296]	; 0x128
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <_ZN7IMU9DOF15CourseDeviationEff>:

float IMU9DOF::CourseDeviation(float theValue1, float theValue2)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b089      	sub	sp, #36	; 0x24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	ed87 0a02 	vstr	s0, [r7, #8]
 8004304:	edc7 0a01 	vstr	s1, [r7, #4]
	float actualCourseMirrored = 0;
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	61fb      	str	r3, [r7, #28]
	float baseCourseMirrored = 0;
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	61bb      	str	r3, [r7, #24]
	float result = theValue1 - theValue2;
 8004314:	ed97 7a02 	vldr	s14, [r7, #8]
 8004318:	edd7 7a01 	vldr	s15, [r7, #4]
 800431c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004320:	edc7 7a05 	vstr	s15, [r7, #20]

	if (result < -180 || result > 180) {
 8004324:	edd7 7a05 	vldr	s15, [r7, #20]
 8004328:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80043d4 <_ZN7IMU9DOF15CourseDeviationEff+0xdc>
 800432c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004334:	d408      	bmi.n	8004348 <_ZN7IMU9DOF15CourseDeviationEff+0x50>
 8004336:	edd7 7a05 	vldr	s15, [r7, #20]
 800433a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80043d8 <_ZN7IMU9DOF15CourseDeviationEff+0xe0>
 800433e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004346:	dd3b      	ble.n	80043c0 <_ZN7IMU9DOF15CourseDeviationEff+0xc8>
		if (theValue2 > 180){
 8004348:	edd7 7a01 	vldr	s15, [r7, #4]
 800434c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80043d8 <_ZN7IMU9DOF15CourseDeviationEff+0xe0>
 8004350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004358:	dd08      	ble.n	800436c <_ZN7IMU9DOF15CourseDeviationEff+0x74>
			baseCourseMirrored = theValue2 - 180;
 800435a:	edd7 7a01 	vldr	s15, [r7, #4]
 800435e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80043d8 <_ZN7IMU9DOF15CourseDeviationEff+0xe0>
 8004362:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004366:	edc7 7a06 	vstr	s15, [r7, #24]
 800436a:	e007      	b.n	800437c <_ZN7IMU9DOF15CourseDeviationEff+0x84>
		}
		else {
			baseCourseMirrored = theValue2 + 180;
 800436c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004370:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80043d8 <_ZN7IMU9DOF15CourseDeviationEff+0xe0>
 8004374:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004378:	edc7 7a06 	vstr	s15, [r7, #24]
		}
		if (theValue1 > 180){
 800437c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004380:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80043d8 <_ZN7IMU9DOF15CourseDeviationEff+0xe0>
 8004384:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438c:	dd08      	ble.n	80043a0 <_ZN7IMU9DOF15CourseDeviationEff+0xa8>
			actualCourseMirrored = theValue1 - 180;
 800438e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004392:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80043d8 <_ZN7IMU9DOF15CourseDeviationEff+0xe0>
 8004396:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800439a:	edc7 7a07 	vstr	s15, [r7, #28]
 800439e:	e007      	b.n	80043b0 <_ZN7IMU9DOF15CourseDeviationEff+0xb8>
		}
		else {
			actualCourseMirrored = theValue1 + 180;
 80043a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80043a4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80043d8 <_ZN7IMU9DOF15CourseDeviationEff+0xe0>
 80043a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043ac:	edc7 7a07 	vstr	s15, [r7, #28]
		}
		result = actualCourseMirrored - baseCourseMirrored;
 80043b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80043b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80043b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043bc:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	return result;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	ee07 3a90 	vmov	s15, r3
}
 80043c6:	eeb0 0a67 	vmov.f32	s0, s15
 80043ca:	3724      	adds	r7, #36	; 0x24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	c3340000 	.word	0xc3340000
 80043d8:	43340000 	.word	0x43340000

080043dc <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 80043dc:	b590      	push	{r4, r7, lr}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7fc f841 	bl	800046c <__aeabi_i2d>
 80043ea:	4603      	mov	r3, r0
 80043ec:	460c      	mov	r4, r1
 80043ee:	ec44 3b10 	vmov	d0, r3, r4
 80043f2:	f00a fa49 	bl	800e888 <sqrt>
 80043f6:	eeb0 7a40 	vmov.f32	s14, s0
 80043fa:	eef0 7a60 	vmov.f32	s15, s1
 80043fe:	eeb0 0a47 	vmov.f32	s0, s14
 8004402:	eef0 0a67 	vmov.f32	s1, s15
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	bd90      	pop	{r4, r7, pc}

0800440c <_ZN8MySerialC1EP20__UART_HandleTypeDef>:
 *      Author: Admin
 */
#include <string.h>
#include "MySerial.h"

MySerial::MySerial(UART_HandleTypeDef *huart)
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
{
	uart = huart;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	601a      	str	r2, [r3, #0]
	rx_buffer = { { 0 }, 0, 0};
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3304      	adds	r3, #4
 8004420:	f44f 7284 	mov.w	r2, #264	; 0x108
 8004424:	2100      	movs	r1, #0
 8004426:	4618      	mov	r0, r3
 8004428:	f00c fba8 	bl	8010b7c <memset>
	tx_buffer = { { 0 }, 0, 0};
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004432:	f44f 7284 	mov.w	r2, #264	; 0x108
 8004436:	2100      	movs	r1, #0
 8004438:	4618      	mov	r0, r3
 800443a:	f00c fb9f 	bl	8010b7c <memset>
}
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4618      	mov	r0, r3
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <_ZN8MySerial4InitEv>:
void MySerial::Init(void)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
	_rx_buffer = &rx_buffer;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	1d1a      	adds	r2, r3, #4
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	_tx_buffer = &tx_buffer;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f503 7286 	add.w	r2, r3, #268	; 0x10c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	__HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695a      	ldr	r2, [r3, #20]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0201 	orr.w	r2, r2, #1
 8004478:	615a      	str	r2, [r3, #20]

	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0220 	orr.w	r2, r2, #32
 800448c:	60da      	str	r2, [r3, #12]
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <_ZN8MySerial9StoreCharEhP12RingBuffer_t>:

void MySerial::StoreChar(unsigned char c, RingBuffer_t *buffer)
{
 800449a:	b480      	push	{r7}
 800449c:	b087      	sub	sp, #28
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	460b      	mov	r3, r1
 80044a4:	607a      	str	r2, [r7, #4]
 80044a6:	72fb      	strb	r3, [r7, #11]
	unsigned int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80044ae:	3301      	adds	r3, #1
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	617b      	str	r3, [r7, #20]

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if(i != buffer->tail) {
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	429a      	cmp	r2, r3
 80044be:	bf14      	ite	ne
 80044c0:	2301      	movne	r3, #1
 80044c2:	2300      	moveq	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d009      	beq.n	80044de <_ZN8MySerial9StoreCharEhP12RingBuffer_t+0x44>
		buffer->buffer[buffer->head] = c;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	7af9      	ldrb	r1, [r7, #11]
 80044d4:	54d1      	strb	r1, [r2, r3]
		buffer->head = i;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}
}
 80044de:	bf00      	nop
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <_ZN8MySerial4ReadEv>:
int MySerial::Read(void)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b085      	sub	sp, #20
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
	// if the head isn't ahead of the tail, we don't have any characters
	if(_rx_buffer->head == _rx_buffer->tail)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80044f8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004502:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004506:	429a      	cmp	r2, r3
 8004508:	bf0c      	ite	eq
 800450a:	2301      	moveq	r3, #1
 800450c:	2300      	movne	r3, #0
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <_ZN8MySerial4ReadEv+0x30>
	{
		return -1;
 8004514:	f04f 33ff 	mov.w	r3, #4294967295
 8004518:	e016      	b.n	8004548 <_ZN8MySerial4ReadEv+0x5e>
	}
	else
	{
		unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004526:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800452a:	5cd3      	ldrb	r3, [r2, r3]
 800452c:	73fb      	strb	r3, [r7, #15]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004534:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004540:	b2d2      	uxtb	r2, r2
 8004542:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		return c;
 8004546:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 8004548:	4618      	mov	r0, r3
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <_ZN8MySerial15IsDataAvailableEv>:
//				HAL_UART_Transmit(uart, _tx_buffer->buffer, sizeof(_tx_buffer->buffer), 1000);

	}
}
int MySerial::IsDataAvailable(void)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
	return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004562:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004566:	b29a      	uxth	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800456e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004572:	b29b      	uxth	r3, r3
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	b29b      	uxth	r3, r3
 8004578:	b2db      	uxtb	r3, r3
}
 800457a:	4618      	mov	r0, r3
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <_ZN8MySerial7UartIsrEv>:
	return 0;
}


void MySerial::UartIsr ()
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b086      	sub	sp, #24
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
	uint32_t isrflags   = READ_REG(this->uart->Instance->SR);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(this->uart->Instance->CR1);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	613b      	str	r3, [r7, #16]

	/* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d016      	beq.n	80045da <_ZN8MySerial7UartIsrEv+0x54>
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f003 0320 	and.w	r3, r3, #32
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d011      	beq.n	80045da <_ZN8MySerial7UartIsrEv+0x54>
		 * @note   TC flag can be also cleared by software sequence: a read operation to
		 *          USART_SR register followed by a write operation to USART_DR register.
		 * @note   TXE flag is cleared only by a write to the USART_DR register.

		 *********************/
		this->uart->Instance->SR;                       /* Read status register */
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
		unsigned char c = this->uart->Instance->DR;     /* Read data register */
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	73fb      	strb	r3, [r7, #15]
		this->StoreChar(c, _rx_buffer);  // store data in buffer
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80045ce:	7bfb      	ldrb	r3, [r7, #15]
 80045d0:	4619      	mov	r1, r3
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7ff ff61 	bl	800449a <_ZN8MySerial9StoreCharEhP12RingBuffer_t>
		return;
 80045d8:	e03b      	b.n	8004652 <_ZN8MySerial7UartIsrEv+0xcc>
	}

	/*If interrupt is caused due to Transmit Data Register Empty */
	if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d036      	beq.n	8004652 <_ZN8MySerial7UartIsrEv+0xcc>
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d031      	beq.n	8004652 <_ZN8MySerial7UartIsrEv+0xcc>
	{
		if(tx_buffer.head == tx_buffer.tail)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80045fa:	429a      	cmp	r2, r3
 80045fc:	bf0c      	ite	eq
 80045fe:	2301      	moveq	r3, #1
 8004600:	2300      	movne	r3, #0
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <_ZN8MySerial7UartIsrEv+0x98>
		{
			// Buffer empty, so disable interrupts
			__HAL_UART_DISABLE_IT(this->uart, UART_IT_TXE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800461a:	60da      	str	r2, [r3, #12]

			this->uart->Instance->SR;
			this->uart->Instance->DR = c;

		}
		return;
 800461c:	e019      	b.n	8004652 <_ZN8MySerial7UartIsrEv+0xcc>
			unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	4413      	add	r3, r2
 8004628:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800462c:	73bb      	strb	r3, [r7, #14]
			tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004634:	3301      	adds	r3, #1
 8004636:	b2da      	uxtb	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			this->uart->Instance->SR;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
			this->uart->Instance->DR = c;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	7bba      	ldrb	r2, [r7, #14]
 800464e:	605a      	str	r2, [r3, #4]
		return;
 8004650:	bf00      	nop
	}
}
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <_ZN14PID_HorizontalC1Ev>:

#include "PIDHorizontal.h"


PID_Horizontal::PID_Horizontal() {
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	4a04      	ldr	r2, [pc, #16]	; (8004674 <_ZN14PID_HorizontalC1Ev+0x1c>)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	08010c98 	.word	0x08010c98

08004678 <_ZN14PID_HorizontalD1Ev>:

PID_Horizontal::~PID_Horizontal() {
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	4a04      	ldr	r2, [pc, #16]	; (8004694 <_ZN14PID_HorizontalD1Ev+0x1c>)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4618      	mov	r0, r3
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	08010c98 	.word	0x08010c98

08004698 <_ZN14PID_HorizontalD0Ev>:
PID_Horizontal::~PID_Horizontal() {
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
}
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7ff ffe9 	bl	8004678 <_ZN14PID_HorizontalD1Ev>
 80046a6:	2198      	movs	r1, #152	; 0x98
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f009 feeb 	bl	800e484 <_ZdlPvj>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <_ZN14PID_Horizontal20setKgainConstantRollEffff>:

void PID_Horizontal::setKgainConstantRoll(float thePgainRoll, float theIgainRoll, float theDgainRoll, float theMaxOutputValue)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6178      	str	r0, [r7, #20]
 80046c0:	ed87 0a04 	vstr	s0, [r7, #16]
 80046c4:	edc7 0a03 	vstr	s1, [r7, #12]
 80046c8:	ed87 1a02 	vstr	s2, [r7, #8]
 80046cc:	edc7 1a01 	vstr	s3, [r7, #4]
	this->roll.Pgain = thePgainRoll;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	605a      	str	r2, [r3, #4]
	this->roll.Igain = theIgainRoll;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	609a      	str	r2, [r3, #8]
	this->roll.Dgain = theDgainRoll;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	60da      	str	r2, [r3, #12]
	this->roll.maxOutputValue = theMaxOutputValue;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	615a      	str	r2, [r3, #20]
}
 80046e8:	bf00      	nop
 80046ea:	371c      	adds	r7, #28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <_ZN14PID_Horizontal21setKgainConstantPitchEffff>:
void PID_Horizontal::setKgainConstantPitch(float thePgainPitch, float theIgainPitch, float theDgainPitch, float theMaxOutputValue)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6178      	str	r0, [r7, #20]
 80046fc:	ed87 0a04 	vstr	s0, [r7, #16]
 8004700:	edc7 0a03 	vstr	s1, [r7, #12]
 8004704:	ed87 1a02 	vstr	s2, [r7, #8]
 8004708:	edc7 1a01 	vstr	s3, [r7, #4]
	this->pitch.Pgain = thePgainPitch;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	635a      	str	r2, [r3, #52]	; 0x34
	this->pitch.Igain = theIgainPitch;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	639a      	str	r2, [r3, #56]	; 0x38
	this->pitch.Dgain = theDgainPitch;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	63da      	str	r2, [r3, #60]	; 0x3c
	this->pitch.maxOutputValue = theMaxOutputValue;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004724:	bf00      	nop
 8004726:	371c      	adds	r7, #28
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <_ZN14PID_Horizontal19setKgainConstantYawEffff>:
void PID_Horizontal::setKgainConstantYaw(float thePgainYaw, float theIgainYaw, float theDgainYaw, float theMaxOutputValue)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	6178      	str	r0, [r7, #20]
 8004738:	ed87 0a04 	vstr	s0, [r7, #16]
 800473c:	edc7 0a03 	vstr	s1, [r7, #12]
 8004740:	ed87 1a02 	vstr	s2, [r7, #8]
 8004744:	edc7 1a01 	vstr	s3, [r7, #4]
	this->yaw.Pgain = thePgainYaw;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	665a      	str	r2, [r3, #100]	; 0x64
	this->yaw.Igain = theIgainYaw;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	669a      	str	r2, [r3, #104]	; 0x68
	this->yaw.Dgain = theDgainYaw;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	66da      	str	r2, [r3, #108]	; 0x6c
	this->yaw.maxOutputValue = theMaxOutputValue;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004760:	bf00      	nop
 8004762:	371c      	adds	r7, #28
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <_ZN14PID_Horizontal14setLevelAdjustEff>:

void PID_Horizontal::setLevelAdjust(float theLevelAdjustRoll, float theLevelAdjustPitch)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	ed87 0a02 	vstr	s0, [r7, #8]
 8004778:	edc7 0a01 	vstr	s1, [r7, #4]
	roll.levelAdjust = theLevelAdjustRoll;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	62da      	str	r2, [r3, #44]	; 0x2c
	pitch.levelAdjust = theLevelAdjustPitch;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004788:	bf00      	nop
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <_ZN14PID_Horizontal12calculatePIDEv>:
void PID_Horizontal::calculatePID()
{
 8004794:	b590      	push	{r4, r7, lr}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
	// Chuyển đổi setPointRoll sang đơn vị dps để cùng kiểu dữ liệu với inputRoll
	// Chuyển đổi đơn vị bằng cách chia giá trị cho 3 ta được giá trị lớn nhất của setPointRoll ( (500-8)/3 = 164d/s ).
	roll.setPoint = 0;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	621a      	str	r2, [r3, #32]
	// Thiết lập khoảng deadBand là 16us để đạt được độ ổn định
	if (roll.setPointBase > 1491)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	f240 52d3 	movw	r2, #1491	; 0x5d3
 80047ac:	4293      	cmp	r3, r2
 80047ae:	dd0b      	ble.n	80047c8 <_ZN14PID_Horizontal12calculatePIDEv+0x34>
	{
		roll.setPoint = roll.setPointBase - 1491;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	f2a3 53d3 	subw	r3, r3, #1491	; 0x5d3
 80047b8:	ee07 3a90 	vmov	s15, r3
 80047bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	edc3 7a08 	vstr	s15, [r3, #32]
 80047c6:	e010      	b.n	80047ea <_ZN14PID_Horizontal12calculatePIDEv+0x56>
	}
	else if (roll.setPointBase < 1486)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	f240 52cd 	movw	r2, #1485	; 0x5cd
 80047d0:	4293      	cmp	r3, r2
 80047d2:	dc0a      	bgt.n	80047ea <_ZN14PID_Horizontal12calculatePIDEv+0x56>
	{
		roll.setPoint  =  roll.setPointBase - 1486;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	f2a3 53ce 	subw	r3, r3, #1486	; 0x5ce
 80047dc:	ee07 3a90 	vmov	s15, r3
 80047e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	edc3 7a08 	vstr	s15, [r3, #32]
	}

	roll.setPoint -= roll.levelAdjust;                                          //Subtract the angle correction from the standardized receiver roll input value.
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	ed93 7a08 	vldr	s14, [r3, #32]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80047f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	edc3 7a08 	vstr	s15, [r3, #32]
	roll.setPoint /= 3.0;                                                        //Divide the setpoint for the PID roll controller by 3 to get angles in degrees.
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	ed93 7a08 	vldr	s14, [r3, #32]
 8004806:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800480a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	edc3 7a08 	vstr	s15, [r3, #32]


	//The PID set point in degrees per second is determined by the pitch receiver input.
	//In the case of deviding by 3 the max pitch rate is aprox 164 degrees per second ( (500-8)/3 = 164d/s ).
	pitch.setPoint = 0;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	651a      	str	r2, [r3, #80]	; 0x50
	//We need a little dead band of 16us for better results.
	if (pitch.setPointBase > 1481)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004820:	f240 52c9 	movw	r2, #1481	; 0x5c9
 8004824:	4293      	cmp	r3, r2
 8004826:	dd0b      	ble.n	8004840 <_ZN14PID_Horizontal12calculatePIDEv+0xac>
	{
		pitch.setPoint = pitch.setPointBase - 1481;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800482c:	f2a3 53c9 	subw	r3, r3, #1481	; 0x5c9
 8004830:	ee07 3a90 	vmov	s15, r3
 8004834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 800483e:	e010      	b.n	8004862 <_ZN14PID_Horizontal12calculatePIDEv+0xce>
	}
	else if (pitch.setPointBase < 1477)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004844:	f240 52c4 	movw	r2, #1476	; 0x5c4
 8004848:	4293      	cmp	r3, r2
 800484a:	dc0a      	bgt.n	8004862 <_ZN14PID_Horizontal12calculatePIDEv+0xce>
	{
		pitch.setPoint = pitch.setPointBase - 1477;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004850:	f2a3 53c5 	subw	r3, r3, #1477	; 0x5c5
 8004854:	ee07 3a90 	vmov	s15, r3
 8004858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	}

	pitch.setPoint -= pitch.levelAdjust;                                        //Subtract the angle correction from the standardized receiver pitch input value.
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800486e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	pitch.setPoint /= 3.0;                                                       //Divide the setpoint for the PID pitch controller by 3 to get angles in degrees.
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800487e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004882:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

	//The PID set point in degrees per second is determined by the yaw receiver input.
	//In the case of deviding by 3 the max yaw rate is aprox 164 degrees per second ( (500-8)/3 = 164d/s ).
	yaw.setPoint = 0;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	//We need a little dead band of 16us for better results.
	if (throttleSetpoint > 1050) { //Do not yaw when turning off the motors.
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800489c:	f240 421a 	movw	r2, #1050	; 0x41a
 80048a0:	4293      	cmp	r3, r2
 80048a2:	dd3b      	ble.n	800491c <_ZN14PID_Horizontal12calculatePIDEv+0x188>
		if (yaw.setPointBase > 1477)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048aa:	f240 52c5 	movw	r2, #1477	; 0x5c5
 80048ae:	4293      	cmp	r3, r2
 80048b0:	dd17      	ble.n	80048e2 <_ZN14PID_Horizontal12calculatePIDEv+0x14e>
		{
			yaw.setPoint = (yaw.setPointBase - 1477) / 3.0;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b8:	f2a3 53c5 	subw	r3, r3, #1477	; 0x5c5
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fb fdd5 	bl	800046c <__aeabi_i2d>
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	4bb3      	ldr	r3, [pc, #716]	; (8004b94 <_ZN14PID_Horizontal12calculatePIDEv+0x400>)
 80048c8:	f7fb ff64 	bl	8000794 <__aeabi_ddiv>
 80048cc:	4603      	mov	r3, r0
 80048ce:	460c      	mov	r4, r1
 80048d0:	4618      	mov	r0, r3
 80048d2:	4621      	mov	r1, r4
 80048d4:	f7fc f92c 	bl	8000b30 <__aeabi_d2f>
 80048d8:	4602      	mov	r2, r0
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80048e0:	e01c      	b.n	800491c <_ZN14PID_Horizontal12calculatePIDEv+0x188>
		}
		else if (yaw.setPointBase < 1472)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e8:	f5b3 6fb8 	cmp.w	r3, #1472	; 0x5c0
 80048ec:	da16      	bge.n	800491c <_ZN14PID_Horizontal12calculatePIDEv+0x188>
		{
			yaw.setPoint = (yaw.setPointBase - 1472) / 3.0;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f4:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7fb fdb7 	bl	800046c <__aeabi_i2d>
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	4ba4      	ldr	r3, [pc, #656]	; (8004b94 <_ZN14PID_Horizontal12calculatePIDEv+0x400>)
 8004904:	f7fb ff46 	bl	8000794 <__aeabi_ddiv>
 8004908:	4603      	mov	r3, r0
 800490a:	460c      	mov	r4, r1
 800490c:	4618      	mov	r0, r3
 800490e:	4621      	mov	r1, r4
 8004910:	f7fc f90e 	bl	8000b30 <__aeabi_d2f>
 8004914:	4602      	mov	r2, r0
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		}
	}

	//Roll calculations
	roll.momentError = roll.inputValue - roll.setPoint;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	ed93 7a06 	vldr	s14, [r3, #24]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	edd3 7a08 	vldr	s15, [r3, #32]
 8004928:	ee77 7a67 	vsub.f32	s15, s14, s15
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	roll.ImemValue += roll.Igain * roll.momentError;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	ed93 7a07 	vldr	s14, [r3, #28]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	edd3 6a02 	vldr	s13, [r3, #8]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	edc3 7a07 	vstr	s15, [r3, #28]
	if (roll.ImemValue > roll.maxOutputValue)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	ed93 7a07 	vldr	s14, [r3, #28]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	edd3 7a05 	vldr	s15, [r3, #20]
 800495e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004966:	dd04      	ble.n	8004972 <_ZN14PID_Horizontal12calculatePIDEv+0x1de>
	{
		roll.ImemValue = roll.maxOutputValue;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	695a      	ldr	r2, [r3, #20]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	61da      	str	r2, [r3, #28]
 8004970:	e014      	b.n	800499c <_ZN14PID_Horizontal12calculatePIDEv+0x208>
	}
	else if (roll.ImemValue < roll.maxOutputValue * -1)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	ed93 7a07 	vldr	s14, [r3, #28]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	edd3 7a05 	vldr	s15, [r3, #20]
 800497e:	eef1 7a67 	vneg.f32	s15, s15
 8004982:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800498a:	d507      	bpl.n	800499c <_ZN14PID_Horizontal12calculatePIDEv+0x208>
	{
		roll.ImemValue = roll.maxOutputValue * -1;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	edd3 7a05 	vldr	s15, [r3, #20]
 8004992:	eef1 7a67 	vneg.f32	s15, s15
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	edc3 7a07 	vstr	s15, [r3, #28]
	}

	roll.outputValue = roll.Pgain * roll.momentError + roll.ImemValue + roll.Dgain * (roll.momentError - roll.previousError);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	ed93 7a01 	vldr	s14, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80049a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	edd3 7a07 	vldr	s15, [r3, #28]
 80049b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	edd3 6a03 	vldr	s13, [r3, #12]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80049c8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80049cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	edc3 7a04 	vstr	s15, [r3, #16]
	if (roll.outputValue > roll.maxOutputValue)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	ed93 7a04 	vldr	s14, [r3, #16]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	edd3 7a05 	vldr	s15, [r3, #20]
 80049e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ee:	dd04      	ble.n	80049fa <_ZN14PID_Horizontal12calculatePIDEv+0x266>
	{
		roll.outputValue = roll.maxOutputValue;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	695a      	ldr	r2, [r3, #20]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	611a      	str	r2, [r3, #16]
 80049f8:	e014      	b.n	8004a24 <_ZN14PID_Horizontal12calculatePIDEv+0x290>
	}
	else if (roll.outputValue  < roll.maxOutputValue * -1)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	ed93 7a04 	vldr	s14, [r3, #16]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	edd3 7a05 	vldr	s15, [r3, #20]
 8004a06:	eef1 7a67 	vneg.f32	s15, s15
 8004a0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a12:	d507      	bpl.n	8004a24 <_ZN14PID_Horizontal12calculatePIDEv+0x290>
	{
		roll.outputValue = roll.maxOutputValue* -1;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	edd3 7a05 	vldr	s15, [r3, #20]
 8004a1a:	eef1 7a67 	vneg.f32	s15, s15
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	edc3 7a04 	vstr	s15, [r3, #16]
	}

	roll.previousError = roll.momentError;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	625a      	str	r2, [r3, #36]	; 0x24

	//Pitch calculations
	pitch.momentError = pitch.inputValue - pitch.setPoint;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004a38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	pitch.ImemValue += pitch.Igain * pitch.momentError;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004a54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	if (pitch.ImemValue > pitch.maxOutputValue)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004a6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a76:	dd04      	ble.n	8004a82 <_ZN14PID_Horizontal12calculatePIDEv+0x2ee>
	{
		pitch.ImemValue = pitch.maxOutputValue;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004a80:	e014      	b.n	8004aac <_ZN14PID_Horizontal12calculatePIDEv+0x318>
	}
	else if (pitch.ImemValue < pitch.maxOutputValue * -1)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004a8e:	eef1 7a67 	vneg.f32	s15, s15
 8004a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a9a:	d507      	bpl.n	8004aac <_ZN14PID_Horizontal12calculatePIDEv+0x318>
	{
		pitch.ImemValue = pitch.maxOutputValue * -1;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004aa2:	eef1 7a67 	vneg.f32	s15, s15
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	}

	pitch.outputValue = pitch.Pgain * pitch.momentError + pitch.ImemValue + pitch.Dgain * (pitch.momentError - pitch.previousError);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004ab8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004ac2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	ed93 6a16 	vldr	s12, [r3, #88]	; 0x58
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004ad8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004adc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	if (pitch.outputValue > pitch.maxOutputValue)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004af6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afe:	dd04      	ble.n	8004b0a <_ZN14PID_Horizontal12calculatePIDEv+0x376>
	{
		pitch.outputValue = pitch.maxOutputValue;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	641a      	str	r2, [r3, #64]	; 0x40
 8004b08:	e014      	b.n	8004b34 <_ZN14PID_Horizontal12calculatePIDEv+0x3a0>
	}
	else if (pitch.outputValue  < pitch.maxOutputValue * -1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004b16:	eef1 7a67 	vneg.f32	s15, s15
 8004b1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b22:	d507      	bpl.n	8004b34 <_ZN14PID_Horizontal12calculatePIDEv+0x3a0>
	{
		pitch.outputValue = pitch.maxOutputValue* -1;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004b2a:	eef1 7a67 	vneg.f32	s15, s15
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	}

	pitch.previousError = pitch.momentError;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	655a      	str	r2, [r3, #84]	; 0x54

	//Yaw calculations
	yaw.momentError = yaw.inputValue - yaw.setPoint;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8004b48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	yaw.ImemValue += yaw.Igain * yaw.momentError;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8004b64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	if (yaw.ImemValue > yaw.maxOutputValue)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004b7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b86:	dd07      	ble.n	8004b98 <_ZN14PID_Horizontal12calculatePIDEv+0x404>
	{
		yaw.ImemValue = yaw.maxOutputValue;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	67da      	str	r2, [r3, #124]	; 0x7c
 8004b90:	e017      	b.n	8004bc2 <_ZN14PID_Horizontal12calculatePIDEv+0x42e>
 8004b92:	bf00      	nop
 8004b94:	40080000 	.word	0x40080000
	}
	else if (yaw.ImemValue < yaw.maxOutputValue * -1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004ba4:	eef1 7a67 	vneg.f32	s15, s15
 8004ba8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb0:	d507      	bpl.n	8004bc2 <_ZN14PID_Horizontal12calculatePIDEv+0x42e>
	{
		yaw.ImemValue = yaw.maxOutputValue * -1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004bb8:	eef1 7a67 	vneg.f32	s15, s15
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	}

	yaw.outputValue = yaw.Pgain * yaw.momentError + yaw.ImemValue + yaw.Dgain * (yaw.momentError - yaw.previousError);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8004bce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8004bd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8004bee:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004bf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	if (yaw.outputValue > yaw.maxOutputValue)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c14:	dd04      	ble.n	8004c20 <_ZN14PID_Horizontal12calculatePIDEv+0x48c>
	{
		yaw.outputValue = yaw.maxOutputValue;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	671a      	str	r2, [r3, #112]	; 0x70
 8004c1e:	e014      	b.n	8004c4a <_ZN14PID_Horizontal12calculatePIDEv+0x4b6>
	}
	else if (yaw.outputValue  < yaw.maxOutputValue * -1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004c2c:	eef1 7a67 	vneg.f32	s15, s15
 8004c30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c38:	d507      	bpl.n	8004c4a <_ZN14PID_Horizontal12calculatePIDEv+0x4b6>
	{
		yaw.outputValue = yaw.maxOutputValue* -1;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8004c40:	eef1 7a67 	vneg.f32	s15, s15
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	}

	yaw.previousError = yaw.momentError;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd90      	pop	{r4, r7, pc}
 8004c5e:	bf00      	nop

08004c60 <_ZN9BarometerC1EP17I2C_HandleTypeDef>:
#define MS5611_CMD_RESET              		(0x1E)
#define MS5611_CMD_CONV_D1_4096           	(0x48)
#define MS5611_CMD_CONV_D2_4096            	(0x58)
#define MS5611_CMD_READ_PROM          		(0xA2)

Barometer::Barometer(I2C_HandleTypeDef * theI2c)
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
{
	this->hi2c = theI2c;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	601a      	str	r2, [r3, #0]
}
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <_ZN9Barometer5ResetEv>:
HAL_StatusTypeDef Barometer::Reset()
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b086      	sub	sp, #24
 8004c82:	af02      	add	r7, sp, #8
 8004c84:	6078      	str	r0, [r7, #4]
	uint8_t tempCmd = MS5611_CMD_RESET;
 8004c86:	231e      	movs	r3, #30
 8004c88:	73fb      	strb	r3, [r7, #15]
	if ( HAL_I2C_Master_Transmit(this->hi2c, (uint16_t) MS5611_ADDRESS, &tempCmd, 1, 500) != HAL_OK)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	f107 020f 	add.w	r2, r7, #15
 8004c92:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	2301      	movs	r3, #1
 8004c9a:	21ee      	movs	r1, #238	; 0xee
 8004c9c:	f004 ff1c 	bl	8009ad8 <HAL_I2C_Master_Transmit>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	bf14      	ite	ne
 8004ca6:	2301      	movne	r3, #1
 8004ca8:	2300      	moveq	r3, #0
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <_ZN9Barometer5ResetEv+0x36>
	{
		return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e003      	b.n	8004cbc <_ZN9Barometer5ResetEv+0x3e>
	}
	HAL_Delay(10);
 8004cb4:	200a      	movs	r0, #10
 8004cb6:	f003 fb6d 	bl	8008394 <HAL_Delay>
	return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <_ZN9Barometer8ReadPromEv>:

HAL_StatusTypeDef Barometer::ReadProm()
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af02      	add	r7, sp, #8
 8004cca:	6078      	str	r0, [r7, #4]
	uint8_t tempData[2] = {0};
 8004ccc:	2300      	movs	r3, #0
 8004cce:	81bb      	strh	r3, [r7, #12]
	uint8_t theCmd = 0;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	72fb      	strb	r3, [r7, #11]
	for (uint8_t offset = 0; offset < 6; offset++)
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	73fb      	strb	r3, [r7, #15]
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	2b05      	cmp	r3, #5
 8004cdc:	d844      	bhi.n	8004d68 <_ZN9Barometer8ReadPromEv+0xa4>
	{
		theCmd = MS5611_CMD_READ_PROM + (offset * 2);
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
 8004ce0:	3351      	adds	r3, #81	; 0x51
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	72fb      	strb	r3, [r7, #11]
		if ( HAL_I2C_Master_Transmit(this->hi2c, (uint16_t) MS5611_ADDRESS, &theCmd, 1, 500) != HAL_OK){
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6818      	ldr	r0, [r3, #0]
 8004cee:	f107 020b 	add.w	r2, r7, #11
 8004cf2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	21ee      	movs	r1, #238	; 0xee
 8004cfc:	f004 feec 	bl	8009ad8 <HAL_I2C_Master_Transmit>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	bf14      	ite	ne
 8004d06:	2301      	movne	r3, #1
 8004d08:	2300      	moveq	r3, #0
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <_ZN9Barometer8ReadPromEv+0x50>
			return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e02a      	b.n	8004d6a <_ZN9Barometer8ReadPromEv+0xa6>
		}
		HAL_Delay(10);
 8004d14:	200a      	movs	r0, #10
 8004d16:	f003 fb3d 	bl	8008394 <HAL_Delay>
		if ( HAL_I2C_Master_Receive(this->hi2c, (uint16_t) MS5611_ADDRESS, tempData, 2, 500) != HAL_OK){
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	f107 020c 	add.w	r2, r7, #12
 8004d22:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	2302      	movs	r3, #2
 8004d2a:	21ee      	movs	r1, #238	; 0xee
 8004d2c:	f004 ffd2 	bl	8009cd4 <HAL_I2C_Master_Receive>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	bf14      	ite	ne
 8004d36:	2301      	movne	r3, #1
 8004d38:	2300      	moveq	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <_ZN9Barometer8ReadPromEv+0x80>
			return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e012      	b.n	8004d6a <_ZN9Barometer8ReadPromEv+0xa6>
		}
		this->dataProm[offset] = tempData[0] << 8 | tempData[1];
 8004d44:	7b3b      	ldrb	r3, [r7, #12]
 8004d46:	021b      	lsls	r3, r3, #8
 8004d48:	b21a      	sxth	r2, r3
 8004d4a:	7b7b      	ldrb	r3, [r7, #13]
 8004d4c:	b21b      	sxth	r3, r3
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	b21a      	sxth	r2, r3
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
 8004d54:	b291      	uxth	r1, r2
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	4413      	add	r3, r2
 8004d5c:	460a      	mov	r2, r1
 8004d5e:	809a      	strh	r2, [r3, #4]
	for (uint8_t offset = 0; offset < 6; offset++)
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	3301      	adds	r3, #1
 8004d64:	73fb      	strb	r3, [r7, #15]
 8004d66:	e7b7      	b.n	8004cd8 <_ZN9Barometer8ReadPromEv+0x14>
	}
	return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <_ZN9Barometer4InitEv>:
HAL_StatusTypeDef Barometer::Init()
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b082      	sub	sp, #8
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
	if ( Reset() != HAL_OK) {
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7ff ff7f 	bl	8004c7e <_ZN9Barometer5ResetEv>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bf14      	ite	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	2300      	moveq	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <_ZN9Barometer4InitEv+0x22>
		return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e00d      	b.n	8004db0 <_ZN9Barometer4InitEv+0x3e>
	}

	if ( ReadProm() != HAL_OK){
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff ff95 	bl	8004cc4 <_ZN9Barometer8ReadPromEv>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	bf14      	ite	ne
 8004da0:	2301      	movne	r3, #1
 8004da2:	2300      	moveq	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <_ZN9Barometer4InitEv+0x3c>
		return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <_ZN9Barometer4InitEv+0x3e>
	}

	return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <_ZN9Barometer17SetGroundPressureEv>:
void Barometer::SetGroundPressure()
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
	this->actualPressure = 0;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f04f 0200 	mov.w	r2, #0
 8004dc6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <_ZN9Barometer26GetDataFromPreviousRequestEv>:
uint32_t Barometer::GetDataFromPreviousRequest()
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b086      	sub	sp, #24
 8004dda:	af02      	add	r7, sp, #8
 8004ddc:	6078      	str	r0, [r7, #4]
	uint8_t tempCmd = MS5611_CMD_ADC_READ;
 8004dde:	2300      	movs	r3, #0
 8004de0:	73fb      	strb	r3, [r7, #15]
	uint8_t tempData[3] = {0};
 8004de2:	f107 030c 	add.w	r3, r7, #12
 8004de6:	2100      	movs	r1, #0
 8004de8:	460a      	mov	r2, r1
 8004dea:	801a      	strh	r2, [r3, #0]
 8004dec:	460a      	mov	r2, r1
 8004dee:	709a      	strb	r2, [r3, #2]

	// Đọc dữ liệu từ câu lệnh request trước đó
	HAL_I2C_Master_Transmit(this->hi2c, (uint16_t) MS5611_ADDRESS, &tempCmd, 1, 10);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6818      	ldr	r0, [r3, #0]
 8004df4:	f107 020f 	add.w	r2, r7, #15
 8004df8:	230a      	movs	r3, #10
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	21ee      	movs	r1, #238	; 0xee
 8004e00:	f004 fe6a 	bl	8009ad8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(this->hi2c, (uint16_t) MS5611_ADDRESS, tempData, 3, 10);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	f107 020c 	add.w	r2, r7, #12
 8004e0c:	230a      	movs	r3, #10
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	2303      	movs	r3, #3
 8004e12:	21ee      	movs	r1, #238	; 0xee
 8004e14:	f004 ff5e 	bl	8009cd4 <HAL_I2C_Master_Receive>
	return  ((tempData[0] << 16) | (tempData[1] << 8) | (tempData[2]));
 8004e18:	7b3b      	ldrb	r3, [r7, #12]
 8004e1a:	041a      	lsls	r2, r3, #16
 8004e1c:	7b7b      	ldrb	r3, [r7, #13]
 8004e1e:	021b      	lsls	r3, r3, #8
 8004e20:	4313      	orrs	r3, r2
 8004e22:	7bba      	ldrb	r2, [r7, #14]
 8004e24:	4313      	orrs	r3, r2

}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <_ZN9Barometer18IsReadyToInterfaceEv>:

BAROMETER_Result Barometer::IsReadyToInterface()
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
	/**** Kiểm tra giao tiếp I2C của MS5611 *****/
	if(HAL_I2C_IsDeviceReady(this->hi2c, MS5611_ADDRESS, 2, 5) != HAL_OK)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6818      	ldr	r0, [r3, #0]
 8004e3a:	2305      	movs	r3, #5
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	21ee      	movs	r1, #238	; 0xee
 8004e40:	f005 fc8e 	bl	800a760 <HAL_I2C_IsDeviceReady>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	bf14      	ite	ne
 8004e4a:	2301      	movne	r3, #1
 8004e4c:	2300      	moveq	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <_ZN9Barometer18IsReadyToInterfaceEv+0x2a>
	{
		return BAROMETER_Result_DeviceNotConnected;
 8004e54:	2302      	movs	r3, #2
 8004e56:	e000      	b.n	8004e5a <_ZN9Barometer18IsReadyToInterfaceEv+0x2c>
	}

	return BAROMETER_Result_Ok;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <_ZN9Barometer21GetAverageTemperatureEv>:

uint32_t Barometer::GetAverageTemperature()
{
 8004e64:	b590      	push	{r4, r7, lr}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
	rawAverageTemperatureTotal -= rawTemperatureRotatingMemory[indexAverageTemperatureMem];
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	330c      	adds	r3, #12
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	1ad2      	subs	r2, r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	64da      	str	r2, [r3, #76]	; 0x4c
	// Đọc dữ liệu nhiệt độ
	rawTemperatureRotatingMemory[indexAverageTemperatureMem] = GetDataFromPreviousRequest();
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004e8c:	461c      	mov	r4, r3
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff ffa1 	bl	8004dd6 <_ZN9Barometer26GetDataFromPreviousRequestEv>
 8004e94:	4601      	mov	r1, r0
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	f104 030c 	add.w	r3, r4, #12
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	6059      	str	r1, [r3, #4]
	rawAverageTemperatureTotal += rawTemperatureRotatingMemory[indexAverageTemperatureMem];
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	330c      	adds	r3, #12
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	440b      	add	r3, r1
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	441a      	add	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	64da      	str	r2, [r3, #76]	; 0x4c
	indexAverageTemperatureMem++;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	if (indexAverageTemperatureMem == 5)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004ed2:	2b05      	cmp	r3, #5
 8004ed4:	d103      	bne.n	8004ede <_ZN9Barometer21GetAverageTemperatureEv+0x7a>
	{
		indexAverageTemperatureMem = 0;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}
	return rawAverageTemperatureTotal / 5;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee2:	4a04      	ldr	r2, [pc, #16]	; (8004ef4 <_ZN9Barometer21GetAverageTemperatureEv+0x90>)
 8004ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee8:	089b      	lsrs	r3, r3, #2
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd90      	pop	{r4, r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	cccccccd 	.word	0xcccccccd

08004ef8 <_ZN9Barometer25RequestGetTemperatureDataEv>:

void Barometer::RequestGetTemperatureData()
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af02      	add	r7, sp, #8
 8004efe:	6078      	str	r0, [r7, #4]
	uint8_t tempCmd = MS5611_CMD_CONV_D2_4096;
 8004f00:	2358      	movs	r3, #88	; 0x58
 8004f02:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(this->hi2c, (uint16_t) MS5611_ADDRESS, &tempCmd, 1, 4);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6818      	ldr	r0, [r3, #0]
 8004f08:	f107 020f 	add.w	r2, r7, #15
 8004f0c:	2304      	movs	r3, #4
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	2301      	movs	r3, #1
 8004f12:	21ee      	movs	r1, #238	; 0xee
 8004f14:	f004 fde0 	bl	8009ad8 <HAL_I2C_Master_Transmit>
}
 8004f18:	bf00      	nop
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <_ZN9Barometer22RequestGetPressureDataEv>:

void Barometer::RequestGetPressureData()
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af02      	add	r7, sp, #8
 8004f26:	6078      	str	r0, [r7, #4]
	uint8_t tempCmd = MS5611_CMD_CONV_D1_4096;
 8004f28:	2348      	movs	r3, #72	; 0x48
 8004f2a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(this->hi2c, (uint16_t) MS5611_ADDRESS, &tempCmd, 1, 4);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6818      	ldr	r0, [r3, #0]
 8004f30:	f107 020f 	add.w	r2, r7, #15
 8004f34:	2304      	movs	r3, #4
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	2301      	movs	r3, #1
 8004f3a:	21ee      	movs	r1, #238	; 0xee
 8004f3c:	f004 fdcc 	bl	8009ad8 <HAL_I2C_Master_Transmit>
}
 8004f40:	bf00      	nop
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <_ZN9Barometer18CompensatePressureEv>:

int64_t Barometer::CompensatePressure()
{
 8004f48:	b4f0      	push	{r4, r5, r6, r7}
 8004f4a:	b08a      	sub	sp, #40	; 0x28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
	int32_t dT = rawTemperature - ((uint32_t)dataProm[4] << 8);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1a      	ldr	r2, [r3, #32]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	899b      	ldrh	r3, [r3, #12]
 8004f58:	021b      	lsls	r3, r3, #8
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	627b      	str	r3, [r7, #36]	; 0x24
	int64_t OFF = (int64_t)dataProm[1] * 65536 + (int64_t)dataProm[3] * (int64_t)dT / 128;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	88db      	ldrh	r3, [r3, #6]
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	f04f 0400 	mov.w	r4, #0
 8004f68:	f04f 0100 	mov.w	r1, #0
 8004f6c:	f04f 0200 	mov.w	r2, #0
 8004f70:	0422      	lsls	r2, r4, #16
 8004f72:	ea42 4213 	orr.w	r2, r2, r3, lsr #16
 8004f76:	0419      	lsls	r1, r3, #16
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	895b      	ldrh	r3, [r3, #10]
 8004f7c:	b29d      	uxth	r5, r3
 8004f7e:	f04f 0600 	mov.w	r6, #0
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8004f88:	fb03 fc06 	mul.w	ip, r3, r6
 8004f8c:	fb05 f004 	mul.w	r0, r5, r4
 8004f90:	4460      	add	r0, ip
 8004f92:	fba5 3403 	umull	r3, r4, r5, r3
 8004f96:	4420      	add	r0, r4
 8004f98:	4604      	mov	r4, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f174 0000 	sbcs.w	r0, r4, #0
 8004fa0:	da02      	bge.n	8004fa8 <_ZN9Barometer18CompensatePressureEv+0x60>
 8004fa2:	337f      	adds	r3, #127	; 0x7f
 8004fa4:	f144 0400 	adc.w	r4, r4, #0
 8004fa8:	f04f 0500 	mov.w	r5, #0
 8004fac:	f04f 0600 	mov.w	r6, #0
 8004fb0:	09dd      	lsrs	r5, r3, #7
 8004fb2:	ea45 6544 	orr.w	r5, r5, r4, lsl #25
 8004fb6:	11e6      	asrs	r6, r4, #7
 8004fb8:	186b      	adds	r3, r5, r1
 8004fba:	eb46 0402 	adc.w	r4, r6, r2
 8004fbe:	e9c7 3406 	strd	r3, r4, [r7, #24]
	int64_t SENS = (int64_t)dataProm[0] * 32768 + (int64_t)dataProm[2] * dT / 256;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	889b      	ldrh	r3, [r3, #4]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f04f 0400 	mov.w	r4, #0
 8004fcc:	f04f 0100 	mov.w	r1, #0
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	03e2      	lsls	r2, r4, #15
 8004fd6:	ea42 4253 	orr.w	r2, r2, r3, lsr #17
 8004fda:	03d9      	lsls	r1, r3, #15
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	891b      	ldrh	r3, [r3, #8]
 8004fe0:	b29d      	uxth	r5, r3
 8004fe2:	f04f 0600 	mov.w	r6, #0
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8004fec:	fb03 fc06 	mul.w	ip, r3, r6
 8004ff0:	fb05 f004 	mul.w	r0, r5, r4
 8004ff4:	4460      	add	r0, ip
 8004ff6:	fba5 3403 	umull	r3, r4, r5, r3
 8004ffa:	4420      	add	r0, r4
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f174 0000 	sbcs.w	r0, r4, #0
 8005004:	da02      	bge.n	800500c <_ZN9Barometer18CompensatePressureEv+0xc4>
 8005006:	33ff      	adds	r3, #255	; 0xff
 8005008:	f144 0400 	adc.w	r4, r4, #0
 800500c:	f04f 0500 	mov.w	r5, #0
 8005010:	f04f 0600 	mov.w	r6, #0
 8005014:	0a1d      	lsrs	r5, r3, #8
 8005016:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
 800501a:	1226      	asrs	r6, r4, #8
 800501c:	186b      	adds	r3, r5, r1
 800501e:	eb46 0402 	adc.w	r4, r6, r2
 8005022:	e9c7 3404 	strd	r3, r4, [r7, #16]
	int32_t TEMP;

	TEMP = 2000 + ((int64_t) dT * this->dataProm[5]) / 8388608;
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	4619      	mov	r1, r3
 800502a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	89db      	ldrh	r3, [r3, #14]
 8005032:	b29b      	uxth	r3, r3
 8005034:	f04f 0400 	mov.w	r4, #0
 8005038:	fb03 f502 	mul.w	r5, r3, r2
 800503c:	fb01 f004 	mul.w	r0, r1, r4
 8005040:	4428      	add	r0, r5
 8005042:	fba1 3403 	umull	r3, r4, r1, r3
 8005046:	1902      	adds	r2, r0, r4
 8005048:	4614      	mov	r4, r2
 800504a:	2b00      	cmp	r3, #0
 800504c:	f174 0200 	sbcs.w	r2, r4, #0
 8005050:	da05      	bge.n	800505e <_ZN9Barometer18CompensatePressureEv+0x116>
 8005052:	4971      	ldr	r1, [pc, #452]	; (8005218 <_ZN9Barometer18CompensatePressureEv+0x2d0>)
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	185b      	adds	r3, r3, r1
 800505a:	eb44 0402 	adc.w	r4, r4, r2
 800505e:	f04f 0100 	mov.w	r1, #0
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	0dd9      	lsrs	r1, r3, #23
 8005068:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
 800506c:	15e2      	asrs	r2, r4, #23
 800506e:	460b      	mov	r3, r1
 8005070:	4614      	mov	r4, r2
 8005072:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005076:	60fb      	str	r3, [r7, #12]


	if (TEMP < -1500)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4a68      	ldr	r2, [pc, #416]	; (800521c <_ZN9Barometer18CompensatePressureEv+0x2d4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	da33      	bge.n	80050e8 <_ZN9Barometer18CompensatePressureEv+0x1a0>
	{
		OFF2 = OFF2 + 7 * ((TEMP + 1500) * (TEMP + 1500));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f200 50dc 	addw	r0, r0, #1500	; 0x5dc
 8005092:	fb00 f003 	mul.w	r0, r0, r3
 8005096:	4603      	mov	r3, r0
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	1a1b      	subs	r3, r3, r0
 800509c:	461d      	mov	r5, r3
 800509e:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80050a2:	186b      	adds	r3, r5, r1
 80050a4:	eb46 0402 	adc.w	r4, r6, r2
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	e9c2 3404 	strd	r3, r4, [r2, #16]
		SENS2 = SENS2 + 11 * ((TEMP + 1500) * (TEMP + 1500)) / 2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	f202 52dc 	addw	r2, r2, #1500	; 0x5dc
 80050c0:	fb02 f203 	mul.w	r2, r2, r3
 80050c4:	4613      	mov	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	4413      	add	r3, r2
 80050ce:	0fda      	lsrs	r2, r3, #31
 80050d0:	4413      	add	r3, r2
 80050d2:	105b      	asrs	r3, r3, #1
 80050d4:	461d      	mov	r5, r3
 80050d6:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80050da:	182b      	adds	r3, r5, r0
 80050dc:	eb46 0401 	adc.w	r4, r6, r1
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80050e6:	e039      	b.n	800515c <_ZN9Barometer18CompensatePressureEv+0x214>
	}

	else if (TEMP < 2000)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80050ee:	da27      	bge.n	8005140 <_ZN9Barometer18CompensatePressureEv+0x1f8>
	{
		OFF2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 2;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	f5a2 62fa 	sub.w	r2, r2, #2000	; 0x7d0
 80050fc:	fb02 f203 	mul.w	r2, r2, r3
 8005100:	4613      	mov	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	0fda      	lsrs	r2, r3, #31
 8005108:	4413      	add	r3, r2
 800510a:	105b      	asrs	r3, r3, #1
 800510c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	e9c2 3404 	strd	r3, r4, [r2, #16]
		SENS2 = 5 * ((TEMP - 2000) * (TEMP - 2000)) / 4;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	f5a2 62fa 	sub.w	r2, r2, #2000	; 0x7d0
 8005122:	fb02 f203 	mul.w	r2, r2, r3
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	2b00      	cmp	r3, #0
 800512e:	da00      	bge.n	8005132 <_ZN9Barometer18CompensatePressureEv+0x1ea>
 8005130:	3303      	adds	r3, #3
 8005132:	109b      	asrs	r3, r3, #2
 8005134:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800513e:	e00d      	b.n	800515c <_ZN9Barometer18CompensatePressureEv+0x214>
	}

	else
	{
		OFF2 = 0;
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	f04f 0300 	mov.w	r3, #0
 8005146:	f04f 0400 	mov.w	r4, #0
 800514a:	e9c2 3404 	strd	r3, r4, [r2, #16]
		SENS2 = 0;
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	f04f 0400 	mov.w	r4, #0
 8005158:	e9c2 3406 	strd	r3, r4, [r2, #24]
	}

	OFF = OFF - OFF2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	e9d3 5604 	ldrd	r5, r6, [r3, #16]
 8005162:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005166:	460b      	mov	r3, r1
 8005168:	4614      	mov	r4, r2
 800516a:	1b5b      	subs	r3, r3, r5
 800516c:	eb64 0406 	sbc.w	r4, r4, r6
 8005170:	e9c7 3406 	strd	r3, r4, [r7, #24]
	SENS = SENS - SENS2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	e9d3 5606 	ldrd	r5, r6, [r3, #24]
 800517a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800517e:	460b      	mov	r3, r1
 8005180:	4614      	mov	r4, r2
 8005182:	1b5b      	subs	r3, r3, r5
 8005184:	eb64 0406 	sbc.w	r4, r4, r6
 8005188:	e9c7 3404 	strd	r3, r4, [r7, #16]

	return (((rawPressure * SENS) / 2097152 - OFF) / 32768);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	f04f 0400 	mov.w	r4, #0
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	fb04 f102 	mul.w	r1, r4, r2
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	fb03 f202 	mul.w	r2, r3, r2
 80051a0:	440a      	add	r2, r1
 80051a2:	6939      	ldr	r1, [r7, #16]
 80051a4:	fba1 3403 	umull	r3, r4, r1, r3
 80051a8:	4422      	add	r2, r4
 80051aa:	4614      	mov	r4, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f174 0200 	sbcs.w	r2, r4, #0
 80051b2:	da05      	bge.n	80051c0 <_ZN9Barometer18CompensatePressureEv+0x278>
 80051b4:	491a      	ldr	r1, [pc, #104]	; (8005220 <_ZN9Barometer18CompensatePressureEv+0x2d8>)
 80051b6:	f04f 0200 	mov.w	r2, #0
 80051ba:	185b      	adds	r3, r3, r1
 80051bc:	eb44 0402 	adc.w	r4, r4, r2
 80051c0:	f04f 0100 	mov.w	r1, #0
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	0d59      	lsrs	r1, r3, #21
 80051ca:	ea41 21c4 	orr.w	r1, r1, r4, lsl #11
 80051ce:	1562      	asrs	r2, r4, #21
 80051d0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80051d4:	1ac9      	subs	r1, r1, r3
 80051d6:	eb62 0204 	sbc.w	r2, r2, r4
 80051da:	460d      	mov	r5, r1
 80051dc:	4616      	mov	r6, r2
 80051de:	462b      	mov	r3, r5
 80051e0:	4634      	mov	r4, r6
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f174 0200 	sbcs.w	r2, r4, #0
 80051e8:	da06      	bge.n	80051f8 <_ZN9Barometer18CompensatePressureEv+0x2b0>
 80051ea:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	185b      	adds	r3, r3, r1
 80051f4:	eb44 0402 	adc.w	r4, r4, r2
 80051f8:	f04f 0100 	mov.w	r1, #0
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	0bd9      	lsrs	r1, r3, #15
 8005202:	ea41 4144 	orr.w	r1, r1, r4, lsl #17
 8005206:	13e2      	asrs	r2, r4, #15
 8005208:	460b      	mov	r3, r1
 800520a:	4614      	mov	r4, r2
}
 800520c:	4618      	mov	r0, r3
 800520e:	4621      	mov	r1, r4
 8005210:	3728      	adds	r7, #40	; 0x28
 8005212:	46bd      	mov	sp, r7
 8005214:	bcf0      	pop	{r4, r5, r6, r7}
 8005216:	4770      	bx	lr
 8005218:	007fffff 	.word	0x007fffff
 800521c:	fffffa24 	.word	0xfffffa24
 8005220:	001fffff 	.word	0x001fffff

08005224 <_ZN9Barometer18GetAveragePressureEv>:

float Barometer::GetAveragePressure()
{
 8005224:	b490      	push	{r4, r7}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
	//To get a smoother pressure value we will use a 20 location rotating memory.
	averagePressureTotal -= pressureRotatingMemory[indexAveragePressureMem];
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8005238:	4619      	mov	r1, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3114      	adds	r1, #20
 800523e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005242:	1ad2      	subs	r2, r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	pressureRotatingMemory[indexAveragePressureMem] = this->compensatedPressure;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	f892 211c 	ldrb.w	r2, [r2, #284]	; 0x11c
 8005256:	4619      	mov	r1, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3214      	adds	r2, #20
 800525c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	averagePressureTotal += pressureRotatingMemory[indexAveragePressureMem];
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800526c:	4619      	mov	r1, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3114      	adds	r1, #20
 8005272:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005276:	441a      	add	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	indexAveragePressureMem++;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8005284:	3301      	adds	r3, #1
 8005286:	b2da      	uxtb	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	if (indexAveragePressureMem == 20)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8005294:	2b14      	cmp	r3, #20
 8005296:	d103      	bne.n	80052a0 <_ZN9Barometer18GetAveragePressureEv+0x7c>
	{
		indexAveragePressureMem = 0;                              //Start at 0 when the memory location 20 is reached.
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	}

	return (float)averagePressureTotal / 20.0;      //Calculate the average pressure of the last 20 pressure readings.
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80052a6:	ee07 3a90 	vmov	s15, r3
 80052aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052ae:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80052b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80052b6:	eef0 7a66 	vmov.f32	s15, s13
}
 80052ba:	eeb0 0a67 	vmov.f32	s0, s15
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bc90      	pop	{r4, r7}
 80052c4:	4770      	bx	lr
	...

080052c8 <_ZN9Barometer22UseComplementaryFilterEv>:

float Barometer::UseComplementaryFilter()
{
 80052c8:	b5b0      	push	{r4, r5, r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
	//To get better results we will use a complementary fillter that can be adjusted by the fast average.
	actualPressureSlow = actualPressureSlow * (float)0.985 + actualPressureFast * (float)0.015;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	edd3 7a49 	vldr	s15, [r3, #292]	; 0x124
 80052d6:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80053cc <_ZN9Barometer22UseComplementaryFilterEv+0x104>
 80052da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	edd3 7a4a 	vldr	s15, [r3, #296]	; 0x128
 80052e4:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80053d0 <_ZN9Barometer22UseComplementaryFilterEv+0x108>
 80052e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80052ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	edc3 7a49 	vstr	s15, [r3, #292]	; 0x124
	actualPressureDiff = actualPressureSlow - actualPressureFast;                                       //Calculate the difference between the fast and the slow avarage value.
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	edd3 7a4a 	vldr	s15, [r3, #296]	; 0x128
 8005302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	edc3 7a4b 	vstr	s15, [r3, #300]	; 0x12c
	if (actualPressureDiff > 8)actualPressureDiff = 8;                                                    //If the difference is larger then 8 limit the difference to 8.
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
 8005312:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8005316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800531a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800531e:	dd04      	ble.n	800532a <_ZN9Barometer22UseComplementaryFilterEv+0x62>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8005326:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	if (actualPressureDiff < -8)actualPressureDiff = -8;                                                  //If the difference is smaller then -8 limit the difference to -8.
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
 8005330:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8005334:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533c:	d504      	bpl.n	8005348 <_ZN9Barometer22UseComplementaryFilterEv+0x80>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8005344:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	//If the difference is larger then 1 or smaller then -1 the slow average is adjuste based on the error between the fast and slow average.
	if (actualPressureDiff > 1 || actualPressureDiff < -1)actualPressureSlow -= actualPressureDiff / 6.0;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
 800534e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800535a:	dc09      	bgt.n	8005370 <_ZN9Barometer22UseComplementaryFilterEv+0xa8>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
 8005362:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800536a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536e:	d522      	bpl.n	80053b6 <_ZN9Barometer22UseComplementaryFilterEv+0xee>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8005376:	4618      	mov	r0, r3
 8005378:	f7fb f88a 	bl	8000490 <__aeabi_f2d>
 800537c:	4604      	mov	r4, r0
 800537e:	460d      	mov	r5, r1
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8005386:	4618      	mov	r0, r3
 8005388:	f7fb f882 	bl	8000490 <__aeabi_f2d>
 800538c:	f04f 0200 	mov.w	r2, #0
 8005390:	4b10      	ldr	r3, [pc, #64]	; (80053d4 <_ZN9Barometer22UseComplementaryFilterEv+0x10c>)
 8005392:	f7fb f9ff 	bl	8000794 <__aeabi_ddiv>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4620      	mov	r0, r4
 800539c:	4629      	mov	r1, r5
 800539e:	f7fa ff17 	bl	80001d0 <__aeabi_dsub>
 80053a2:	4603      	mov	r3, r0
 80053a4:	460c      	mov	r4, r1
 80053a6:	4618      	mov	r0, r3
 80053a8:	4621      	mov	r1, r4
 80053aa:	f7fb fbc1 	bl	8000b30 <__aeabi_d2f>
 80053ae:	4602      	mov	r2, r0
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124

	return actualPressureSlow;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80053bc:	ee07 3a90 	vmov	s15, r3
}
 80053c0:	eeb0 0a67 	vmov.f32	s0, s15
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bdb0      	pop	{r4, r5, r7, pc}
 80053ca:	bf00      	nop
 80053cc:	3f7c28f6 	.word	0x3f7c28f6
 80053d0:	3c75c28f 	.word	0x3c75c28f
 80053d4:	40180000 	.word	0x40180000

080053d8 <_ZN9Barometer23CalculateLongtermChangeEv>:
void Barometer::CalculateLongtermChange()
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
	//In the following part a rotating buffer is used to calculate the long term change between the various pressure measurements.
	//This total value can be used to detect the direction (up/down) and speed of the quadcopter and functions as the D-controller of the total PID-controller.
	if (manualAltitudeChange == 1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d109      	bne.n	80053fe <_ZN9Barometer23CalculateLongtermChangeEv+0x26>
	{
		pressureParachutePrevious = actualPressure * 10;                       								//During manual altitude change the up/down detection is disabled.
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	edd3 7a48 	vldr	s15, [r3, #288]	; 0x120
 80053f0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80053f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	edc3 7a71 	vstr	s15, [r3, #452]	; 0x1c4
	}
	parachuteThrottle -= parachuteBuffer[parachuteRotatingMemLocation];                                  	//Subtract the current memory position to make room for the new value.
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	334c      	adds	r3, #76	; 0x4c
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	440b      	add	r3, r1
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	1ad2      	subs	r2, r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
	parachuteBuffer[parachuteRotatingMemLocation] = actualPressure * 10 - pressureParachutePrevious;   		//Calculate the new change between the actual pressure and the previous measurement.
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	edd3 7a48 	vldr	s15, [r3, #288]	; 0x120
 8005422:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005426:	ee27 7a87 	vmul.f32	s14, s15, s14
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	edd3 7a71 	vldr	s15, [r3, #452]	; 0x1c4
 8005430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 800543a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800543e:	ee17 1a90 	vmov	r1, s15
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	334c      	adds	r3, #76	; 0x4c
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	6059      	str	r1, [r3, #4]
	parachuteThrottle += parachuteBuffer[parachuteRotatingMemLocation];                                  	//Add the new value to the long term avarage value.
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 8005458:	6879      	ldr	r1, [r7, #4]
 800545a:	334c      	adds	r3, #76	; 0x4c
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	440b      	add	r3, r1
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	441a      	add	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
	pressureParachutePrevious = actualPressure * 10;                                                      	 //Store the current measurement for the next loop.
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	edd3 7a48 	vldr	s15, [r3, #288]	; 0x120
 8005470:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005474:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	edc3 7a71 	vstr	s15, [r3, #452]	; 0x1c4
	parachuteRotatingMemLocation++;                                                                        	//Increase the rotating memory location.
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 8005484:	3301      	adds	r3, #1
 8005486:	b2da      	uxtb	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
	if (parachuteRotatingMemLocation == 30)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 3133 	ldrb.w	r3, [r3, #307]	; 0x133
 8005494:	2b1e      	cmp	r3, #30
 8005496:	d103      	bne.n	80054a0 <_ZN9Barometer23CalculateLongtermChangeEv+0xc8>
	{
		parachuteRotatingMemLocation = 0;                            //Start at 0 when the memory location 20 is reached.
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
	}
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <_ZN9Barometer20GetPidOutputAltitudeEv>:

float Barometer::GetPidOutputAltitude()
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
	return this->pidOutputAltitude;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80054ba:	ee07 3a90 	vmov	s15, r3
}
 80054be:	eeb0 0a67 	vmov.f32	s0, s15
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <_ZN9Barometer17GetActualPressureEv>:
float Barometer::GetActualPressure()
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
	return this->actualPressure;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80054da:	ee07 3a90 	vmov	s15, r3
}
 80054de:	eeb0 0a67 	vmov.f32	s0, s15
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <_ZN9Barometer25Set_PID_altitude_setpointEf>:

void Barometer::Set_PID_altitude_setpoint(float thePidAltitudeSetpoint)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	ed87 0a00 	vstr	s0, [r7]
	this->pidAltitudeSetpoint = thePidAltitudeSetpoint;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <_ZN9Barometer17GetManualThrottleEv>:

int16_t Barometer::GetManualThrottle()
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
	return this->manualThrottle;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f9b3 3130 	ldrsh.w	r3, [r3, #304]	; 0x130
}
 800551a:	4618      	mov	r0, r3
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
	...

08005528 <_ZN9Barometer20CalculateAltitudePIDEs>:

void Barometer::CalculateAltitudePID(int16_t theThrottle)
{
 8005528:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800552c:	b082      	sub	sp, #8
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	460b      	mov	r3, r1
 8005534:	807b      	strh	r3, [r7, #2]
	if (pidAltitudeSetpoint == 0)  pidAltitudeSetpoint = actualPressure;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 800553c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005544:	d105      	bne.n	8005552 <_ZN9Barometer20CalculateAltitudePIDEs+0x2a>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

	manualAltitudeChange = 0;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	manualThrottle = 0;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
	if (theThrottle > 1600) {
 8005562:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005566:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800556a:	dd16      	ble.n	800559a <_ZN9Barometer20CalculateAltitudePIDEs+0x72>
		manualAltitudeChange = 1;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		pidAltitudeSetpoint = actualPressure;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
		manualThrottle = (theThrottle - 1600) / 3;
 8005580:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005584:	f5a3 63c8 	sub.w	r3, r3, #1600	; 0x640
 8005588:	4a9b      	ldr	r2, [pc, #620]	; (80057f8 <_ZN9Barometer20CalculateAltitudePIDEs+0x2d0>)
 800558a:	fb82 1203 	smull	r1, r2, r2, r3
 800558e:	17db      	asrs	r3, r3, #31
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	b21a      	sxth	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
	}
	if (theThrottle < 1400) {
 800559a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800559e:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80055a2:	da17      	bge.n	80055d4 <_ZN9Barometer20CalculateAltitudePIDEs+0xac>
		manualAltitudeChange = 1;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		pidAltitudeSetpoint = actualPressure;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
		manualThrottle = (theThrottle - 1400) / 5;
 80055b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80055bc:	f5a3 63af 	sub.w	r3, r3, #1400	; 0x578
 80055c0:	4a8e      	ldr	r2, [pc, #568]	; (80057fc <_ZN9Barometer20CalculateAltitudePIDEs+0x2d4>)
 80055c2:	fb82 1203 	smull	r1, r2, r2, r3
 80055c6:	1052      	asrs	r2, r2, #1
 80055c8:	17db      	asrs	r3, r3, #31
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	b21a      	sxth	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
	}

	pidAltitudeInput = actualPressure;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	pidErrorAltitudeTemp = pidAltitudeInput - pidAltitudeSetpoint;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	ed93 7a76 	vldr	s14, [r3, #472]	; 0x1d8
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 80055ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	edc3 7a73 	vstr	s15, [r3, #460]	; 0x1cc

	pidErrorGainAltitude = 0;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
	if (pidErrorAltitudeTemp > 10 || pidErrorAltitudeTemp < -10)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8005606:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800560a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800560e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005612:	dc09      	bgt.n	8005628 <_ZN9Barometer20CalculateAltitudePIDEs+0x100>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800561a:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800561e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005626:	d521      	bpl.n	800566c <_ZN9Barometer20CalculateAltitudePIDEs+0x144>
	{
		pidErrorGainAltitude = (abs(pidErrorAltitudeTemp) - 10) / 20.0;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800562e:	eeb0 0a67 	vmov.f32	s0, s15
 8005632:	f7fb ffcd 	bl	80015d0 <_ZSt3absf>
 8005636:	eeb0 7a40 	vmov.f32	s14, s0
 800563a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800563e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005642:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005646:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	edc3 7a72 	vstr	s15, [r3, #456]	; 0x1c8
		if (pidErrorGainAltitude > 3)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8005656:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800565a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800565e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005662:	dd03      	ble.n	800566c <_ZN9Barometer20CalculateAltitudePIDEs+0x144>
		{
			pidErrorGainAltitude = 3;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a66      	ldr	r2, [pc, #408]	; (8005800 <_ZN9Barometer20CalculateAltitudePIDEs+0x2d8>)
 8005668:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
		}
	}

	pid_Imem_Altitude += (pid_Igain_Altitude / 100.0) * pidErrorAltitudeTemp;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8005672:	4618      	mov	r0, r3
 8005674:	f7fa ff0c 	bl	8000490 <__aeabi_f2d>
 8005678:	4604      	mov	r4, r0
 800567a:	460d      	mov	r5, r1
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005682:	4618      	mov	r0, r3
 8005684:	f7fa ff04 	bl	8000490 <__aeabi_f2d>
 8005688:	f04f 0200 	mov.w	r2, #0
 800568c:	4b5d      	ldr	r3, [pc, #372]	; (8005804 <_ZN9Barometer20CalculateAltitudePIDEs+0x2dc>)
 800568e:	f7fb f881 	bl	8000794 <__aeabi_ddiv>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	4690      	mov	r8, r2
 8005698:	4699      	mov	r9, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fa fef5 	bl	8000490 <__aeabi_f2d>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	4640      	mov	r0, r8
 80056ac:	4649      	mov	r1, r9
 80056ae:	f7fa ff47 	bl	8000540 <__aeabi_dmul>
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	4620      	mov	r0, r4
 80056b8:	4629      	mov	r1, r5
 80056ba:	f7fa fd8b 	bl	80001d4 <__adddf3>
 80056be:	4603      	mov	r3, r0
 80056c0:	460c      	mov	r4, r1
 80056c2:	4618      	mov	r0, r3
 80056c4:	4621      	mov	r1, r4
 80056c6:	f7fb fa33 	bl	8000b30 <__aeabi_d2f>
 80056ca:	4602      	mov	r2, r0
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	if (pid_Imem_Altitude > pidMaxAltitude)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	ed93 7a74 	vldr	s14, [r3, #464]	; 0x1d0
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ee:	dd0a      	ble.n	8005706 <_ZN9Barometer20CalculateAltitudePIDEs+0x1de>
	{
		pid_Imem_Altitude = pidMaxAltitude;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	edc3 7a74 	vstr	s15, [r3, #464]	; 0x1d0
 8005704:	e01a      	b.n	800573c <_ZN9Barometer20CalculateAltitudePIDEs+0x214>
	}
	else if (pid_Imem_Altitude < pidMaxAltitude * -1)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	ed93 7a74 	vldr	s14, [r3, #464]	; 0x1d0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 8005712:	425b      	negs	r3, r3
 8005714:	ee07 3a90 	vmov	s15, r3
 8005718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800571c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005724:	d50a      	bpl.n	800573c <_ZN9Barometer20CalculateAltitudePIDEs+0x214>
	{
		pid_Imem_Altitude = pidMaxAltitude * -1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 800572c:	425b      	negs	r3, r3
 800572e:	ee07 3a90 	vmov	s15, r3
 8005732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	edc3 7a74 	vstr	s15, [r3, #464]	; 0x1d0
	}
	pidOutputAltitude = (pid_Pgain_Altitude + pidErrorGainAltitude) * pidErrorAltitudeTemp + pid_Imem_Altitude + pid_Dgain_Altitude * parachuteThrottle;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	ed93 7a79 	vldr	s14, [r3, #484]	; 0x1e4
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	edd3 7a72 	vldr	s15, [r3, #456]	; 0x1c8
 8005748:	ee37 7a27 	vadd.f32	s14, s14, s15
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 8005752:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 800575c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	edd3 6a7b 	vldr	s13, [r3, #492]	; 0x1ec
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800576c:	ee07 3a90 	vmov	s15, r3
 8005770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	edc3 7a77 	vstr	s15, [r3, #476]	; 0x1dc
	if (pidOutputAltitude > pidMaxAltitude)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	ed93 7a77 	vldr	s14, [r3, #476]	; 0x1dc
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 800578e:	ee07 3a90 	vmov	s15, r3
 8005792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005796:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800579a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800579e:	dd0a      	ble.n	80057b6 <_ZN9Barometer20CalculateAltitudePIDEs+0x28e>
	{
		pidOutputAltitude = pidMaxAltitude;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 80057a6:	ee07 3a90 	vmov	s15, r3
 80057aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	edc3 7a77 	vstr	s15, [r3, #476]	; 0x1dc
	}
	else if (pidOutputAltitude < pidMaxAltitude * -1)
	{
		pidOutputAltitude = pidMaxAltitude * -1;
	}
}
 80057b4:	e01b      	b.n	80057ee <_ZN9Barometer20CalculateAltitudePIDEs+0x2c6>
	else if (pidOutputAltitude < pidMaxAltitude * -1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	ed93 7a77 	vldr	s14, [r3, #476]	; 0x1dc
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 80057c2:	425b      	negs	r3, r3
 80057c4:	ee07 3a90 	vmov	s15, r3
 80057c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d4:	d400      	bmi.n	80057d8 <_ZN9Barometer20CalculateAltitudePIDEs+0x2b0>
}
 80057d6:	e00a      	b.n	80057ee <_ZN9Barometer20CalculateAltitudePIDEs+0x2c6>
		pidOutputAltitude = pidMaxAltitude * -1;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 80057de:	425b      	negs	r3, r3
 80057e0:	ee07 3a90 	vmov	s15, r3
 80057e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	edc3 7a77 	vstr	s15, [r3, #476]	; 0x1dc
}
 80057ee:	bf00      	nop
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80057f8:	55555556 	.word	0x55555556
 80057fc:	66666667 	.word	0x66666667
 8005800:	40400000 	.word	0x40400000
 8005804:	40590000 	.word	0x40590000

08005808 <_ZN9Barometer16ResetValuesOfPIDEv>:

void Barometer::ResetValuesOfPID()
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
	pidAltitudeSetpoint = 0;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	pidOutputAltitude = 0;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f04f 0200 	mov.w	r2, #0
 8005820:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	pid_Imem_Altitude = 0;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f04f 0200 	mov.w	r2, #0
 800582a:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	manualThrottle = 0;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
	manualAltitudeChange = 1;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
}
 800583e:	bf00      	nop
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <_ZN9Barometer11SetKgainPIDEfffs>:

void Barometer::SetKgainPID(float thePgain,float theIgain, float theDgain, int16_t theMaxPID)
{
 800584a:	b480      	push	{r7}
 800584c:	b087      	sub	sp, #28
 800584e:	af00      	add	r7, sp, #0
 8005850:	6178      	str	r0, [r7, #20]
 8005852:	ed87 0a04 	vstr	s0, [r7, #16]
 8005856:	edc7 0a03 	vstr	s1, [r7, #12]
 800585a:	ed87 1a02 	vstr	s2, [r7, #8]
 800585e:	460b      	mov	r3, r1
 8005860:	80fb      	strh	r3, [r7, #6]
	this->pid_Pgain_Altitude = thePgain;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	this->pid_Igain_Altitude = theIgain;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	this->pid_Dgain_Altitude = theDgain;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	this->pidMaxAltitude = theMaxPID;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	88fa      	ldrh	r2, [r7, #6]
 800587e:	f8a3 21f0 	strh.w	r2, [r3, #496]	; 0x1f0
}
 8005882:	bf00      	nop
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <_ZN9Barometer28ReadAndCalculatePIDBarometerEhht>:
void Barometer::ReadAndCalculatePIDBarometer(uint8_t theFlightMode, uint8_t theTakeoffDetected, uint16_t throttle )
{
 800588e:	b590      	push	{r4, r7, lr}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	4608      	mov	r0, r1
 8005898:	4611      	mov	r1, r2
 800589a:	461a      	mov	r2, r3
 800589c:	4603      	mov	r3, r0
 800589e:	70fb      	strb	r3, [r7, #3]
 80058a0:	460b      	mov	r3, r1
 80058a2:	70bb      	strb	r3, [r7, #2]
 80058a4:	4613      	mov	r3, r2
 80058a6:	803b      	strh	r3, [r7, #0]
	stageOfBarometer++;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058ae:	3301      	adds	r3, #1
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	if (stageOfBarometer == 1)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d129      	bne.n	8005916 <_ZN9Barometer28ReadAndCalculatePIDBarometerEhht+0x88>
	{
		if (stageOfTemperature == 0)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d106      	bne.n	80058da <_ZN9Barometer28ReadAndCalculatePIDBarometerEhht+0x4c>
		{
			rawTemperature = GetAverageTemperature();
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff fac9 	bl	8004e64 <_ZN9Barometer21GetAverageTemperatureEv>
 80058d2:	4602      	mov	r2, r0
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	621a      	str	r2, [r3, #32]
 80058d8:	e005      	b.n	80058e6 <_ZN9Barometer28ReadAndCalculatePIDBarometerEhht+0x58>
		}
		else
		{
			rawPressure = GetDataFromPreviousRequest();
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7ff fa7b 	bl	8004dd6 <_ZN9Barometer26GetDataFromPreviousRequestEv>
 80058e0:	4602      	mov	r2, r0
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	625a      	str	r2, [r3, #36]	; 0x24
		}

		stageOfTemperature++;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80058ec:	3301      	adds	r3, #1
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

		if(stageOfTemperature == 20)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80058fc:	2b14      	cmp	r3, #20
 80058fe:	d107      	bne.n	8005910 <_ZN9Barometer28ReadAndCalculatePIDBarometerEhht+0x82>
		{
			stageOfTemperature = 0;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			RequestGetTemperatureData();
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7ff faf5 	bl	8004ef8 <_ZN9Barometer25RequestGetTemperatureDataEv>
 800590e:	e002      	b.n	8005916 <_ZN9Barometer28ReadAndCalculatePIDBarometerEhht+0x88>
		}
		else
		{
			RequestGetPressureData();
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7ff fb05 	bl	8004f20 <_ZN9Barometer22RequestGetPressureDataEv>
		}
	}

	if (stageOfBarometer == 2)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800591c:	2b02      	cmp	r3, #2
 800591e:	d117      	bne.n	8005950 <_ZN9Barometer28ReadAndCalculatePIDBarometerEhht+0xc2>
	{
		compensatedPressure = CompensatePressure();
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7ff fb11 	bl	8004f48 <_ZN9Barometer18CompensatePressureEv>
 8005926:	4603      	mov	r3, r0
 8005928:	460c      	mov	r4, r1
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
		actualPressureFast = GetAveragePressure();
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7ff fc77 	bl	8005224 <_ZN9Barometer18GetAveragePressureEv>
 8005936:	eef0 7a40 	vmov.f32	s15, s0
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	edc3 7a4a 	vstr	s15, [r3, #296]	; 0x128
		actualPressure = UseComplementaryFilter();
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7ff fcc1 	bl	80052c8 <_ZN9Barometer22UseComplementaryFilterEv>
 8005946:	eef0 7a40 	vmov.f32	s15, s0
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	edc3 7a48 	vstr	s15, [r3, #288]	; 0x120
	}

	if (stageOfBarometer == 3)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005956:	2b03      	cmp	r3, #3
 8005958:	d121      	bne.n	800599e <_ZN9Barometer28ReadAndCalculatePIDBarometerEhht+0x110>
	{
		stageOfBarometer = 0;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		CalculateLongtermChange();
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff fd38 	bl	80053d8 <_ZN9Barometer23CalculateLongtermChangeEv>
		if (theFlightMode >= 2 && theTakeoffDetected ==1)
 8005968:	78fb      	ldrb	r3, [r7, #3]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d909      	bls.n	8005982 <_ZN9Barometer28ReadAndCalculatePIDBarometerEhht+0xf4>
 800596e:	78bb      	ldrb	r3, [r7, #2]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d106      	bne.n	8005982 <_ZN9Barometer28ReadAndCalculatePIDBarometerEhht+0xf4>
		{
			CalculateAltitudePID(throttle);
 8005974:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005978:	4619      	mov	r1, r3
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7ff fdd4 	bl	8005528 <_ZN9Barometer20CalculateAltitudePIDEs>
		else if (theFlightMode < 2 && pidAltitudeSetpoint != 0)
		{
			ResetValuesOfPID();
		}
	}
}
 8005980:	e00d      	b.n	800599e <_ZN9Barometer28ReadAndCalculatePIDBarometerEhht+0x110>
		else if (theFlightMode < 2 && pidAltitudeSetpoint != 0)
 8005982:	78fb      	ldrb	r3, [r7, #3]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d80a      	bhi.n	800599e <_ZN9Barometer28ReadAndCalculatePIDBarometerEhht+0x110>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 800598e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005996:	d002      	beq.n	800599e <_ZN9Barometer28ReadAndCalculatePIDBarometerEhht+0x110>
			ResetValuesOfPID();
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7ff ff35 	bl	8005808 <_ZN9Barometer16ResetValuesOfPIDEv>
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd90      	pop	{r4, r7, pc}
	...

080059a8 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80059ac:	4b14      	ldr	r3, [pc, #80]	; (8005a00 <DWT_Delay_Init+0x58>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	4a13      	ldr	r2, [pc, #76]	; (8005a00 <DWT_Delay_Init+0x58>)
 80059b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059b6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80059b8:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <DWT_Delay_Init+0x58>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	4a10      	ldr	r2, [pc, #64]	; (8005a00 <DWT_Delay_Init+0x58>)
 80059be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059c2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80059c4:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <DWT_Delay_Init+0x5c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a0e      	ldr	r2, [pc, #56]	; (8005a04 <DWT_Delay_Init+0x5c>)
 80059ca:	f023 0301 	bic.w	r3, r3, #1
 80059ce:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80059d0:	4b0c      	ldr	r3, [pc, #48]	; (8005a04 <DWT_Delay_Init+0x5c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a0b      	ldr	r2, [pc, #44]	; (8005a04 <DWT_Delay_Init+0x5c>)
 80059d6:	f043 0301 	orr.w	r3, r3, #1
 80059da:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80059dc:	4b09      	ldr	r3, [pc, #36]	; (8005a04 <DWT_Delay_Init+0x5c>)
 80059de:	2200      	movs	r2, #0
 80059e0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80059e2:	bf00      	nop
     __ASM volatile ("NOP");
 80059e4:	bf00      	nop
  __ASM volatile ("NOP");
 80059e6:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80059e8:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <DWT_Delay_Init+0x5c>)
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80059f0:	2300      	movs	r3, #0
 80059f2:	e000      	b.n	80059f6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80059f4:	2301      	movs	r3, #1
  }
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	e000edf0 	.word	0xe000edf0
 8005a04:	e0001000 	.word	0xe0001000

08005a08 <MyFlash_EraseSector>:
static uint8_t sectorNum;

//functions definitions
//1. Erase Sector
void MyFlash_EraseSector(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8005a0c:	f003 fbb6 	bl	800917c <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(sectorNum, FLASH_VOLTAGE_RANGE_3);
 8005a10:	4b04      	ldr	r3, [pc, #16]	; (8005a24 <MyFlash_EraseSector+0x1c>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	2102      	movs	r1, #2
 8005a16:	4618      	mov	r0, r3
 8005a18:	f003 fd10 	bl	800943c <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8005a1c:	f003 fbd0 	bl	80091c0 <HAL_FLASH_Lock>
}
 8005a20:	bf00      	nop
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	20000300 	.word	0x20000300

08005a28 <MyFlash_SetSectorAddrs>:

//2. Set Sector Adress
void MyFlash_SetSectorAddrs(uint8_t sector, uint32_t addrs)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	6039      	str	r1, [r7, #0]
 8005a32:	71fb      	strb	r3, [r7, #7]
	sectorNum = sector;
 8005a34:	4a05      	ldr	r2, [pc, #20]	; (8005a4c <MyFlash_SetSectorAddrs+0x24>)
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	7013      	strb	r3, [r2, #0]
	sectorAddrs = addrs;
 8005a3a:	4a05      	ldr	r2, [pc, #20]	; (8005a50 <MyFlash_SetSectorAddrs+0x28>)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	6013      	str	r3, [r2, #0]
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	20000300 	.word	0x20000300
 8005a50:	200002fc 	.word	0x200002fc

08005a54 <MyFlash_WriteN>:

//3. Write Flash
void MyFlash_WriteN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType)
{
 8005a54:	b590      	push	{r4, r7, lr}
 8005a56:	b089      	sub	sp, #36	; 0x24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
 8005a60:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = sectorAddrs + idx;
 8005a62:	4b34      	ldr	r3, [pc, #208]	; (8005b34 <MyFlash_WriteN+0xe0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4413      	add	r3, r2
 8005a6a:	61fb      	str	r3, [r7, #28]
	
	//Erase sector before write
	MyFlash_EraseSector();
 8005a6c:	f7ff ffcc 	bl	8005a08 <MyFlash_EraseSector>
	
	//Unlock Flash
	HAL_FLASH_Unlock();
 8005a70:	f003 fb84 	bl	800917c <HAL_FLASH_Unlock>
	//Write to Flash
	switch(dataType)
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d01e      	beq.n	8005ab8 <MyFlash_WriteN+0x64>
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d038      	beq.n	8005af0 <MyFlash_WriteN+0x9c>
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d151      	bne.n	8005b26 <MyFlash_WriteN+0xd2>
	{
		case DATA_TYPE_8:
				for(uint32_t i=0; i<Nsize; i++)
 8005a82:	2300      	movs	r3, #0
 8005a84:	61bb      	str	r3, [r7, #24]
 8005a86:	e012      	b.n	8005aae <MyFlash_WriteN+0x5a>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)wrBuf)[i]);
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	f04f 0400 	mov.w	r4, #0
 8005a96:	461a      	mov	r2, r3
 8005a98:	4623      	mov	r3, r4
 8005a9a:	69f9      	ldr	r1, [r7, #28]
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	f003 fb19 	bl	80090d4 <HAL_FLASH_Program>
					flashAddress++;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	61bb      	str	r3, [r7, #24]
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d3e8      	bcc.n	8005a88 <MyFlash_WriteN+0x34>
				}
			break;
 8005ab6:	e036      	b.n	8005b26 <MyFlash_WriteN+0xd2>
		
		case DATA_TYPE_16:
				for(uint32_t i=0; i<Nsize; i++)
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	e013      	b.n	8005ae6 <MyFlash_WriteN+0x92>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ((uint16_t *)wrBuf)[i]);
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	f04f 0400 	mov.w	r4, #0
 8005ace:	461a      	mov	r2, r3
 8005ad0:	4623      	mov	r3, r4
 8005ad2:	69f9      	ldr	r1, [r7, #28]
 8005ad4:	2001      	movs	r0, #1
 8005ad6:	f003 fafd 	bl	80090d4 <HAL_FLASH_Program>
					flashAddress+=2;
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	3302      	adds	r3, #2
 8005ade:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d3e7      	bcc.n	8005abe <MyFlash_WriteN+0x6a>
				}
			break;
 8005aee:	e01a      	b.n	8005b26 <MyFlash_WriteN+0xd2>
		
		case DATA_TYPE_32:
				for(uint32_t i=0; i<Nsize; i++)
 8005af0:	2300      	movs	r3, #0
 8005af2:	613b      	str	r3, [r7, #16]
 8005af4:	e012      	b.n	8005b1c <MyFlash_WriteN+0xc8>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	4413      	add	r3, r2
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f04f 0400 	mov.w	r4, #0
 8005b04:	461a      	mov	r2, r3
 8005b06:	4623      	mov	r3, r4
 8005b08:	69f9      	ldr	r1, [r7, #28]
 8005b0a:	2002      	movs	r0, #2
 8005b0c:	f003 fae2 	bl	80090d4 <HAL_FLASH_Program>
					flashAddress+=4;
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	3304      	adds	r3, #4
 8005b14:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	613b      	str	r3, [r7, #16]
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d3e8      	bcc.n	8005af6 <MyFlash_WriteN+0xa2>
				}
			break;
 8005b24:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 8005b26:	f003 fb4b 	bl	80091c0 <HAL_FLASH_Lock>
}
 8005b2a:	bf00      	nop
 8005b2c:	3724      	adds	r7, #36	; 0x24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd90      	pop	{r4, r7, pc}
 8005b32:	bf00      	nop
 8005b34:	200002fc 	.word	0x200002fc

08005b38 <MyFlash_ReadN>:
//4. Read Flash
void MyFlash_ReadN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b089      	sub	sp, #36	; 0x24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = sectorAddrs + idx;
 8005b46:	4b28      	ldr	r3, [pc, #160]	; (8005be8 <MyFlash_ReadN+0xb0>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	61fb      	str	r3, [r7, #28]
	
	switch(dataType)
 8005b50:	78fb      	ldrb	r3, [r7, #3]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d018      	beq.n	8005b88 <MyFlash_ReadN+0x50>
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d02b      	beq.n	8005bb2 <MyFlash_ReadN+0x7a>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d000      	beq.n	8005b60 <MyFlash_ReadN+0x28>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
					flashAddress+=4;
				}
			break;
	}
}
 8005b5e:	e03d      	b.n	8005bdc <MyFlash_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 8005b60:	2300      	movs	r3, #0
 8005b62:	61bb      	str	r3, [r7, #24]
 8005b64:	e00b      	b.n	8005b7e <MyFlash_ReadN+0x46>
					*((uint8_t *)rdBuf + i) = *(uint8_t *)flashAddress;
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	68b9      	ldr	r1, [r7, #8]
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	440b      	add	r3, r1
 8005b6e:	7812      	ldrb	r2, [r2, #0]
 8005b70:	701a      	strb	r2, [r3, #0]
					flashAddress++;
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	3301      	adds	r3, #1
 8005b76:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d3ef      	bcc.n	8005b66 <MyFlash_ReadN+0x2e>
			break;
 8005b86:	e029      	b.n	8005bdc <MyFlash_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 8005b88:	2300      	movs	r3, #0
 8005b8a:	617b      	str	r3, [r7, #20]
 8005b8c:	e00c      	b.n	8005ba8 <MyFlash_ReadN+0x70>
					*((uint16_t *)rdBuf + i) = *(uint16_t *)flashAddress;
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	68b9      	ldr	r1, [r7, #8]
 8005b96:	440b      	add	r3, r1
 8005b98:	8812      	ldrh	r2, [r2, #0]
 8005b9a:	801a      	strh	r2, [r3, #0]
					flashAddress+=2;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	3302      	adds	r3, #2
 8005ba0:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d3ee      	bcc.n	8005b8e <MyFlash_ReadN+0x56>
			break;
 8005bb0:	e014      	b.n	8005bdc <MyFlash_ReadN+0xa4>
				for(uint32_t i=0; i<Nsize; i++)
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	613b      	str	r3, [r7, #16]
 8005bb6:	e00c      	b.n	8005bd2 <MyFlash_ReadN+0x9a>
					*((uint32_t *)rdBuf + i) = *(uint32_t *)flashAddress;
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	440b      	add	r3, r1
 8005bc2:	6812      	ldr	r2, [r2, #0]
 8005bc4:	601a      	str	r2, [r3, #0]
					flashAddress+=4;
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	3304      	adds	r3, #4
 8005bca:	61fb      	str	r3, [r7, #28]
				for(uint32_t i=0; i<Nsize; i++)
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	613b      	str	r3, [r7, #16]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d3ee      	bcc.n	8005bb8 <MyFlash_ReadN+0x80>
			break;
 8005bda:	bf00      	nop
}
 8005bdc:	bf00      	nop
 8005bde:	3724      	adds	r7, #36	; 0x24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	200002fc 	.word	0x200002fc

08005bec <DWT_Delay_us>:
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8005bf4:	4b0f      	ldr	r3, [pc, #60]	; (8005c34 <DWT_Delay_us+0x48>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8005bfa:	f005 ffb9 	bl	800bb70 <HAL_RCC_GetHCLKFreq>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	4b0d      	ldr	r3, [pc, #52]	; (8005c38 <DWT_Delay_us+0x4c>)
 8005c02:	fba3 2302 	umull	r2, r3, r3, r2
 8005c06:	0c9b      	lsrs	r3, r3, #18
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	fb02 f303 	mul.w	r3, r2, r3
 8005c0e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8005c10:	4b08      	ldr	r3, [pc, #32]	; (8005c34 <DWT_Delay_us+0x48>)
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	1ad2      	subs	r2, r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	bf34      	ite	cc
 8005c1e:	2301      	movcc	r3, #1
 8005c20:	2300      	movcs	r3, #0
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d000      	beq.n	8005c2a <DWT_Delay_us+0x3e>
 8005c28:	e7f2      	b.n	8005c10 <DWT_Delay_us+0x24>
}
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	e0001000 	.word	0xe0001000
 8005c38:	431bde83 	.word	0x431bde83

08005c3c <_Z23ReceiveDataFromNRF24L01v>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ReceiveDataFromNRF24L01()
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
	// bấm BTN5 thì headingLock =1
	// bấm nút BTN1 , flightMode = 2, Bấm BTN6 thì FlightMode =3;
	if(isDataAvailable(2)==1)
 8005c40:	2002      	movs	r0, #2
 8005c42:	f7fc fd25 	bl	8002690 <isDataAvailable>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	bf0c      	ite	eq
 8005c4c:	2301      	moveq	r3, #1
 8005c4e:	2300      	movne	r3, #0
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 8089 	beq.w	8005d6a <_Z23ReceiveDataFromNRF24L01v+0x12e>
	  {
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8005c58:	2201      	movs	r2, #1
 8005c5a:	2110      	movs	r1, #16
 8005c5c:	4846      	ldr	r0, [pc, #280]	; (8005d78 <_Z23ReceiveDataFromNRF24L01v+0x13c>)
 8005c5e:	f003 fdcf 	bl	8009800 <HAL_GPIO_WritePin>
		NRF24_Receive(RxData);
 8005c62:	4846      	ldr	r0, [pc, #280]	; (8005d7c <_Z23ReceiveDataFromNRF24L01v+0x140>)
 8005c64:	f7fc fd34 	bl	80026d0 <NRF24_Receive>

		if(RxData[0]==1) //  Trái Lên  / Nâng �?ộ Cao
 8005c68:	4b44      	ldr	r3, [pc, #272]	; (8005d7c <_Z23ReceiveDataFromNRF24L01v+0x140>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d10f      	bne.n	8005c90 <_Z23ReceiveDataFromNRF24L01v+0x54>
		{
			throttle =throttle + 1;
 8005c70:	4b43      	ldr	r3, [pc, #268]	; (8005d80 <_Z23ReceiveDataFromNRF24L01v+0x144>)
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	3301      	adds	r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	4b41      	ldr	r3, [pc, #260]	; (8005d80 <_Z23ReceiveDataFromNRF24L01v+0x144>)
 8005c7a:	801a      	strh	r2, [r3, #0]
			if(throttle > 2000)  throttle = 2000;
 8005c7c:	4b40      	ldr	r3, [pc, #256]	; (8005d80 <_Z23ReceiveDataFromNRF24L01v+0x144>)
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005c84:	d917      	bls.n	8005cb6 <_Z23ReceiveDataFromNRF24L01v+0x7a>
 8005c86:	4b3e      	ldr	r3, [pc, #248]	; (8005d80 <_Z23ReceiveDataFromNRF24L01v+0x144>)
 8005c88:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005c8c:	801a      	strh	r2, [r3, #0]
 8005c8e:	e012      	b.n	8005cb6 <_Z23ReceiveDataFromNRF24L01v+0x7a>
		}
	    else if(RxData[0]==0) // Trái Xuống / Hạ �?ộ Cao
 8005c90:	4b3a      	ldr	r3, [pc, #232]	; (8005d7c <_Z23ReceiveDataFromNRF24L01v+0x140>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10e      	bne.n	8005cb6 <_Z23ReceiveDataFromNRF24L01v+0x7a>
	    {
	    	throttle =throttle - 1;
 8005c98:	4b39      	ldr	r3, [pc, #228]	; (8005d80 <_Z23ReceiveDataFromNRF24L01v+0x144>)
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	4b37      	ldr	r3, [pc, #220]	; (8005d80 <_Z23ReceiveDataFromNRF24L01v+0x144>)
 8005ca2:	801a      	strh	r2, [r3, #0]
			if(throttle < 1000)  throttle = 1000;
 8005ca4:	4b36      	ldr	r3, [pc, #216]	; (8005d80 <_Z23ReceiveDataFromNRF24L01v+0x144>)
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cac:	d203      	bcs.n	8005cb6 <_Z23ReceiveDataFromNRF24L01v+0x7a>
 8005cae:	4b34      	ldr	r3, [pc, #208]	; (8005d80 <_Z23ReceiveDataFromNRF24L01v+0x144>)
 8005cb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005cb4:	801a      	strh	r2, [r3, #0]
	    }

		yaw = RxData[1]*100 + RxData[2];
 8005cb6:	4b31      	ldr	r3, [pc, #196]	; (8005d7c <_Z23ReceiveDataFromNRF24L01v+0x140>)
 8005cb8:	785b      	ldrb	r3, [r3, #1]
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	0092      	lsls	r2, r2, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	0091      	lsls	r1, r2, #2
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	4b2a      	ldr	r3, [pc, #168]	; (8005d7c <_Z23ReceiveDataFromNRF24L01v+0x140>)
 8005cd2:	789b      	ldrb	r3, [r3, #2]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	4413      	add	r3, r2
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	4b2a      	ldr	r3, [pc, #168]	; (8005d84 <_Z23ReceiveDataFromNRF24L01v+0x148>)
 8005cdc:	801a      	strh	r2, [r3, #0]
		roll = RxData[3]*100 + RxData[4];
 8005cde:	4b27      	ldr	r3, [pc, #156]	; (8005d7c <_Z23ReceiveDataFromNRF24L01v+0x140>)
 8005ce0:	78db      	ldrb	r3, [r3, #3]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	0092      	lsls	r2, r2, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	461a      	mov	r2, r3
 8005cec:	0091      	lsls	r1, r2, #2
 8005cee:	461a      	mov	r2, r3
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	4b20      	ldr	r3, [pc, #128]	; (8005d7c <_Z23ReceiveDataFromNRF24L01v+0x140>)
 8005cfa:	791b      	ldrb	r3, [r3, #4]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	4413      	add	r3, r2
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	4b21      	ldr	r3, [pc, #132]	; (8005d88 <_Z23ReceiveDataFromNRF24L01v+0x14c>)
 8005d04:	801a      	strh	r2, [r3, #0]
		pitch = RxData[5]*100 + RxData[6];
 8005d06:	4b1d      	ldr	r3, [pc, #116]	; (8005d7c <_Z23ReceiveDataFromNRF24L01v+0x140>)
 8005d08:	795b      	ldrb	r3, [r3, #5]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	0092      	lsls	r2, r2, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	461a      	mov	r2, r3
 8005d14:	0091      	lsls	r1, r2, #2
 8005d16:	461a      	mov	r2, r3
 8005d18:	460b      	mov	r3, r1
 8005d1a:	4413      	add	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <_Z23ReceiveDataFromNRF24L01v+0x140>)
 8005d22:	799b      	ldrb	r3, [r3, #6]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	4413      	add	r3, r2
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	4b18      	ldr	r3, [pc, #96]	; (8005d8c <_Z23ReceiveDataFromNRF24L01v+0x150>)
 8005d2c:	801a      	strh	r2, [r3, #0]
		flightMode = RxData[7];
 8005d2e:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <_Z23ReceiveDataFromNRF24L01v+0x140>)
 8005d30:	79da      	ldrb	r2, [r3, #7]
 8005d32:	4b17      	ldr	r3, [pc, #92]	; (8005d90 <_Z23ReceiveDataFromNRF24L01v+0x154>)
 8005d34:	701a      	strb	r2, [r3, #0]
		BTNFlightMode = RxData[7];
 8005d36:	4b11      	ldr	r3, [pc, #68]	; (8005d7c <_Z23ReceiveDataFromNRF24L01v+0x140>)
 8005d38:	79db      	ldrb	r3, [r3, #7]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	4b15      	ldr	r3, [pc, #84]	; (8005d94 <_Z23ReceiveDataFromNRF24L01v+0x158>)
 8005d3e:	601a      	str	r2, [r3, #0]
		BTN2 = RxData[8];
 8005d40:	4b0e      	ldr	r3, [pc, #56]	; (8005d7c <_Z23ReceiveDataFromNRF24L01v+0x140>)
 8005d42:	7a1b      	ldrb	r3, [r3, #8]
 8005d44:	461a      	mov	r2, r3
 8005d46:	4b14      	ldr	r3, [pc, #80]	; (8005d98 <_Z23ReceiveDataFromNRF24L01v+0x15c>)
 8005d48:	601a      	str	r2, [r3, #0]
		BTN3 = RxData[9];
 8005d4a:	4b0c      	ldr	r3, [pc, #48]	; (8005d7c <_Z23ReceiveDataFromNRF24L01v+0x140>)
 8005d4c:	7a5b      	ldrb	r3, [r3, #9]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	4b12      	ldr	r3, [pc, #72]	; (8005d9c <_Z23ReceiveDataFromNRF24L01v+0x160>)
 8005d52:	601a      	str	r2, [r3, #0]
		BTN4 = RxData[10];
 8005d54:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <_Z23ReceiveDataFromNRF24L01v+0x140>)
 8005d56:	7a9b      	ldrb	r3, [r3, #10]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4b11      	ldr	r3, [pc, #68]	; (8005da0 <_Z23ReceiveDataFromNRF24L01v+0x164>)
 8005d5c:	601a      	str	r2, [r3, #0]
		BTN5 = RxData[11];
 8005d5e:	4b07      	ldr	r3, [pc, #28]	; (8005d7c <_Z23ReceiveDataFromNRF24L01v+0x140>)
 8005d60:	7adb      	ldrb	r3, [r3, #11]
 8005d62:	461a      	mov	r2, r3
 8005d64:	4b0f      	ldr	r3, [pc, #60]	; (8005da4 <_Z23ReceiveDataFromNRF24L01v+0x168>)
 8005d66:	601a      	str	r2, [r3, #0]
	  }
	else
	{
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
	}
}
 8005d68:	e004      	b.n	8005d74 <_Z23ReceiveDataFromNRF24L01v+0x138>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2110      	movs	r1, #16
 8005d6e:	4802      	ldr	r0, [pc, #8]	; (8005d78 <_Z23ReceiveDataFromNRF24L01v+0x13c>)
 8005d70:	f003 fd46 	bl	8009800 <HAL_GPIO_WritePin>
}
 8005d74:	bf00      	nop
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	40021000 	.word	0x40021000
 8005d7c:	2000062c 	.word	0x2000062c
 8005d80:	20000006 	.word	0x20000006
 8005d84:	20000660 	.word	0x20000660
 8005d88:	2000065c 	.word	0x2000065c
 8005d8c:	2000065e 	.word	0x2000065e
 8005d90:	20000662 	.word	0x20000662
 8005d94:	20000680 	.word	0x20000680
 8005d98:	20000674 	.word	0x20000674
 8005d9c:	20000670 	.word	0x20000670
 8005da0:	2000066c 	.word	0x2000066c
 8005da4:	20000668 	.word	0x20000668

08005da8 <_Z18ReadDataFromBMP180v>:
void ReadDataFromBMP180()
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
	 Altitude = BMP180_GetAlt(0);
 8005dae:	2000      	movs	r0, #0
 8005db0:	f7fb fbba 	bl	8001528 <BMP180_GetAlt>
 8005db4:	eef0 7a40 	vmov.f32	s15, s0
 8005db8:	4b08      	ldr	r3, [pc, #32]	; (8005ddc <_Z18ReadDataFromBMP180v+0x34>)
 8005dba:	edc3 7a00 	vstr	s15, [r3]
	 DoCaoHienTai= Altitude;
 8005dbe:	4b07      	ldr	r3, [pc, #28]	; (8005ddc <_Z18ReadDataFromBMP180v+0x34>)
 8005dc0:	edd3 7a00 	vldr	s15, [r3]
 8005dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dc8:	edc7 7a01 	vstr	s15, [r7, #4]
 8005dcc:	793b      	ldrb	r3, [r7, #4]
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	4b03      	ldr	r3, [pc, #12]	; (8005de0 <_Z18ReadDataFromBMP180v+0x38>)
 8005dd2:	701a      	strb	r2, [r3, #0]
}
 8005dd4:	bf00      	nop
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	20000650 	.word	0x20000650
 8005de0:	2000064c 	.word	0x2000064c
 8005de4:	00000000 	.word	0x00000000

08005de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005de8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005dec:	ed2d 8b02 	vpush	{d8}
 8005df0:	b084      	sub	sp, #16
 8005df2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8005df4:	f002 fa5c 	bl	80082b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005df8:	f000 fcc6 	bl	8006788 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005dfc:	f001 f85e 	bl	8006ebc <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8005e00:	f001 f83c 	bl	8006e7c <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8005e04:	f000 fd90 	bl	8006928 <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 8005e08:	f000 fdf6 	bl	80069f8 <_ZL12MX_SPI1_Initv>
  MX_UART4_Init();
 8005e0c:	f000 ffac 	bl	8006d68 <_ZL13MX_UART4_Initv>
  MX_UART5_Init();
 8005e10:	f000 ffd8 	bl	8006dc4 <_ZL13MX_UART5_Initv>
  MX_USART1_UART_Init();
 8005e14:	f001 f804 	bl	8006e20 <_ZL19MX_USART1_UART_Initv>
  MX_TIM4_Init();
 8005e18:	f000 fee6 	bl	8006be8 <_ZL12MX_TIM4_Initv>
  MX_I2C2_Init();
 8005e1c:	f000 fdb8 	bl	8006990 <_ZL12MX_I2C2_Initv>
  MX_TIM2_Init();
 8005e20:	f000 fe86 	bl	8006b30 <_ZL12MX_TIM2_Initv>
  MX_ADC1_Init();
 8005e24:	f000 fd24 	bl	8006870 <_ZL12MX_ADC1_Initv>
  MX_TIM1_Init();
 8005e28:	f000 fe22 	bl	8006a70 <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */

  gy86.declination = -1.5;
 8005e2c:	4b74      	ldr	r3, [pc, #464]	; (8006000 <main+0x218>)
 8005e2e:	4a75      	ldr	r2, [pc, #468]	; (8006004 <main+0x21c>)
 8005e30:	615a      	str	r2, [r3, #20]
  DWT_Delay_Init();
 8005e32:	f7ff fdb9 	bl	80059a8 <DWT_Delay_Init>
  BMP180_Start();
 8005e36:	f7fb fbc5 	bl	80015c4 <BMP180_Start>
  // NRF24L01
  NRF24_Init();
 8005e3a:	f7fc fbc3 	bl	80025c4 <NRF24_Init>
  NRF24_RxMode(RxAddress, 10);
 8005e3e:	210a      	movs	r1, #10
 8005e40:	4871      	ldr	r0, [pc, #452]	; (8006008 <main+0x220>)
 8005e42:	f7fc fbe6 	bl	8002612 <NRF24_RxMode>
  HAL_Delay(50);  // Đợi 50ms de on dinh con NRF
 8005e46:	2032      	movs	r0, #50	; 0x32
 8005e48:	f002 faa4 	bl	8008394 <HAL_Delay>

  ms5611.SetKgainPID(1.4, 0.2, 0.75, 400);
 8005e4c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005e50:	eeb6 1a08 	vmov.f32	s2, #104	; 0x3f400000  0.750
 8005e54:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800600c <main+0x224>
 8005e58:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8006010 <main+0x228>
 8005e5c:	486d      	ldr	r0, [pc, #436]	; (8006014 <main+0x22c>)
 8005e5e:	f7ff fcf4 	bl	800584a <_ZN9Barometer11SetKgainPIDEfffs>
  gpsM8N.setKgainConstantRoll(2.7, 6.5);
 8005e62:	eef1 0a0a 	vmov.f32	s1, #26	; 0x40d00000  6.5
 8005e66:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 8006018 <main+0x230>
 8005e6a:	486c      	ldr	r0, [pc, #432]	; (800601c <main+0x234>)
 8005e6c:	f7fb fbd6 	bl	800161c <_ZN3GPS20setKgainConstantRollEff>
  pidForHorizontal.setKgainConstantRoll(1.4, 0.04 , 25, 400);
 8005e70:	eddf 1a6b 	vldr	s3, [pc, #428]	; 8006020 <main+0x238>
 8005e74:	eeb3 1a09 	vmov.f32	s2, #57	; 0x41c80000  25.0
 8005e78:	eddf 0a6a 	vldr	s1, [pc, #424]	; 8006024 <main+0x23c>
 8005e7c:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8006010 <main+0x228>
 8005e80:	4869      	ldr	r0, [pc, #420]	; (8006028 <main+0x240>)
 8005e82:	f7fe fc19 	bl	80046b8 <_ZN14PID_Horizontal20setKgainConstantRollEffff>
  pidForHorizontal.setKgainConstantPitch(1.4, 0.04, 25, 400);
 8005e86:	eddf 1a66 	vldr	s3, [pc, #408]	; 8006020 <main+0x238>
 8005e8a:	eeb3 1a09 	vmov.f32	s2, #57	; 0x41c80000  25.0
 8005e8e:	eddf 0a65 	vldr	s1, [pc, #404]	; 8006024 <main+0x23c>
 8005e92:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8006010 <main+0x228>
 8005e96:	4864      	ldr	r0, [pc, #400]	; (8006028 <main+0x240>)
 8005e98:	f7fe fc2c 	bl	80046f4 <_ZN14PID_Horizontal21setKgainConstantPitchEffff>
  pidForHorizontal.setKgainConstantYaw(1.4, 0.02 , 0, 400);
 8005e9c:	eddf 1a60 	vldr	s3, [pc, #384]	; 8006020 <main+0x238>
 8005ea0:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800602c <main+0x244>
 8005ea4:	eddf 0a62 	vldr	s1, [pc, #392]	; 8006030 <main+0x248>
 8005ea8:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8006010 <main+0x228>
 8005eac:	485e      	ldr	r0, [pc, #376]	; (8006028 <main+0x240>)
 8005eae:	f7fe fc3f 	bl	8004730 <_ZN14PID_Horizontal19setKgainConstantYawEffff>

  // Khởi tạo PWM cho việc điều khiển ESC
  	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	485f      	ldr	r0, [pc, #380]	; (8006034 <main+0x24c>)
 8005eb6:	f006 fd63 	bl	800c980 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8005eba:	2104      	movs	r1, #4
 8005ebc:	485d      	ldr	r0, [pc, #372]	; (8006034 <main+0x24c>)
 8005ebe:	f006 fd5f 	bl	800c980 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8005ec2:	2108      	movs	r1, #8
 8005ec4:	485b      	ldr	r0, [pc, #364]	; (8006034 <main+0x24c>)
 8005ec6:	f006 fd5b 	bl	800c980 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8005eca:	210c      	movs	r1, #12
 8005ecc:	4859      	ldr	r0, [pc, #356]	; (8006034 <main+0x24c>)
 8005ece:	f006 fd57 	bl	800c980 <HAL_TIM_PWM_Start>

  	CHANGE_SPEED_MOTOR_FRONT_RIGHT_CCW(1000);
 8005ed2:	4b58      	ldr	r3, [pc, #352]	; (8006034 <main+0x24c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005eda:	635a      	str	r2, [r3, #52]	; 0x34
  	CHANGE_SPEED_MOTOR_REAR_RIGHT_CW(1000);
 8005edc:	4b55      	ldr	r3, [pc, #340]	; (8006034 <main+0x24c>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ee4:	639a      	str	r2, [r3, #56]	; 0x38
  	CHANGE_SPEED_MOTOR_REAR_LEFT_CCW(1000);
 8005ee6:	4b53      	ldr	r3, [pc, #332]	; (8006034 <main+0x24c>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005eee:	63da      	str	r2, [r3, #60]	; 0x3c
  	CHANGE_SPEED_MOTOR_FRONT_LEFT_CW(1000);
 8005ef0:	4b50      	ldr	r3, [pc, #320]	; (8006034 <main+0x24c>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ef8:	641a      	str	r2, [r3, #64]	; 0x40



  if ((gy86.IsReadyToInterfaceMPU6050() != IMU9DOF_Result_Ok) ||(gy86.IsReadyToInterfaceHMC5883L() != IMU9DOF_Result_Ok)||
 8005efa:	4841      	ldr	r0, [pc, #260]	; (8006000 <main+0x218>)
 8005efc:	f7fc ffb0 	bl	8002e60 <_ZN7IMU9DOF25IsReadyToInterfaceMPU6050Ev>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10b      	bne.n	8005f1e <main+0x136>
 8005f06:	483e      	ldr	r0, [pc, #248]	; (8006000 <main+0x218>)
 8005f08:	f7fc fffd 	bl	8002f06 <_ZN7IMU9DOF26IsReadyToInterfaceHMC5883LEv>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d105      	bne.n	8005f1e <main+0x136>
			(ms5611.IsReadyToInterface() != BAROMETER_Result_Ok))
 8005f12:	4840      	ldr	r0, [pc, #256]	; (8006014 <main+0x22c>)
 8005f14:	f7fe ff8b 	bl	8004e2e <_ZN9Barometer18IsReadyToInterfaceEv>
 8005f18:	4603      	mov	r3, r0
  if ((gy86.IsReadyToInterfaceMPU6050() != IMU9DOF_Result_Ok) ||(gy86.IsReadyToInterfaceHMC5883L() != IMU9DOF_Result_Ok)||
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <main+0x13a>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <main+0x13c>
 8005f22:	2300      	movs	r3, #0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <main+0x14c>
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8005f28:	2201      	movs	r2, #1
 8005f2a:	2104      	movs	r1, #4
 8005f2c:	4842      	ldr	r0, [pc, #264]	; (8006038 <main+0x250>)
 8005f2e:	f003 fc67 	bl	8009800 <HAL_GPIO_WritePin>
		for(;;)
 8005f32:	e7fe      	b.n	8005f32 <main+0x14a>
		{
			// Reset Lại Drone ( Cảm biến bị lỗi )
		}
	}
  if ((ms5611.Init() != HAL_OK)  || (gy86.Init() != HAL_OK) || (gpsM8N.Init() != HAL_OK))
 8005f34:	4837      	ldr	r0, [pc, #220]	; (8006014 <main+0x22c>)
 8005f36:	f7fe ff1c 	bl	8004d72 <_ZN9Barometer4InitEv>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10b      	bne.n	8005f58 <main+0x170>
 8005f40:	482f      	ldr	r0, [pc, #188]	; (8006000 <main+0x218>)
 8005f42:	f7fd fae5 	bl	8003510 <_ZN7IMU9DOF4InitEv>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d105      	bne.n	8005f58 <main+0x170>
 8005f4c:	4833      	ldr	r0, [pc, #204]	; (800601c <main+0x234>)
 8005f4e:	f7fb fb7b 	bl	8001648 <_ZN3GPS4InitEv>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <main+0x174>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e000      	b.n	8005f5e <main+0x176>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d005      	beq.n	8005f6e <main+0x186>
  {
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8005f62:	2201      	movs	r2, #1
 8005f64:	2108      	movs	r1, #8
 8005f66:	4834      	ldr	r0, [pc, #208]	; (8006038 <main+0x250>)
 8005f68:	f003 fc4a 	bl	8009800 <HAL_GPIO_WritePin>
	for(;;){
 8005f6c:	e7fe      	b.n	8005f6c <main+0x184>
		// Reset lại Drone
	}
  }
  // On dinh bo dem cho barometer, khong nhan gia tri sai ban dau (truoc khi vo chuong trinh chinh
  	for (int i = 0; i < 100 ; i++)
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60fb      	str	r3, [r7, #12]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2b63      	cmp	r3, #99	; 0x63
 8005f76:	dc0f      	bgt.n	8005f98 <main+0x1b0>
  	{
  		ms5611.ReadAndCalculatePIDBarometer(flightMode, takeoffDetected,throttle);
 8005f78:	4b30      	ldr	r3, [pc, #192]	; (800603c <main+0x254>)
 8005f7a:	7819      	ldrb	r1, [r3, #0]
 8005f7c:	4b30      	ldr	r3, [pc, #192]	; (8006040 <main+0x258>)
 8005f7e:	781a      	ldrb	r2, [r3, #0]
 8005f80:	4b30      	ldr	r3, [pc, #192]	; (8006044 <main+0x25c>)
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	4823      	ldr	r0, [pc, #140]	; (8006014 <main+0x22c>)
 8005f86:	f7ff fc82 	bl	800588e <_ZN9Barometer28ReadAndCalculatePIDBarometerEhht>
  		HAL_Delay(4);
 8005f8a:	2004      	movs	r0, #4
 8005f8c:	f002 fa02 	bl	8008394 <HAL_Delay>
  	for (int i = 0; i < 100 ; i++)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3301      	adds	r3, #1
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	e7ec      	b.n	8005f72 <main+0x18a>
  	}

  	ms5611.SetGroundPressure();
 8005f98:	481e      	ldr	r0, [pc, #120]	; (8006014 <main+0x22c>)
 8005f9a:	f7fe ff0d 	bl	8004db8 <_ZN9Barometer17SetGroundPressureEv>

	gy86.ReadRawAllParameter();
 8005f9e:	4818      	ldr	r0, [pc, #96]	; (8006000 <main+0x218>)
 8005fa0:	f7fd f80b 	bl	8002fba <_ZN7IMU9DOF19ReadRawAllParameterEv>
	gy86.ReadCompass();
 8005fa4:	4816      	ldr	r0, [pc, #88]	; (8006000 <main+0x218>)
 8005fa6:	f7fc fd1f 	bl	80029e8 <_ZN7IMU9DOF11ReadCompassEv>
	gy86.angleYaw = gy86.actualCompassHeading;
 8005faa:	4b15      	ldr	r3, [pc, #84]	; (8006000 <main+0x218>)
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	4a14      	ldr	r2, [pc, #80]	; (8006000 <main+0x218>)
 8005fb0:	6653      	str	r3, [r2, #100]	; 0x64

	gy86.CalibGyro();
 8005fb2:	4813      	ldr	r0, [pc, #76]	; (8006000 <main+0x218>)
 8005fb4:	f7fd fdde 	bl	8003b74 <_ZN7IMU9DOF9CalibGyroEv>

	// Đưa gia tri accel vao bo dem de on dinh truoc khi vao chuong trinh chinh
	for (int i = 0; i <= 24; i++)
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60bb      	str	r3, [r7, #8]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b18      	cmp	r3, #24
 8005fc0:	dc0d      	bgt.n	8005fde <main+0x1f6>
	{
		gy86.shortAverageAccel_Z[i] = gy86.accel.z;
 8005fc2:	4b0f      	ldr	r3, [pc, #60]	; (8006000 <main+0x218>)
 8005fc4:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	; 0x2c
 8005fc8:	4a0d      	ldr	r2, [pc, #52]	; (8006000 <main+0x218>)
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	3338      	adds	r3, #56	; 0x38
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	4413      	add	r3, r2
 8005fd2:	460a      	mov	r2, r1
 8005fd4:	80da      	strh	r2, [r3, #6]
	for (int i = 0; i <= 24; i++)
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	60bb      	str	r3, [r7, #8]
 8005fdc:	e7ee      	b.n	8005fbc <main+0x1d4>
	}
	for (int i = 0; i <= 49; i++)
 8005fde:	2300      	movs	r3, #0
 8005fe0:	607b      	str	r3, [r7, #4]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b31      	cmp	r3, #49	; 0x31
 8005fe6:	dc2f      	bgt.n	8006048 <main+0x260>
	{
		gy86.longAverageAccel_Z[i] = gy86.accel.z;
 8005fe8:	4b05      	ldr	r3, [pc, #20]	; (8006000 <main+0x218>)
 8005fea:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	; 0x2c
 8005fee:	4a04      	ldr	r2, [pc, #16]	; (8006000 <main+0x218>)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3354      	adds	r3, #84	; 0x54
 8005ff4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i <= 49; i++)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	607b      	str	r3, [r7, #4]
 8005ffe:	e7f0      	b.n	8005fe2 <main+0x1fa>
 8006000:	20000694 	.word	0x20000694
 8006004:	bfc00000 	.word	0xbfc00000
 8006008:	20000000 	.word	0x20000000
 800600c:	3e4ccccd 	.word	0x3e4ccccd
 8006010:	3fb33333 	.word	0x3fb33333
 8006014:	200007f0 	.word	0x200007f0
 8006018:	402ccccd 	.word	0x402ccccd
 800601c:	200009e8 	.word	0x200009e8
 8006020:	43c80000 	.word	0x43c80000
 8006024:	3d23d70a 	.word	0x3d23d70a
 8006028:	20000c0c 	.word	0x20000c0c
 800602c:	00000000 	.word	0x00000000
 8006030:	3ca3d70a 	.word	0x3ca3d70a
 8006034:	2000052c 	.word	0x2000052c
 8006038:	40021000 	.word	0x40021000
 800603c:	20000662 	.word	0x20000662
 8006040:	20000664 	.word	0x20000664
 8006044:	20000006 	.word	0x20000006
	}

	gy86.shortTotalAccel_Z = gy86.accel.z * 25;
 8006048:	4bc7      	ldr	r3, [pc, #796]	; (8006368 <main+0x580>)
 800604a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800604e:	461a      	mov	r2, r3
 8006050:	4613      	mov	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	009a      	lsls	r2, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	4ac3      	ldr	r2, [pc, #780]	; (8006368 <main+0x580>)
 800605c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	gy86.longTotalAccel_Z = gy86.accel.z * 50;
 8006060:	4bc1      	ldr	r3, [pc, #772]	; (8006368 <main+0x580>)
 8006062:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8006066:	461a      	mov	r2, r3
 8006068:	2332      	movs	r3, #50	; 0x32
 800606a:	fb03 f302 	mul.w	r3, r3, r2
 800606e:	4abe      	ldr	r2, [pc, #760]	; (8006368 <main+0x580>)
 8006070:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Nhận dữ liệu NRF24
	  ReceiveDataFromNRF24L01();
 8006074:	f7ff fde2 	bl	8005c3c <_Z23ReceiveDataFromNRF24L01v>
	  ReadDataFromBMP180();
 8006078:	f7ff fe96 	bl	8005da8 <_Z18ReadDataFromBMP180v>

	  if ((stateMachine == 0)&& (FirtsMachine0 == 0)  ) // Trạng thái khởi động
 800607c:	4bbb      	ldr	r3, [pc, #748]	; (800636c <main+0x584>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d125      	bne.n	80060d0 <main+0x2e8>
 8006084:	4bba      	ldr	r3, [pc, #744]	; (8006370 <main+0x588>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d121      	bne.n	80060d0 <main+0x2e8>
	  {
		  FirtsMachine0 = 1;
 800608c:	4bb8      	ldr	r3, [pc, #736]	; (8006370 <main+0x588>)
 800608e:	2201      	movs	r2, #1
 8006090:	601a      	str	r2, [r3, #0]

		  gy86.CalibCompass();  // hiệu chỉnh la bàn
 8006092:	48b5      	ldr	r0, [pc, #724]	; (8006368 <main+0x580>)
 8006094:	f7fd fbad 	bl	80037f2 <_ZN7IMU9DOF12CalibCompassEv>
		  htim2.Instance->CNT = 0;
 8006098:	4bb6      	ldr	r3, [pc, #728]	; (8006374 <main+0x58c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2200      	movs	r2, #0
 800609e:	625a      	str	r2, [r3, #36]	; 0x24

		  gy86.CalibLevel(&error);  // Hiệu chỉnh cân bằng ban đầu
 80060a0:	49b5      	ldr	r1, [pc, #724]	; (8006378 <main+0x590>)
 80060a2:	48b1      	ldr	r0, [pc, #708]	; (8006368 <main+0x580>)
 80060a4:	f7fd fc34 	bl	8003910 <_ZN7IMU9DOF10CalibLevelEPh>
		  htim2.Instance->CNT = 0;
 80060a8:	4bb2      	ldr	r3, [pc, #712]	; (8006374 <main+0x58c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2200      	movs	r2, #0
 80060ae:	625a      	str	r2, [r3, #36]	; 0x24

		  ChangeSetting();   // change setting
 80060b0:	f000 ffce 	bl	8007050 <_Z13ChangeSettingv>
		  htim2.Instance->CNT = 0;
 80060b4:	4baf      	ldr	r3, [pc, #700]	; (8006374 <main+0x58c>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2200      	movs	r2, #0
 80060ba:	625a      	str	r2, [r3, #36]	; 0x24

		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80060bc:	2201      	movs	r2, #1
 80060be:	2104      	movs	r1, #4
 80060c0:	48ae      	ldr	r0, [pc, #696]	; (800637c <main+0x594>)
 80060c2:	f003 fb9d 	bl	8009800 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80060c6:	2201      	movs	r2, #1
 80060c8:	2108      	movs	r1, #8
 80060ca:	48ac      	ldr	r0, [pc, #688]	; (800637c <main+0x594>)
 80060cc:	f003 fb98 	bl	8009800 <HAL_GPIO_WritePin>

	  }

	  flightMode = 1;
 80060d0:	4bab      	ldr	r3, [pc, #684]	; (8006380 <main+0x598>)
 80060d2:	2201      	movs	r2, #1
 80060d4:	701a      	strb	r2, [r3, #0]

	  gy86.headingLock = 0; // Xóa cờ heading Lock
 80060d6:	4ba4      	ldr	r3, [pc, #656]	; (8006368 <main+0x580>)
 80060d8:	2200      	movs	r2, #0
 80060da:	701a      	strb	r2, [r3, #0]


	  if(BTN5 == 1 )  // Bấm BTN5
 80060dc:	4ba9      	ldr	r3, [pc, #676]	; (8006384 <main+0x59c>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d102      	bne.n	80060ea <main+0x302>
	  {
		  gy86.headingLock = 1;
 80060e4:	4ba0      	ldr	r3, [pc, #640]	; (8006368 <main+0x580>)
 80060e6:	2201      	movs	r2, #1
 80060e8:	701a      	strb	r2, [r3, #0]
	  }

	  if(BTNFlightMode == 2)
 80060ea:	4ba7      	ldr	r3, [pc, #668]	; (8006388 <main+0x5a0>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d102      	bne.n	80060f8 <main+0x310>
	  {
		  flightMode = 2;
 80060f2:	4ba3      	ldr	r3, [pc, #652]	; (8006380 <main+0x598>)
 80060f4:	2202      	movs	r2, #2
 80060f6:	701a      	strb	r2, [r3, #0]
	  }
	  if (BTNFlightMode ==3 )
 80060f8:	4ba3      	ldr	r3, [pc, #652]	; (8006388 <main+0x5a0>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b03      	cmp	r3, #3
 80060fe:	d102      	bne.n	8006106 <main+0x31e>
	  {
		  flightMode = 3;
 8006100:	4b9f      	ldr	r3, [pc, #636]	; (8006380 <main+0x598>)
 8006102:	2203      	movs	r2, #3
 8006104:	701a      	strb	r2, [r3, #0]
	  }

	  gy86.ReadGyroAccel(); // tính toán Gyro và Accel
 8006106:	4898      	ldr	r0, [pc, #608]	; (8006368 <main+0x580>)
 8006108:	f7fd fb0a 	bl	8003720 <_ZN7IMU9DOF13ReadGyroAccelEv>
	  gy86.ReadCompass(); // Tính toán la bàn số
 800610c:	4896      	ldr	r0, [pc, #600]	; (8006368 <main+0x580>)
 800610e:	f7fc fc6b 	bl	80029e8 <_ZN7IMU9DOF11ReadCompassEv>
	  ms5611.ReadAndCalculatePIDBarometer(stateMachine, takeoffDetected, throttle);  // Đọc giá trị áp xuất à tính toán PID ổn định độ cao
 8006112:	4b96      	ldr	r3, [pc, #600]	; (800636c <main+0x584>)
 8006114:	7819      	ldrb	r1, [r3, #0]
 8006116:	4b9d      	ldr	r3, [pc, #628]	; (800638c <main+0x5a4>)
 8006118:	781a      	ldrb	r2, [r3, #0]
 800611a:	4b9d      	ldr	r3, [pc, #628]	; (8006390 <main+0x5a8>)
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	489d      	ldr	r0, [pc, #628]	; (8006394 <main+0x5ac>)
 8006120:	f7ff fbb5 	bl	800588e <_ZN9Barometer28ReadAndCalculatePIDBarometerEhht>

	  gpsM8N.ReadGPS(stateMachine, &error, &flightMode, gy86.angleYaw);    // Đọc gia strij GPS và tính toán PID ổn định vị trí
 8006124:	4b91      	ldr	r3, [pc, #580]	; (800636c <main+0x584>)
 8006126:	7819      	ldrb	r1, [r3, #0]
 8006128:	4b8f      	ldr	r3, [pc, #572]	; (8006368 <main+0x580>)
 800612a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800612e:	eeb0 0a67 	vmov.f32	s0, s15
 8006132:	4b93      	ldr	r3, [pc, #588]	; (8006380 <main+0x598>)
 8006134:	4a90      	ldr	r2, [pc, #576]	; (8006378 <main+0x590>)
 8006136:	4898      	ldr	r0, [pc, #608]	; (8006398 <main+0x5b0>)
 8006138:	f7fb fb0e 	bl	8001758 <_ZN3GPS7ReadGPSEhPhS0_f>

	  gy86.CalculateGyroInput();  // tính toán gái trị đầu vào feedback cho bộ điều khiển PID, ổn định theo các phương
 800613c:	488a      	ldr	r0, [pc, #552]	; (8006368 <main+0x580>)
 800613e:	f7fd fffb 	bl	8004138 <_ZN7IMU9DOF18CalculateGyroInputEv>
	  gy86.ReadAngleRPY();  // tính toán gọc đo Roll, Pitch, Yaw
 8006142:	4889      	ldr	r0, [pc, #548]	; (8006368 <main+0x580>)
 8006144:	f7fd fd8c 	bl	8003c60 <_ZN7IMU9DOF12ReadAngleRPYEv>


	  gy86.setLevelAdjust(15, 15);  // hiệu chỉnh lại các gia trị góc đo theo các thông số
 8006148:	220f      	movs	r2, #15
 800614a:	210f      	movs	r1, #15
 800614c:	4886      	ldr	r0, [pc, #536]	; (8006368 <main+0x580>)
 800614e:	f7fe f8ab 	bl	80042a8 <_ZN7IMU9DOF14setLevelAdjustEhh>
	  gy86.VerticalAccelerationCalculations();  // Tính toán gia tốc
 8006152:	4885      	ldr	r0, [pc, #532]	; (8006368 <main+0x580>)
 8006154:	f7fc fb32 	bl	80027bc <_ZN7IMU9DOF32VerticalAccelerationCalculationsEv>

	  // Thiết lập lại setpoint cho đầu vào bộ PID ổn định roll pitch
	 pidForHorizontal.roll.setPointBase = roll;
 8006158:	4b90      	ldr	r3, [pc, #576]	; (800639c <main+0x5b4>)
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	461a      	mov	r2, r3
 800615e:	4b90      	ldr	r3, [pc, #576]	; (80063a0 <main+0x5b8>)
 8006160:	631a      	str	r2, [r3, #48]	; 0x30
	 pidForHorizontal.pitch.setPointBase = pitch;
 8006162:	4b90      	ldr	r3, [pc, #576]	; (80063a4 <main+0x5bc>)
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	461a      	mov	r2, r3
 8006168:	4b8d      	ldr	r3, [pc, #564]	; (80063a0 <main+0x5b8>)
 800616a:	661a      	str	r2, [r3, #96]	; 0x60
	 pidForHorizontal.yaw.setPointBase = yaw;
 800616c:	4b8e      	ldr	r3, [pc, #568]	; (80063a8 <main+0x5c0>)
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	461a      	mov	r2, r3
 8006172:	4b8b      	ldr	r3, [pc, #556]	; (80063a0 <main+0x5b8>)
 8006174:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 pidForHorizontal.throttleSetpoint = throttle;
 8006178:	4b85      	ldr	r3, [pc, #532]	; (8006390 <main+0x5a8>)
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	461a      	mov	r2, r3
 800617e:	4b88      	ldr	r3, [pc, #544]	; (80063a0 <main+0x5b8>)
 8006180:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	 pidForHorizontal.roll.inputValue = gy86.gyro.rollInput;
 8006184:	4b78      	ldr	r3, [pc, #480]	; (8006368 <main+0x580>)
 8006186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006188:	4a85      	ldr	r2, [pc, #532]	; (80063a0 <main+0x5b8>)
 800618a:	6193      	str	r3, [r2, #24]
	 pidForHorizontal.pitch.inputValue = gy86.gyro.pitchInput;
 800618c:	4b76      	ldr	r3, [pc, #472]	; (8006368 <main+0x580>)
 800618e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006190:	4a83      	ldr	r2, [pc, #524]	; (80063a0 <main+0x5b8>)
 8006192:	6493      	str	r3, [r2, #72]	; 0x48
	 pidForHorizontal.yaw.inputValue = gy86.gyro.yawInput;
 8006194:	4b74      	ldr	r3, [pc, #464]	; (8006368 <main+0x580>)
 8006196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006198:	4a81      	ldr	r2, [pc, #516]	; (80063a0 <main+0x5b8>)
 800619a:	6793      	str	r3, [r2, #120]	; 0x78

	 if (gy86.headingLock == 1)  // Nếu bật headingLock thì tính tóa lại setpoint của roll pitch
 800619c:	4b72      	ldr	r3, [pc, #456]	; (8006368 <main+0x580>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 811c 	beq.w	80063de <main+0x5f6>
	  {
		float headingLockCourseDeviation = gy86.CourseDeviation(gy86.angleYaw, gy86.courseLockHeading);
 80061a6:	4b70      	ldr	r3, [pc, #448]	; (8006368 <main+0x580>)
 80061a8:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80061ac:	4b6e      	ldr	r3, [pc, #440]	; (8006368 <main+0x580>)
 80061ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80061b2:	eef0 0a47 	vmov.f32	s1, s14
 80061b6:	eeb0 0a67 	vmov.f32	s0, s15
 80061ba:	486b      	ldr	r0, [pc, #428]	; (8006368 <main+0x580>)
 80061bc:	f7fe f89c 	bl	80042f8 <_ZN7IMU9DOF15CourseDeviationEff>
 80061c0:	ed87 0a00 	vstr	s0, [r7]
		pidForHorizontal.roll.setPointBase = 1500 + ((float)(roll - 1500) * cos(headingLockCourseDeviation * 0.017453)) + ((float)(pitch - 1500) * cos((headingLockCourseDeviation - 90) * 0.017453));
 80061c4:	4b75      	ldr	r3, [pc, #468]	; (800639c <main+0x5b4>)
 80061c6:	881b      	ldrh	r3, [r3, #0]
 80061c8:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80061cc:	ee07 3a90 	vmov	s15, r3
 80061d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061d4:	ee17 0a90 	vmov	r0, s15
 80061d8:	f7fa f95a 	bl	8000490 <__aeabi_f2d>
 80061dc:	4604      	mov	r4, r0
 80061de:	460d      	mov	r5, r1
 80061e0:	6838      	ldr	r0, [r7, #0]
 80061e2:	f7fa f955 	bl	8000490 <__aeabi_f2d>
 80061e6:	a35c      	add	r3, pc, #368	; (adr r3, 8006358 <main+0x570>)
 80061e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ec:	f7fa f9a8 	bl	8000540 <__aeabi_dmul>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	ec43 2b17 	vmov	d7, r2, r3
 80061f8:	eeb0 0a47 	vmov.f32	s0, s14
 80061fc:	eef0 0a67 	vmov.f32	s1, s15
 8006200:	f008 f946 	bl	800e490 <cos>
 8006204:	ec53 2b10 	vmov	r2, r3, d0
 8006208:	4620      	mov	r0, r4
 800620a:	4629      	mov	r1, r5
 800620c:	f7fa f998 	bl	8000540 <__aeabi_dmul>
 8006210:	4603      	mov	r3, r0
 8006212:	460c      	mov	r4, r1
 8006214:	4618      	mov	r0, r3
 8006216:	4621      	mov	r1, r4
 8006218:	a351      	add	r3, pc, #324	; (adr r3, 8006360 <main+0x578>)
 800621a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621e:	f7f9 ffd9 	bl	80001d4 <__adddf3>
 8006222:	4603      	mov	r3, r0
 8006224:	460c      	mov	r4, r1
 8006226:	4625      	mov	r5, r4
 8006228:	461c      	mov	r4, r3
 800622a:	4b5e      	ldr	r3, [pc, #376]	; (80063a4 <main+0x5bc>)
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800623a:	ee17 0a90 	vmov	r0, s15
 800623e:	f7fa f927 	bl	8000490 <__aeabi_f2d>
 8006242:	4680      	mov	r8, r0
 8006244:	4689      	mov	r9, r1
 8006246:	edd7 7a00 	vldr	s15, [r7]
 800624a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80063ac <main+0x5c4>
 800624e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006252:	ee17 0a90 	vmov	r0, s15
 8006256:	f7fa f91b 	bl	8000490 <__aeabi_f2d>
 800625a:	a33f      	add	r3, pc, #252	; (adr r3, 8006358 <main+0x570>)
 800625c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006260:	f7fa f96e 	bl	8000540 <__aeabi_dmul>
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	ec43 2b17 	vmov	d7, r2, r3
 800626c:	eeb0 0a47 	vmov.f32	s0, s14
 8006270:	eef0 0a67 	vmov.f32	s1, s15
 8006274:	f008 f90c 	bl	800e490 <cos>
 8006278:	ec53 2b10 	vmov	r2, r3, d0
 800627c:	4640      	mov	r0, r8
 800627e:	4649      	mov	r1, r9
 8006280:	f7fa f95e 	bl	8000540 <__aeabi_dmul>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	4620      	mov	r0, r4
 800628a:	4629      	mov	r1, r5
 800628c:	f7f9 ffa2 	bl	80001d4 <__adddf3>
 8006290:	4603      	mov	r3, r0
 8006292:	460c      	mov	r4, r1
 8006294:	4618      	mov	r0, r3
 8006296:	4621      	mov	r1, r4
 8006298:	f7fa fc02 	bl	8000aa0 <__aeabi_d2iz>
 800629c:	4602      	mov	r2, r0
 800629e:	4b40      	ldr	r3, [pc, #256]	; (80063a0 <main+0x5b8>)
 80062a0:	631a      	str	r2, [r3, #48]	; 0x30
		pidForHorizontal.pitch.setPointBase = 1500 + ((float)(pitch - 1500) * cos(headingLockCourseDeviation * 0.017453)) + ((float)(roll - 1500) * cos((headingLockCourseDeviation + 90) * 0.017453));
 80062a2:	4b40      	ldr	r3, [pc, #256]	; (80063a4 <main+0x5bc>)
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80062aa:	ee07 3a90 	vmov	s15, r3
 80062ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062b2:	ee17 0a90 	vmov	r0, s15
 80062b6:	f7fa f8eb 	bl	8000490 <__aeabi_f2d>
 80062ba:	4604      	mov	r4, r0
 80062bc:	460d      	mov	r5, r1
 80062be:	6838      	ldr	r0, [r7, #0]
 80062c0:	f7fa f8e6 	bl	8000490 <__aeabi_f2d>
 80062c4:	a324      	add	r3, pc, #144	; (adr r3, 8006358 <main+0x570>)
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	f7fa f939 	bl	8000540 <__aeabi_dmul>
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	ec43 2b17 	vmov	d7, r2, r3
 80062d6:	eeb0 0a47 	vmov.f32	s0, s14
 80062da:	eef0 0a67 	vmov.f32	s1, s15
 80062de:	f008 f8d7 	bl	800e490 <cos>
 80062e2:	ec53 2b10 	vmov	r2, r3, d0
 80062e6:	4620      	mov	r0, r4
 80062e8:	4629      	mov	r1, r5
 80062ea:	f7fa f929 	bl	8000540 <__aeabi_dmul>
 80062ee:	4603      	mov	r3, r0
 80062f0:	460c      	mov	r4, r1
 80062f2:	4618      	mov	r0, r3
 80062f4:	4621      	mov	r1, r4
 80062f6:	a31a      	add	r3, pc, #104	; (adr r3, 8006360 <main+0x578>)
 80062f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fc:	f7f9 ff6a 	bl	80001d4 <__adddf3>
 8006300:	4603      	mov	r3, r0
 8006302:	460c      	mov	r4, r1
 8006304:	4625      	mov	r5, r4
 8006306:	461c      	mov	r4, r3
 8006308:	4b24      	ldr	r3, [pc, #144]	; (800639c <main+0x5b4>)
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8006310:	ee07 3a90 	vmov	s15, r3
 8006314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006318:	ee17 0a90 	vmov	r0, s15
 800631c:	f7fa f8b8 	bl	8000490 <__aeabi_f2d>
 8006320:	4680      	mov	r8, r0
 8006322:	4689      	mov	r9, r1
 8006324:	edd7 7a00 	vldr	s15, [r7]
 8006328:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80063ac <main+0x5c4>
 800632c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006330:	ee17 0a90 	vmov	r0, s15
 8006334:	f7fa f8ac 	bl	8000490 <__aeabi_f2d>
 8006338:	a307      	add	r3, pc, #28	; (adr r3, 8006358 <main+0x570>)
 800633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633e:	f7fa f8ff 	bl	8000540 <__aeabi_dmul>
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	ec43 2b17 	vmov	d7, r2, r3
 800634a:	eeb0 0a47 	vmov.f32	s0, s14
 800634e:	eef0 0a67 	vmov.f32	s1, s15
 8006352:	e02d      	b.n	80063b0 <main+0x5c8>
 8006354:	f3af 8000 	nop.w
 8006358:	00de4c51 	.word	0x00de4c51
 800635c:	3f91df33 	.word	0x3f91df33
 8006360:	00000000 	.word	0x00000000
 8006364:	40977000 	.word	0x40977000
 8006368:	20000694 	.word	0x20000694
 800636c:	20000665 	.word	0x20000665
 8006370:	20000684 	.word	0x20000684
 8006374:	200004ec 	.word	0x200004ec
 8006378:	20000666 	.word	0x20000666
 800637c:	40021000 	.word	0x40021000
 8006380:	20000662 	.word	0x20000662
 8006384:	20000668 	.word	0x20000668
 8006388:	20000680 	.word	0x20000680
 800638c:	20000664 	.word	0x20000664
 8006390:	20000006 	.word	0x20000006
 8006394:	200007f0 	.word	0x200007f0
 8006398:	200009e8 	.word	0x200009e8
 800639c:	2000065c 	.word	0x2000065c
 80063a0:	20000c0c 	.word	0x20000c0c
 80063a4:	2000065e 	.word	0x2000065e
 80063a8:	20000660 	.word	0x20000660
 80063ac:	42b40000 	.word	0x42b40000
 80063b0:	f008 f86e 	bl	800e490 <cos>
 80063b4:	ec53 2b10 	vmov	r2, r3, d0
 80063b8:	4640      	mov	r0, r8
 80063ba:	4649      	mov	r1, r9
 80063bc:	f7fa f8c0 	bl	8000540 <__aeabi_dmul>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4620      	mov	r0, r4
 80063c6:	4629      	mov	r1, r5
 80063c8:	f7f9 ff04 	bl	80001d4 <__adddf3>
 80063cc:	4603      	mov	r3, r0
 80063ce:	460c      	mov	r4, r1
 80063d0:	4618      	mov	r0, r3
 80063d2:	4621      	mov	r1, r4
 80063d4:	f7fa fb64 	bl	8000aa0 <__aeabi_d2iz>
 80063d8:	4602      	mov	r2, r0
 80063da:	4bb9      	ldr	r3, [pc, #740]	; (80066c0 <main+0x8d8>)
 80063dc:	661a      	str	r2, [r3, #96]	; 0x60
	  }

	 if (flightMode >= 3 && waypointSet == 1)  // có thêm GPS
 80063de:	4bb9      	ldr	r3, [pc, #740]	; (80066c4 <main+0x8dc>)
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d925      	bls.n	8006432 <main+0x64a>
 80063e6:	4bb8      	ldr	r3, [pc, #736]	; (80066c8 <main+0x8e0>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d121      	bne.n	8006432 <main+0x64a>
	 {
		pidForHorizontal.roll.setPointBase += gpsM8N.gpsRollAdjust;
 80063ee:	4bb4      	ldr	r3, [pc, #720]	; (80066c0 <main+0x8d8>)
 80063f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063fa:	4bb4      	ldr	r3, [pc, #720]	; (80066cc <main+0x8e4>)
 80063fc:	edd3 7a88 	vldr	s15, [r3, #544]	; 0x220
 8006400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006408:	ee17 2a90 	vmov	r2, s15
 800640c:	4bac      	ldr	r3, [pc, #688]	; (80066c0 <main+0x8d8>)
 800640e:	631a      	str	r2, [r3, #48]	; 0x30
		pidForHorizontal.pitch.setPointBase += gpsM8N.gpsPitchAdjust;
 8006410:	4bab      	ldr	r3, [pc, #684]	; (80066c0 <main+0x8d8>)
 8006412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006414:	ee07 3a90 	vmov	s15, r3
 8006418:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800641c:	4bab      	ldr	r3, [pc, #684]	; (80066cc <main+0x8e4>)
 800641e:	edd3 7a87 	vldr	s15, [r3, #540]	; 0x21c
 8006422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006426:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800642a:	ee17 2a90 	vmov	r2, s15
 800642e:	4ba4      	ldr	r3, [pc, #656]	; (80066c0 <main+0x8d8>)
 8006430:	661a      	str	r2, [r3, #96]	; 0x60
	 }

	 if (pidForHorizontal.roll.setPointBase > 2000)
 8006432:	4ba3      	ldr	r3, [pc, #652]	; (80066c0 <main+0x8d8>)
 8006434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006436:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800643a:	dd03      	ble.n	8006444 <main+0x65c>
	 {
		pidForHorizontal.roll.setPointBase = 2000;
 800643c:	4ba0      	ldr	r3, [pc, #640]	; (80066c0 <main+0x8d8>)
 800643e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006442:	631a      	str	r2, [r3, #48]	; 0x30
	 }
	 if (pidForHorizontal.roll.setPointBase < 1000)
 8006444:	4b9e      	ldr	r3, [pc, #632]	; (80066c0 <main+0x8d8>)
 8006446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800644c:	da03      	bge.n	8006456 <main+0x66e>
	 {
		pidForHorizontal.roll.setPointBase = 1000;
 800644e:	4b9c      	ldr	r3, [pc, #624]	; (80066c0 <main+0x8d8>)
 8006450:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006454:	631a      	str	r2, [r3, #48]	; 0x30
	 }
	 if (pidForHorizontal.pitch.setPointBase > 2000)
 8006456:	4b9a      	ldr	r3, [pc, #616]	; (80066c0 <main+0x8d8>)
 8006458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800645a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800645e:	dd03      	ble.n	8006468 <main+0x680>
	 {
		pidForHorizontal.pitch.setPointBase = 2000;
 8006460:	4b97      	ldr	r3, [pc, #604]	; (80066c0 <main+0x8d8>)
 8006462:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006466:	661a      	str	r2, [r3, #96]	; 0x60
	 }
	 if (pidForHorizontal.pitch.setPointBase < 1000)
 8006468:	4b95      	ldr	r3, [pc, #596]	; (80066c0 <main+0x8d8>)
 800646a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800646c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006470:	da03      	bge.n	800647a <main+0x692>
	 {
		pidForHorizontal.pitch.setPointBase = 1000;
 8006472:	4b93      	ldr	r3, [pc, #588]	; (80066c0 <main+0x8d8>)
 8006474:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006478:	661a      	str	r2, [r3, #96]	; 0x60
	 }

	 pidForHorizontal.setLevelAdjust(gy86.rollLevelAdjust, gy86.pitchLevelAdjust);
 800647a:	4b95      	ldr	r3, [pc, #596]	; (80066d0 <main+0x8e8>)
 800647c:	edd3 7a4a 	vldr	s15, [r3, #296]	; 0x128
 8006480:	4b93      	ldr	r3, [pc, #588]	; (80066d0 <main+0x8e8>)
 8006482:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 8006486:	eef0 0a47 	vmov.f32	s1, s14
 800648a:	eeb0 0a67 	vmov.f32	s0, s15
 800648e:	488c      	ldr	r0, [pc, #560]	; (80066c0 <main+0x8d8>)
 8006490:	f7fe f96c 	bl	800476c <_ZN14PID_Horizontal14setLevelAdjustEff>
	 pidForHorizontal.calculatePID();
 8006494:	488a      	ldr	r0, [pc, #552]	; (80066c0 <main+0x8d8>)
 8006496:	f7fe f97d 	bl	8004794 <_ZN14PID_Horizontal12calculatePIDEv>

	 StartStopTakeOff();
 800649a:	f001 f9df 	bl	800785c <_Z16StartStopTakeOffv>

	 if (takeoffDetected == 1 && stateMachine == 2)   // Nếu Drone được khởi động và đang bay
 800649e:	4b8d      	ldr	r3, [pc, #564]	; (80066d4 <main+0x8ec>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d133      	bne.n	800650e <main+0x726>
 80064a6:	4b8c      	ldr	r3, [pc, #560]	; (80066d8 <main+0x8f0>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d12f      	bne.n	800650e <main+0x726>
	 {
		Throttle = throttle + takeoffThrottle;  //The base throttle is the receiver throttle channel + the detected take-off throttle.
 80064ae:	4b8b      	ldr	r3, [pc, #556]	; (80066dc <main+0x8f4>)
 80064b0:	881a      	ldrh	r2, [r3, #0]
 80064b2:	4b8b      	ldr	r3, [pc, #556]	; (80066e0 <main+0x8f8>)
 80064b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	4413      	add	r3, r2
 80064bc:	b29b      	uxth	r3, r3
 80064be:	b21a      	sxth	r2, r3
 80064c0:	4b88      	ldr	r3, [pc, #544]	; (80066e4 <main+0x8fc>)
 80064c2:	801a      	strh	r2, [r3, #0]
		if (flightMode >= 2)
 80064c4:	4b7f      	ldr	r3, [pc, #508]	; (80066c4 <main+0x8dc>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d920      	bls.n	800650e <main+0x726>
		{                                                          //nếu chế dộ độ cao đang hoạt động
			Throttle = 1500 + takeoffThrottle + ms5611.GetPidOutputAltitude() + ms5611.GetManualThrottle();
 80064cc:	4b84      	ldr	r3, [pc, #528]	; (80066e0 <main+0x8f8>)
 80064ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064d2:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80064d6:	ee07 3a90 	vmov	s15, r3
 80064da:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80064de:	4882      	ldr	r0, [pc, #520]	; (80066e8 <main+0x900>)
 80064e0:	f7fe ffe4 	bl	80054ac <_ZN9Barometer20GetPidOutputAltitudeEv>
 80064e4:	eef0 7a40 	vmov.f32	s15, s0
 80064e8:	ee38 8a27 	vadd.f32	s16, s16, s15
 80064ec:	487e      	ldr	r0, [pc, #504]	; (80066e8 <main+0x900>)
 80064ee:	f7ff f80d 	bl	800550c <_ZN9Barometer17GetManualThrottleEv>
 80064f2:	4603      	mov	r3, r0
 80064f4:	ee07 3a90 	vmov	s15, r3
 80064f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064fc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006500:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006504:	ee17 3a90 	vmov	r3, s15
 8006508:	b21a      	sxth	r2, r3
 800650a:	4b76      	ldr	r3, [pc, #472]	; (80066e4 <main+0x8fc>)
 800650c:	801a      	strh	r2, [r3, #0]
		}
	 }

	 if (stateMachine == 2) // motors đã đc khởi động
 800650e:	4b72      	ldr	r3, [pc, #456]	; (80066d8 <main+0x8f0>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b02      	cmp	r3, #2
 8006514:	f040 80fc 	bne.w	8006710 <main+0x928>
	 {
		if (Throttle > 1800)
 8006518:	4b72      	ldr	r3, [pc, #456]	; (80066e4 <main+0x8fc>)
 800651a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800651e:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8006522:	dd03      	ble.n	800652c <main+0x744>
		{
			Throttle = 1800;                                          //Giới hạn lại tốc độ
 8006524:	4b6f      	ldr	r3, [pc, #444]	; (80066e4 <main+0x8fc>)
 8006526:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800652a:	801a      	strh	r2, [r3, #0]
		}
		escFrontRightCCW = Throttle - pidForHorizontal.pitch.outputValue + pidForHorizontal.roll.outputValue - pidForHorizontal.yaw.outputValue;
 800652c:	4b6d      	ldr	r3, [pc, #436]	; (80066e4 <main+0x8fc>)
 800652e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006532:	ee07 3a90 	vmov	s15, r3
 8006536:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800653a:	4b61      	ldr	r3, [pc, #388]	; (80066c0 <main+0x8d8>)
 800653c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006540:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006544:	4b5e      	ldr	r3, [pc, #376]	; (80066c0 <main+0x8d8>)
 8006546:	edd3 7a04 	vldr	s15, [r3, #16]
 800654a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800654e:	4b5c      	ldr	r3, [pc, #368]	; (80066c0 <main+0x8d8>)
 8006550:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8006554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800655c:	ee17 3a90 	vmov	r3, s15
 8006560:	b21a      	sxth	r2, r3
 8006562:	4b62      	ldr	r3, [pc, #392]	; (80066ec <main+0x904>)
 8006564:	801a      	strh	r2, [r3, #0]
		escRearRightCW = Throttle + pidForHorizontal.pitch.outputValue + pidForHorizontal.roll.outputValue + pidForHorizontal.yaw.outputValue;
 8006566:	4b5f      	ldr	r3, [pc, #380]	; (80066e4 <main+0x8fc>)
 8006568:	f9b3 3000 	ldrsh.w	r3, [r3]
 800656c:	ee07 3a90 	vmov	s15, r3
 8006570:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006574:	4b52      	ldr	r3, [pc, #328]	; (80066c0 <main+0x8d8>)
 8006576:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800657a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800657e:	4b50      	ldr	r3, [pc, #320]	; (80066c0 <main+0x8d8>)
 8006580:	edd3 7a04 	vldr	s15, [r3, #16]
 8006584:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006588:	4b4d      	ldr	r3, [pc, #308]	; (80066c0 <main+0x8d8>)
 800658a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800658e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006592:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006596:	ee17 3a90 	vmov	r3, s15
 800659a:	b21a      	sxth	r2, r3
 800659c:	4b54      	ldr	r3, [pc, #336]	; (80066f0 <main+0x908>)
 800659e:	801a      	strh	r2, [r3, #0]
		escRearLeftCCW = Throttle + pidForHorizontal.pitch.outputValue - pidForHorizontal.roll.outputValue - pidForHorizontal.yaw.outputValue;
 80065a0:	4b50      	ldr	r3, [pc, #320]	; (80066e4 <main+0x8fc>)
 80065a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065a6:	ee07 3a90 	vmov	s15, r3
 80065aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065ae:	4b44      	ldr	r3, [pc, #272]	; (80066c0 <main+0x8d8>)
 80065b0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80065b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065b8:	4b41      	ldr	r3, [pc, #260]	; (80066c0 <main+0x8d8>)
 80065ba:	edd3 7a04 	vldr	s15, [r3, #16]
 80065be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065c2:	4b3f      	ldr	r3, [pc, #252]	; (80066c0 <main+0x8d8>)
 80065c4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80065c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065d0:	ee17 3a90 	vmov	r3, s15
 80065d4:	b21a      	sxth	r2, r3
 80065d6:	4b47      	ldr	r3, [pc, #284]	; (80066f4 <main+0x90c>)
 80065d8:	801a      	strh	r2, [r3, #0]
		escFrontLeftCW = Throttle - pidForHorizontal.pitch.outputValue - pidForHorizontal.roll.outputValue + pidForHorizontal.yaw.outputValue;
 80065da:	4b42      	ldr	r3, [pc, #264]	; (80066e4 <main+0x8fc>)
 80065dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065e0:	ee07 3a90 	vmov	s15, r3
 80065e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065e8:	4b35      	ldr	r3, [pc, #212]	; (80066c0 <main+0x8d8>)
 80065ea:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80065ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065f2:	4b33      	ldr	r3, [pc, #204]	; (80066c0 <main+0x8d8>)
 80065f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80065f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065fc:	4b30      	ldr	r3, [pc, #192]	; (80066c0 <main+0x8d8>)
 80065fe:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8006602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800660a:	ee17 3a90 	vmov	r3, s15
 800660e:	b21a      	sxth	r2, r3
 8006610:	4b39      	ldr	r3, [pc, #228]	; (80066f8 <main+0x910>)
 8006612:	801a      	strh	r2, [r3, #0]

		if (escFrontRightCCW < idleSpeedMotor)
 8006614:	4b35      	ldr	r3, [pc, #212]	; (80066ec <main+0x904>)
 8006616:	f9b3 2000 	ldrsh.w	r2, [r3]
 800661a:	4b38      	ldr	r3, [pc, #224]	; (80066fc <main+0x914>)
 800661c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006620:	429a      	cmp	r2, r3
 8006622:	da04      	bge.n	800662e <main+0x846>
		{
			escFrontRightCCW = idleSpeedMotor;                        //Keep the motors running.
 8006624:	4b35      	ldr	r3, [pc, #212]	; (80066fc <main+0x914>)
 8006626:	f9b3 2000 	ldrsh.w	r2, [r3]
 800662a:	4b30      	ldr	r3, [pc, #192]	; (80066ec <main+0x904>)
 800662c:	801a      	strh	r2, [r3, #0]
		}
		if (escRearRightCW < idleSpeedMotor)
 800662e:	4b30      	ldr	r3, [pc, #192]	; (80066f0 <main+0x908>)
 8006630:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006634:	4b31      	ldr	r3, [pc, #196]	; (80066fc <main+0x914>)
 8006636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800663a:	429a      	cmp	r2, r3
 800663c:	da04      	bge.n	8006648 <main+0x860>
		{
			escRearRightCW = idleSpeedMotor;                        //Keep the motors running.
 800663e:	4b2f      	ldr	r3, [pc, #188]	; (80066fc <main+0x914>)
 8006640:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006644:	4b2a      	ldr	r3, [pc, #168]	; (80066f0 <main+0x908>)
 8006646:	801a      	strh	r2, [r3, #0]
		}
		if (escRearLeftCCW < idleSpeedMotor)
 8006648:	4b2a      	ldr	r3, [pc, #168]	; (80066f4 <main+0x90c>)
 800664a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800664e:	4b2b      	ldr	r3, [pc, #172]	; (80066fc <main+0x914>)
 8006650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006654:	429a      	cmp	r2, r3
 8006656:	da04      	bge.n	8006662 <main+0x87a>
		{
			escRearLeftCCW = idleSpeedMotor;                        //Keep the motors running.
 8006658:	4b28      	ldr	r3, [pc, #160]	; (80066fc <main+0x914>)
 800665a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800665e:	4b25      	ldr	r3, [pc, #148]	; (80066f4 <main+0x90c>)
 8006660:	801a      	strh	r2, [r3, #0]
		}
		if (escFrontLeftCW < idleSpeedMotor)
 8006662:	4b25      	ldr	r3, [pc, #148]	; (80066f8 <main+0x910>)
 8006664:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006668:	4b24      	ldr	r3, [pc, #144]	; (80066fc <main+0x914>)
 800666a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800666e:	429a      	cmp	r2, r3
 8006670:	da04      	bge.n	800667c <main+0x894>
		{
			escFrontLeftCW = idleSpeedMotor;                        //Keep the motors running.
 8006672:	4b22      	ldr	r3, [pc, #136]	; (80066fc <main+0x914>)
 8006674:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006678:	4b1f      	ldr	r3, [pc, #124]	; (80066f8 <main+0x910>)
 800667a:	801a      	strh	r2, [r3, #0]
		}

		if (escFrontRightCCW > 2000)
 800667c:	4b1b      	ldr	r3, [pc, #108]	; (80066ec <main+0x904>)
 800667e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006682:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006686:	dd03      	ble.n	8006690 <main+0x8a8>
		{
			escFrontRightCCW = 2000;                                                 //Limit the esc-1 pulse to 2000us.
 8006688:	4b18      	ldr	r3, [pc, #96]	; (80066ec <main+0x904>)
 800668a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800668e:	801a      	strh	r2, [r3, #0]
		}
		if (escRearRightCW > 2000)
 8006690:	4b17      	ldr	r3, [pc, #92]	; (80066f0 <main+0x908>)
 8006692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006696:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800669a:	dd03      	ble.n	80066a4 <main+0x8bc>
		{
			escRearRightCW = 2000;                                                 //Limit the esc-2 pulse to 2000us.
 800669c:	4b14      	ldr	r3, [pc, #80]	; (80066f0 <main+0x908>)
 800669e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80066a2:	801a      	strh	r2, [r3, #0]
		}
		if (escRearLeftCCW > 2000)
 80066a4:	4b13      	ldr	r3, [pc, #76]	; (80066f4 <main+0x90c>)
 80066a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066aa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80066ae:	dd03      	ble.n	80066b8 <main+0x8d0>
		{
			escRearLeftCCW = 2000;                                                 //Limit the esc-3 pulse to 2000us.
 80066b0:	4b10      	ldr	r3, [pc, #64]	; (80066f4 <main+0x90c>)
 80066b2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80066b6:	801a      	strh	r2, [r3, #0]
		}
		if (escFrontLeftCW > 2000)
 80066b8:	4b0f      	ldr	r3, [pc, #60]	; (80066f8 <main+0x910>)
 80066ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066be:	e01f      	b.n	8006700 <main+0x918>
 80066c0:	20000c0c 	.word	0x20000c0c
 80066c4:	20000662 	.word	0x20000662
 80066c8:	20000663 	.word	0x20000663
 80066cc:	200009e8 	.word	0x200009e8
 80066d0:	20000694 	.word	0x20000694
 80066d4:	20000664 	.word	0x20000664
 80066d8:	20000665 	.word	0x20000665
 80066dc:	20000006 	.word	0x20000006
 80066e0:	20000690 	.word	0x20000690
 80066e4:	20000688 	.word	0x20000688
 80066e8:	200007f0 	.word	0x200007f0
 80066ec:	20000654 	.word	0x20000654
 80066f0:	20000656 	.word	0x20000656
 80066f4:	20000658 	.word	0x20000658
 80066f8:	2000065a 	.word	0x2000065a
 80066fc:	20000008 	.word	0x20000008
 8006700:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006704:	dd14      	ble.n	8006730 <main+0x948>
		{
			escFrontLeftCW = 2000;                                                 //Limit the esc-4 pulse to 2000us.
 8006706:	4b1b      	ldr	r3, [pc, #108]	; (8006774 <main+0x98c>)
 8006708:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800670c:	801a      	strh	r2, [r3, #0]
 800670e:	e00f      	b.n	8006730 <main+0x948>
		}
	}
	else
	{
		escFrontRightCCW = 1000;                                                                  //If start is not 2 keep a 1000us pulse for ess-1.
 8006710:	4b19      	ldr	r3, [pc, #100]	; (8006778 <main+0x990>)
 8006712:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006716:	801a      	strh	r2, [r3, #0]
		escRearRightCW = 1000;                                                                  //If start is not 2 keep a 1000us pulse for ess-2.
 8006718:	4b18      	ldr	r3, [pc, #96]	; (800677c <main+0x994>)
 800671a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800671e:	801a      	strh	r2, [r3, #0]
		escRearLeftCCW = 1000;                                                                  //If start is not 2 keep a 1000us pulse for ess-3.
 8006720:	4b17      	ldr	r3, [pc, #92]	; (8006780 <main+0x998>)
 8006722:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006726:	801a      	strh	r2, [r3, #0]
		escFrontLeftCW = 1000;                                                                  //If start is not 2 keep a 1000us pulse for ess-4.
 8006728:	4b12      	ldr	r3, [pc, #72]	; (8006774 <main+0x98c>)
 800672a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800672e:	801a      	strh	r2, [r3, #0]
	}

	 CHANGE_SPEED_MOTOR_FRONT_LEFT_CW(escFrontLeftCW + 400);
 8006730:	4b10      	ldr	r3, [pc, #64]	; (8006774 <main+0x98c>)
 8006732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006736:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 800673a:	4b12      	ldr	r3, [pc, #72]	; (8006784 <main+0x99c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	641a      	str	r2, [r3, #64]	; 0x40
	 CHANGE_SPEED_MOTOR_FRONT_RIGHT_CCW(escFrontRightCCW + 400);
 8006740:	4b0d      	ldr	r3, [pc, #52]	; (8006778 <main+0x990>)
 8006742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006746:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 800674a:	4b0e      	ldr	r3, [pc, #56]	; (8006784 <main+0x99c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	635a      	str	r2, [r3, #52]	; 0x34
	 CHANGE_SPEED_MOTOR_REAR_LEFT_CCW(escRearLeftCCW + 400);
 8006750:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <main+0x998>)
 8006752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006756:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 800675a:	4b0a      	ldr	r3, [pc, #40]	; (8006784 <main+0x99c>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	63da      	str	r2, [r3, #60]	; 0x3c
	 CHANGE_SPEED_MOTOR_REAR_RIGHT_CW(escRearRightCW + 400);
 8006760:	4b06      	ldr	r3, [pc, #24]	; (800677c <main+0x994>)
 8006762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006766:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 800676a:	4b06      	ldr	r3, [pc, #24]	; (8006784 <main+0x99c>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	639a      	str	r2, [r3, #56]	; 0x38
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8006770:	e480      	b.n	8006074 <main+0x28c>
 8006772:	bf00      	nop
 8006774:	2000065a 	.word	0x2000065a
 8006778:	20000654 	.word	0x20000654
 800677c:	20000656 	.word	0x20000656
 8006780:	20000658 	.word	0x20000658
 8006784:	2000052c 	.word	0x2000052c

08006788 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b094      	sub	sp, #80	; 0x50
 800678c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800678e:	f107 0320 	add.w	r3, r7, #32
 8006792:	2230      	movs	r2, #48	; 0x30
 8006794:	2100      	movs	r1, #0
 8006796:	4618      	mov	r0, r3
 8006798:	f00a f9f0 	bl	8010b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800679c:	f107 030c 	add.w	r3, r7, #12
 80067a0:	2200      	movs	r2, #0
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	605a      	str	r2, [r3, #4]
 80067a6:	609a      	str	r2, [r3, #8]
 80067a8:	60da      	str	r2, [r3, #12]
 80067aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80067ac:	2300      	movs	r3, #0
 80067ae:	60bb      	str	r3, [r7, #8]
 80067b0:	4b2d      	ldr	r3, [pc, #180]	; (8006868 <_Z18SystemClock_Configv+0xe0>)
 80067b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b4:	4a2c      	ldr	r2, [pc, #176]	; (8006868 <_Z18SystemClock_Configv+0xe0>)
 80067b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067ba:	6413      	str	r3, [r2, #64]	; 0x40
 80067bc:	4b2a      	ldr	r3, [pc, #168]	; (8006868 <_Z18SystemClock_Configv+0xe0>)
 80067be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067c4:	60bb      	str	r3, [r7, #8]
 80067c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80067c8:	2300      	movs	r3, #0
 80067ca:	607b      	str	r3, [r7, #4]
 80067cc:	4b27      	ldr	r3, [pc, #156]	; (800686c <_Z18SystemClock_Configv+0xe4>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a26      	ldr	r2, [pc, #152]	; (800686c <_Z18SystemClock_Configv+0xe4>)
 80067d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067d6:	6013      	str	r3, [r2, #0]
 80067d8:	4b24      	ldr	r3, [pc, #144]	; (800686c <_Z18SystemClock_Configv+0xe4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067e0:	607b      	str	r3, [r7, #4]
 80067e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80067e4:	2301      	movs	r3, #1
 80067e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80067e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80067ee:	2302      	movs	r3, #2
 80067f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80067f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80067f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80067f8:	2304      	movs	r3, #4
 80067fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80067fc:	2348      	movs	r3, #72	; 0x48
 80067fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006800:	2302      	movs	r3, #2
 8006802:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006804:	2304      	movs	r3, #4
 8006806:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006808:	f107 0320 	add.w	r3, r7, #32
 800680c:	4618      	mov	r0, r3
 800680e:	f004 fd81 	bl	800b314 <HAL_RCC_OscConfig>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	bf14      	ite	ne
 8006818:	2301      	movne	r3, #1
 800681a:	2300      	moveq	r3, #0
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8006822:	f001 f985 	bl	8007b30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006826:	230f      	movs	r3, #15
 8006828:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800682a:	2302      	movs	r3, #2
 800682c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800682e:	2300      	movs	r3, #0
 8006830:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006836:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800683c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800683e:	f107 030c 	add.w	r3, r7, #12
 8006842:	2102      	movs	r1, #2
 8006844:	4618      	mov	r0, r3
 8006846:	f004 ffd5 	bl	800b7f4 <HAL_RCC_ClockConfig>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	bf14      	ite	ne
 8006850:	2301      	movne	r3, #1
 8006852:	2300      	moveq	r3, #0
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800685a:	f001 f969 	bl	8007b30 <Error_Handler>
  }
}
 800685e:	bf00      	nop
 8006860:	3750      	adds	r7, #80	; 0x50
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	40023800 	.word	0x40023800
 800686c:	40007000 	.word	0x40007000

08006870 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006876:	463b      	mov	r3, r7
 8006878:	2200      	movs	r2, #0
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	605a      	str	r2, [r3, #4]
 800687e:	609a      	str	r2, [r3, #8]
 8006880:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8006882:	4b26      	ldr	r3, [pc, #152]	; (800691c <_ZL12MX_ADC1_Initv+0xac>)
 8006884:	4a26      	ldr	r2, [pc, #152]	; (8006920 <_ZL12MX_ADC1_Initv+0xb0>)
 8006886:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8006888:	4b24      	ldr	r3, [pc, #144]	; (800691c <_ZL12MX_ADC1_Initv+0xac>)
 800688a:	2200      	movs	r2, #0
 800688c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800688e:	4b23      	ldr	r3, [pc, #140]	; (800691c <_ZL12MX_ADC1_Initv+0xac>)
 8006890:	2200      	movs	r2, #0
 8006892:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8006894:	4b21      	ldr	r3, [pc, #132]	; (800691c <_ZL12MX_ADC1_Initv+0xac>)
 8006896:	2201      	movs	r2, #1
 8006898:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800689a:	4b20      	ldr	r3, [pc, #128]	; (800691c <_ZL12MX_ADC1_Initv+0xac>)
 800689c:	2200      	movs	r2, #0
 800689e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80068a0:	4b1e      	ldr	r3, [pc, #120]	; (800691c <_ZL12MX_ADC1_Initv+0xac>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80068a8:	4b1c      	ldr	r3, [pc, #112]	; (800691c <_ZL12MX_ADC1_Initv+0xac>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80068ae:	4b1b      	ldr	r3, [pc, #108]	; (800691c <_ZL12MX_ADC1_Initv+0xac>)
 80068b0:	4a1c      	ldr	r2, [pc, #112]	; (8006924 <_ZL12MX_ADC1_Initv+0xb4>)
 80068b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80068b4:	4b19      	ldr	r3, [pc, #100]	; (800691c <_ZL12MX_ADC1_Initv+0xac>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80068ba:	4b18      	ldr	r3, [pc, #96]	; (800691c <_ZL12MX_ADC1_Initv+0xac>)
 80068bc:	2201      	movs	r2, #1
 80068be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80068c0:	4b16      	ldr	r3, [pc, #88]	; (800691c <_ZL12MX_ADC1_Initv+0xac>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80068c8:	4b14      	ldr	r3, [pc, #80]	; (800691c <_ZL12MX_ADC1_Initv+0xac>)
 80068ca:	2201      	movs	r2, #1
 80068cc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80068ce:	4813      	ldr	r0, [pc, #76]	; (800691c <_ZL12MX_ADC1_Initv+0xac>)
 80068d0:	f001 fd82 	bl	80083d8 <HAL_ADC_Init>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	bf14      	ite	ne
 80068da:	2301      	movne	r3, #1
 80068dc:	2300      	moveq	r3, #0
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 80068e4:	f001 f924 	bl	8007b30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80068e8:	230a      	movs	r3, #10
 80068ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80068ec:	2301      	movs	r3, #1
 80068ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80068f0:	2301      	movs	r3, #1
 80068f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80068f4:	463b      	mov	r3, r7
 80068f6:	4619      	mov	r1, r3
 80068f8:	4808      	ldr	r0, [pc, #32]	; (800691c <_ZL12MX_ADC1_Initv+0xac>)
 80068fa:	f001 fdb1 	bl	8008460 <HAL_ADC_ConfigChannel>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	bf14      	ite	ne
 8006904:	2301      	movne	r3, #1
 8006906:	2300      	moveq	r3, #0
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 800690e:	f001 f90f 	bl	8007b30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006912:	bf00      	nop
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	20000304 	.word	0x20000304
 8006920:	40012000 	.word	0x40012000
 8006924:	0f000001 	.word	0x0f000001

08006928 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800692c:	4b15      	ldr	r3, [pc, #84]	; (8006984 <_ZL12MX_I2C1_Initv+0x5c>)
 800692e:	4a16      	ldr	r2, [pc, #88]	; (8006988 <_ZL12MX_I2C1_Initv+0x60>)
 8006930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8006932:	4b14      	ldr	r3, [pc, #80]	; (8006984 <_ZL12MX_I2C1_Initv+0x5c>)
 8006934:	4a15      	ldr	r2, [pc, #84]	; (800698c <_ZL12MX_I2C1_Initv+0x64>)
 8006936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006938:	4b12      	ldr	r3, [pc, #72]	; (8006984 <_ZL12MX_I2C1_Initv+0x5c>)
 800693a:	2200      	movs	r2, #0
 800693c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800693e:	4b11      	ldr	r3, [pc, #68]	; (8006984 <_ZL12MX_I2C1_Initv+0x5c>)
 8006940:	2200      	movs	r2, #0
 8006942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006944:	4b0f      	ldr	r3, [pc, #60]	; (8006984 <_ZL12MX_I2C1_Initv+0x5c>)
 8006946:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800694a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800694c:	4b0d      	ldr	r3, [pc, #52]	; (8006984 <_ZL12MX_I2C1_Initv+0x5c>)
 800694e:	2200      	movs	r2, #0
 8006950:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006952:	4b0c      	ldr	r3, [pc, #48]	; (8006984 <_ZL12MX_I2C1_Initv+0x5c>)
 8006954:	2200      	movs	r2, #0
 8006956:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006958:	4b0a      	ldr	r3, [pc, #40]	; (8006984 <_ZL12MX_I2C1_Initv+0x5c>)
 800695a:	2200      	movs	r2, #0
 800695c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800695e:	4b09      	ldr	r3, [pc, #36]	; (8006984 <_ZL12MX_I2C1_Initv+0x5c>)
 8006960:	2200      	movs	r2, #0
 8006962:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006964:	4807      	ldr	r0, [pc, #28]	; (8006984 <_ZL12MX_I2C1_Initv+0x5c>)
 8006966:	f002 ff7f 	bl	8009868 <HAL_I2C_Init>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	bf14      	ite	ne
 8006970:	2301      	movne	r3, #1
 8006972:	2300      	moveq	r3, #0
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800697a:	f001 f8d9 	bl	8007b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800697e:	bf00      	nop
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	200003ac 	.word	0x200003ac
 8006988:	40005400 	.word	0x40005400
 800698c:	00061a80 	.word	0x00061a80

08006990 <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006994:	4b15      	ldr	r3, [pc, #84]	; (80069ec <_ZL12MX_I2C2_Initv+0x5c>)
 8006996:	4a16      	ldr	r2, [pc, #88]	; (80069f0 <_ZL12MX_I2C2_Initv+0x60>)
 8006998:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800699a:	4b14      	ldr	r3, [pc, #80]	; (80069ec <_ZL12MX_I2C2_Initv+0x5c>)
 800699c:	4a15      	ldr	r2, [pc, #84]	; (80069f4 <_ZL12MX_I2C2_Initv+0x64>)
 800699e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80069a0:	4b12      	ldr	r3, [pc, #72]	; (80069ec <_ZL12MX_I2C2_Initv+0x5c>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80069a6:	4b11      	ldr	r3, [pc, #68]	; (80069ec <_ZL12MX_I2C2_Initv+0x5c>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80069ac:	4b0f      	ldr	r3, [pc, #60]	; (80069ec <_ZL12MX_I2C2_Initv+0x5c>)
 80069ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80069b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80069b4:	4b0d      	ldr	r3, [pc, #52]	; (80069ec <_ZL12MX_I2C2_Initv+0x5c>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80069ba:	4b0c      	ldr	r3, [pc, #48]	; (80069ec <_ZL12MX_I2C2_Initv+0x5c>)
 80069bc:	2200      	movs	r2, #0
 80069be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80069c0:	4b0a      	ldr	r3, [pc, #40]	; (80069ec <_ZL12MX_I2C2_Initv+0x5c>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80069c6:	4b09      	ldr	r3, [pc, #36]	; (80069ec <_ZL12MX_I2C2_Initv+0x5c>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80069cc:	4807      	ldr	r0, [pc, #28]	; (80069ec <_ZL12MX_I2C2_Initv+0x5c>)
 80069ce:	f002 ff4b 	bl	8009868 <HAL_I2C_Init>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	bf14      	ite	ne
 80069d8:	2301      	movne	r3, #1
 80069da:	2300      	moveq	r3, #0
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 80069e2:	f001 f8a5 	bl	8007b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80069e6:	bf00      	nop
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	20000400 	.word	0x20000400
 80069f0:	40005800 	.word	0x40005800
 80069f4:	00061a80 	.word	0x00061a80

080069f8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80069fc:	4b1a      	ldr	r3, [pc, #104]	; (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 80069fe:	4a1b      	ldr	r2, [pc, #108]	; (8006a6c <_ZL12MX_SPI1_Initv+0x74>)
 8006a00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006a02:	4b19      	ldr	r3, [pc, #100]	; (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006a08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006a0a:	4b17      	ldr	r3, [pc, #92]	; (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006a10:	4b15      	ldr	r3, [pc, #84]	; (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a16:	4b14      	ldr	r3, [pc, #80]	; (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006a1c:	4b12      	ldr	r3, [pc, #72]	; (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006a22:	4b11      	ldr	r3, [pc, #68]	; (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a2a:	4b0f      	ldr	r3, [pc, #60]	; (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006a30:	4b0d      	ldr	r3, [pc, #52]	; (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006a36:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a3c:	4b0a      	ldr	r3, [pc, #40]	; (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006a42:	4b09      	ldr	r3, [pc, #36]	; (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a44:	220a      	movs	r2, #10
 8006a46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006a48:	4807      	ldr	r0, [pc, #28]	; (8006a68 <_ZL12MX_SPI1_Initv+0x70>)
 8006a4a:	f005 f8c5 	bl	800bbd8 <HAL_SPI_Init>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	bf14      	ite	ne
 8006a54:	2301      	movne	r3, #1
 8006a56:	2300      	moveq	r3, #0
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8006a5e:	f001 f867 	bl	8007b30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006a62:	bf00      	nop
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	20000454 	.word	0x20000454
 8006a6c:	40013000 	.word	0x40013000

08006a70 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006a76:	f107 0308 	add.w	r3, r7, #8
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	605a      	str	r2, [r3, #4]
 8006a80:	609a      	str	r2, [r3, #8]
 8006a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a84:	463b      	mov	r3, r7
 8006a86:	2200      	movs	r2, #0
 8006a88:	601a      	str	r2, [r3, #0]
 8006a8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006a8c:	4b26      	ldr	r3, [pc, #152]	; (8006b28 <_ZL12MX_TIM1_Initv+0xb8>)
 8006a8e:	4a27      	ldr	r2, [pc, #156]	; (8006b2c <_ZL12MX_TIM1_Initv+0xbc>)
 8006a90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 8006a92:	4b25      	ldr	r3, [pc, #148]	; (8006b28 <_ZL12MX_TIM1_Initv+0xb8>)
 8006a94:	f240 22cf 	movw	r2, #719	; 0x2cf
 8006a98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a9a:	4b23      	ldr	r3, [pc, #140]	; (8006b28 <_ZL12MX_TIM1_Initv+0xb8>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8006aa0:	4b21      	ldr	r3, [pc, #132]	; (8006b28 <_ZL12MX_TIM1_Initv+0xb8>)
 8006aa2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006aa6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006aa8:	4b1f      	ldr	r3, [pc, #124]	; (8006b28 <_ZL12MX_TIM1_Initv+0xb8>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006aae:	4b1e      	ldr	r3, [pc, #120]	; (8006b28 <_ZL12MX_TIM1_Initv+0xb8>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ab4:	4b1c      	ldr	r3, [pc, #112]	; (8006b28 <_ZL12MX_TIM1_Initv+0xb8>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006aba:	481b      	ldr	r0, [pc, #108]	; (8006b28 <_ZL12MX_TIM1_Initv+0xb8>)
 8006abc:	f005 ff00 	bl	800c8c0 <HAL_TIM_Base_Init>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	bf14      	ite	ne
 8006ac6:	2301      	movne	r3, #1
 8006ac8:	2300      	moveq	r3, #0
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8006ad0:	f001 f82e 	bl	8007b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ad8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006ada:	f107 0308 	add.w	r3, r7, #8
 8006ade:	4619      	mov	r1, r3
 8006ae0:	4811      	ldr	r0, [pc, #68]	; (8006b28 <_ZL12MX_TIM1_Initv+0xb8>)
 8006ae2:	f006 f959 	bl	800cd98 <HAL_TIM_ConfigClockSource>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	bf14      	ite	ne
 8006aec:	2301      	movne	r3, #1
 8006aee:	2300      	moveq	r3, #0
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 8006af6:	f001 f81b 	bl	8007b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006afa:	2300      	movs	r3, #0
 8006afc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006afe:	2300      	movs	r3, #0
 8006b00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006b02:	463b      	mov	r3, r7
 8006b04:	4619      	mov	r1, r3
 8006b06:	4808      	ldr	r0, [pc, #32]	; (8006b28 <_ZL12MX_TIM1_Initv+0xb8>)
 8006b08:	f006 fd40 	bl	800d58c <HAL_TIMEx_MasterConfigSynchronization>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	bf14      	ite	ne
 8006b12:	2301      	movne	r3, #1
 8006b14:	2300      	moveq	r3, #0
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <_ZL12MX_TIM1_Initv+0xb0>
  {
    Error_Handler();
 8006b1c:	f001 f808 	bl	8007b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006b20:	bf00      	nop
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	200004ac 	.word	0x200004ac
 8006b2c:	40010000 	.word	0x40010000

08006b30 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006b36:	f107 0308 	add.w	r3, r7, #8
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	605a      	str	r2, [r3, #4]
 8006b40:	609a      	str	r2, [r3, #8]
 8006b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b44:	463b      	mov	r3, r7
 8006b46:	2200      	movs	r2, #0
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006b4c:	4b25      	ldr	r3, [pc, #148]	; (8006be4 <_ZL12MX_TIM2_Initv+0xb4>)
 8006b4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006b52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 8006b54:	4b23      	ldr	r3, [pc, #140]	; (8006be4 <_ZL12MX_TIM2_Initv+0xb4>)
 8006b56:	f240 22cf 	movw	r2, #719	; 0x2cf
 8006b5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b5c:	4b21      	ldr	r3, [pc, #132]	; (8006be4 <_ZL12MX_TIM2_Initv+0xb4>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 8006b62:	4b20      	ldr	r3, [pc, #128]	; (8006be4 <_ZL12MX_TIM2_Initv+0xb4>)
 8006b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b6a:	4b1e      	ldr	r3, [pc, #120]	; (8006be4 <_ZL12MX_TIM2_Initv+0xb4>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b70:	4b1c      	ldr	r3, [pc, #112]	; (8006be4 <_ZL12MX_TIM2_Initv+0xb4>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006b76:	481b      	ldr	r0, [pc, #108]	; (8006be4 <_ZL12MX_TIM2_Initv+0xb4>)
 8006b78:	f005 fea2 	bl	800c8c0 <HAL_TIM_Base_Init>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	bf14      	ite	ne
 8006b82:	2301      	movne	r3, #1
 8006b84:	2300      	moveq	r3, #0
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8006b8c:	f000 ffd0 	bl	8007b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006b96:	f107 0308 	add.w	r3, r7, #8
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	4811      	ldr	r0, [pc, #68]	; (8006be4 <_ZL12MX_TIM2_Initv+0xb4>)
 8006b9e:	f006 f8fb 	bl	800cd98 <HAL_TIM_ConfigClockSource>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	bf14      	ite	ne
 8006ba8:	2301      	movne	r3, #1
 8006baa:	2300      	moveq	r3, #0
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8006bb2:	f000 ffbd 	bl	8007b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006bbe:	463b      	mov	r3, r7
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4808      	ldr	r0, [pc, #32]	; (8006be4 <_ZL12MX_TIM2_Initv+0xb4>)
 8006bc4:	f006 fce2 	bl	800d58c <HAL_TIMEx_MasterConfigSynchronization>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	bf14      	ite	ne
 8006bce:	2301      	movne	r3, #1
 8006bd0:	2300      	moveq	r3, #0
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8006bd8:	f000 ffaa 	bl	8007b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006bdc:	bf00      	nop
 8006bde:	3718      	adds	r7, #24
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	200004ec 	.word	0x200004ec

08006be8 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08e      	sub	sp, #56	; 0x38
 8006bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006bee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	605a      	str	r2, [r3, #4]
 8006bf8:	609a      	str	r2, [r3, #8]
 8006bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006bfc:	f107 0320 	add.w	r3, r7, #32
 8006c00:	2200      	movs	r2, #0
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006c06:	1d3b      	adds	r3, r7, #4
 8006c08:	2200      	movs	r2, #0
 8006c0a:	601a      	str	r2, [r3, #0]
 8006c0c:	605a      	str	r2, [r3, #4]
 8006c0e:	609a      	str	r2, [r3, #8]
 8006c10:	60da      	str	r2, [r3, #12]
 8006c12:	611a      	str	r2, [r3, #16]
 8006c14:	615a      	str	r2, [r3, #20]
 8006c16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006c18:	4b51      	ldr	r3, [pc, #324]	; (8006d60 <_ZL12MX_TIM4_Initv+0x178>)
 8006c1a:	4a52      	ldr	r2, [pc, #328]	; (8006d64 <_ZL12MX_TIM4_Initv+0x17c>)
 8006c1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8006c1e:	4b50      	ldr	r3, [pc, #320]	; (8006d60 <_ZL12MX_TIM4_Initv+0x178>)
 8006c20:	2247      	movs	r2, #71	; 0x47
 8006c22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c24:	4b4e      	ldr	r3, [pc, #312]	; (8006d60 <_ZL12MX_TIM4_Initv+0x178>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8006c2a:	4b4d      	ldr	r3, [pc, #308]	; (8006d60 <_ZL12MX_TIM4_Initv+0x178>)
 8006c2c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8006c30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006c32:	4b4b      	ldr	r3, [pc, #300]	; (8006d60 <_ZL12MX_TIM4_Initv+0x178>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c38:	4b49      	ldr	r3, [pc, #292]	; (8006d60 <_ZL12MX_TIM4_Initv+0x178>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006c3e:	4848      	ldr	r0, [pc, #288]	; (8006d60 <_ZL12MX_TIM4_Initv+0x178>)
 8006c40:	f005 fe3e 	bl	800c8c0 <HAL_TIM_Base_Init>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	bf14      	ite	ne
 8006c4a:	2301      	movne	r3, #1
 8006c4c:	2300      	moveq	r3, #0
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <_ZL12MX_TIM4_Initv+0x70>
  {
    Error_Handler();
 8006c54:	f000 ff6c 	bl	8007b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8006c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006c62:	4619      	mov	r1, r3
 8006c64:	483e      	ldr	r0, [pc, #248]	; (8006d60 <_ZL12MX_TIM4_Initv+0x178>)
 8006c66:	f006 f897 	bl	800cd98 <HAL_TIM_ConfigClockSource>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	bf14      	ite	ne
 8006c70:	2301      	movne	r3, #1
 8006c72:	2300      	moveq	r3, #0
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d001      	beq.n	8006c7e <_ZL12MX_TIM4_Initv+0x96>
  {
    Error_Handler();
 8006c7a:	f000 ff59 	bl	8007b30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006c7e:	4838      	ldr	r0, [pc, #224]	; (8006d60 <_ZL12MX_TIM4_Initv+0x178>)
 8006c80:	f005 fe49 	bl	800c916 <HAL_TIM_PWM_Init>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	bf14      	ite	ne
 8006c8a:	2301      	movne	r3, #1
 8006c8c:	2300      	moveq	r3, #0
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <_ZL12MX_TIM4_Initv+0xb0>
  {
    Error_Handler();
 8006c94:	f000 ff4c 	bl	8007b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006ca0:	f107 0320 	add.w	r3, r7, #32
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	482e      	ldr	r0, [pc, #184]	; (8006d60 <_ZL12MX_TIM4_Initv+0x178>)
 8006ca8:	f006 fc70 	bl	800d58c <HAL_TIMEx_MasterConfigSynchronization>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	bf14      	ite	ne
 8006cb2:	2301      	movne	r3, #1
 8006cb4:	2300      	moveq	r3, #0
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <_ZL12MX_TIM4_Initv+0xd8>
  {
    Error_Handler();
 8006cbc:	f000 ff38 	bl	8007b30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006cc0:	2360      	movs	r3, #96	; 0x60
 8006cc2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006cd0:	1d3b      	adds	r3, r7, #4
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	4822      	ldr	r0, [pc, #136]	; (8006d60 <_ZL12MX_TIM4_Initv+0x178>)
 8006cd8:	f005 ff98 	bl	800cc0c <HAL_TIM_PWM_ConfigChannel>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	bf14      	ite	ne
 8006ce2:	2301      	movne	r3, #1
 8006ce4:	2300      	moveq	r3, #0
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <_ZL12MX_TIM4_Initv+0x108>
  {
    Error_Handler();
 8006cec:	f000 ff20 	bl	8007b30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006cf0:	1d3b      	adds	r3, r7, #4
 8006cf2:	2204      	movs	r2, #4
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	481a      	ldr	r0, [pc, #104]	; (8006d60 <_ZL12MX_TIM4_Initv+0x178>)
 8006cf8:	f005 ff88 	bl	800cc0c <HAL_TIM_PWM_ConfigChannel>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	bf14      	ite	ne
 8006d02:	2301      	movne	r3, #1
 8006d04:	2300      	moveq	r3, #0
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <_ZL12MX_TIM4_Initv+0x128>
  {
    Error_Handler();
 8006d0c:	f000 ff10 	bl	8007b30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006d10:	1d3b      	adds	r3, r7, #4
 8006d12:	2208      	movs	r2, #8
 8006d14:	4619      	mov	r1, r3
 8006d16:	4812      	ldr	r0, [pc, #72]	; (8006d60 <_ZL12MX_TIM4_Initv+0x178>)
 8006d18:	f005 ff78 	bl	800cc0c <HAL_TIM_PWM_ConfigChannel>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	bf14      	ite	ne
 8006d22:	2301      	movne	r3, #1
 8006d24:	2300      	moveq	r3, #0
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <_ZL12MX_TIM4_Initv+0x148>
  {
    Error_Handler();
 8006d2c:	f000 ff00 	bl	8007b30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006d30:	1d3b      	adds	r3, r7, #4
 8006d32:	220c      	movs	r2, #12
 8006d34:	4619      	mov	r1, r3
 8006d36:	480a      	ldr	r0, [pc, #40]	; (8006d60 <_ZL12MX_TIM4_Initv+0x178>)
 8006d38:	f005 ff68 	bl	800cc0c <HAL_TIM_PWM_ConfigChannel>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	bf14      	ite	ne
 8006d42:	2301      	movne	r3, #1
 8006d44:	2300      	moveq	r3, #0
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <_ZL12MX_TIM4_Initv+0x168>
  {
    Error_Handler();
 8006d4c:	f000 fef0 	bl	8007b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006d50:	4803      	ldr	r0, [pc, #12]	; (8006d60 <_ZL12MX_TIM4_Initv+0x178>)
 8006d52:	f001 f909 	bl	8007f68 <HAL_TIM_MspPostInit>

}
 8006d56:	bf00      	nop
 8006d58:	3738      	adds	r7, #56	; 0x38
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	2000052c 	.word	0x2000052c
 8006d64:	40000800 	.word	0x40000800

08006d68 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8006d6c:	4b13      	ldr	r3, [pc, #76]	; (8006dbc <_ZL13MX_UART4_Initv+0x54>)
 8006d6e:	4a14      	ldr	r2, [pc, #80]	; (8006dc0 <_ZL13MX_UART4_Initv+0x58>)
 8006d70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8006d72:	4b12      	ldr	r3, [pc, #72]	; (8006dbc <_ZL13MX_UART4_Initv+0x54>)
 8006d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006d78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8006d7a:	4b10      	ldr	r3, [pc, #64]	; (8006dbc <_ZL13MX_UART4_Initv+0x54>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006d80:	4b0e      	ldr	r3, [pc, #56]	; (8006dbc <_ZL13MX_UART4_Initv+0x54>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8006d86:	4b0d      	ldr	r3, [pc, #52]	; (8006dbc <_ZL13MX_UART4_Initv+0x54>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8006d8c:	4b0b      	ldr	r3, [pc, #44]	; (8006dbc <_ZL13MX_UART4_Initv+0x54>)
 8006d8e:	220c      	movs	r2, #12
 8006d90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d92:	4b0a      	ldr	r3, [pc, #40]	; (8006dbc <_ZL13MX_UART4_Initv+0x54>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d98:	4b08      	ldr	r3, [pc, #32]	; (8006dbc <_ZL13MX_UART4_Initv+0x54>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8006d9e:	4807      	ldr	r0, [pc, #28]	; (8006dbc <_ZL13MX_UART4_Initv+0x54>)
 8006da0:	f006 fc84 	bl	800d6ac <HAL_UART_Init>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	bf14      	ite	ne
 8006daa:	2301      	movne	r3, #1
 8006dac:	2300      	moveq	r3, #0
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 8006db4:	f000 febc 	bl	8007b30 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8006db8:	bf00      	nop
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	2000056c 	.word	0x2000056c
 8006dc0:	40004c00 	.word	0x40004c00

08006dc4 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8006dc8:	4b13      	ldr	r3, [pc, #76]	; (8006e18 <_ZL13MX_UART5_Initv+0x54>)
 8006dca:	4a14      	ldr	r2, [pc, #80]	; (8006e1c <_ZL13MX_UART5_Initv+0x58>)
 8006dcc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8006dce:	4b12      	ldr	r3, [pc, #72]	; (8006e18 <_ZL13MX_UART5_Initv+0x54>)
 8006dd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006dd4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8006dd6:	4b10      	ldr	r3, [pc, #64]	; (8006e18 <_ZL13MX_UART5_Initv+0x54>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006ddc:	4b0e      	ldr	r3, [pc, #56]	; (8006e18 <_ZL13MX_UART5_Initv+0x54>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006de2:	4b0d      	ldr	r3, [pc, #52]	; (8006e18 <_ZL13MX_UART5_Initv+0x54>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8006de8:	4b0b      	ldr	r3, [pc, #44]	; (8006e18 <_ZL13MX_UART5_Initv+0x54>)
 8006dea:	220c      	movs	r2, #12
 8006dec:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006dee:	4b0a      	ldr	r3, [pc, #40]	; (8006e18 <_ZL13MX_UART5_Initv+0x54>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006df4:	4b08      	ldr	r3, [pc, #32]	; (8006e18 <_ZL13MX_UART5_Initv+0x54>)
 8006df6:	2200      	movs	r2, #0
 8006df8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8006dfa:	4807      	ldr	r0, [pc, #28]	; (8006e18 <_ZL13MX_UART5_Initv+0x54>)
 8006dfc:	f006 fc56 	bl	800d6ac <HAL_UART_Init>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	bf14      	ite	ne
 8006e06:	2301      	movne	r3, #1
 8006e08:	2300      	moveq	r3, #0
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d001      	beq.n	8006e14 <_ZL13MX_UART5_Initv+0x50>
  {
    Error_Handler();
 8006e10:	f000 fe8e 	bl	8007b30 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8006e14:	bf00      	nop
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	200005ac 	.word	0x200005ac
 8006e1c:	40005000 	.word	0x40005000

08006e20 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006e24:	4b13      	ldr	r3, [pc, #76]	; (8006e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006e26:	4a14      	ldr	r2, [pc, #80]	; (8006e78 <_ZL19MX_USART1_UART_Initv+0x58>)
 8006e28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006e2a:	4b12      	ldr	r3, [pc, #72]	; (8006e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006e2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006e30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006e32:	4b10      	ldr	r3, [pc, #64]	; (8006e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006e38:	4b0e      	ldr	r3, [pc, #56]	; (8006e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006e3e:	4b0d      	ldr	r3, [pc, #52]	; (8006e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006e44:	4b0b      	ldr	r3, [pc, #44]	; (8006e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006e46:	220c      	movs	r2, #12
 8006e48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006e4a:	4b0a      	ldr	r3, [pc, #40]	; (8006e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006e50:	4b08      	ldr	r3, [pc, #32]	; (8006e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006e52:	2200      	movs	r2, #0
 8006e54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006e56:	4807      	ldr	r0, [pc, #28]	; (8006e74 <_ZL19MX_USART1_UART_Initv+0x54>)
 8006e58:	f006 fc28 	bl	800d6ac <HAL_UART_Init>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	bf14      	ite	ne
 8006e62:	2301      	movne	r3, #1
 8006e64:	2300      	moveq	r3, #0
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8006e6c:	f000 fe60 	bl	8007b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006e70:	bf00      	nop
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	200005ec 	.word	0x200005ec
 8006e78:	40011000 	.word	0x40011000

08006e7c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006e82:	2300      	movs	r3, #0
 8006e84:	607b      	str	r3, [r7, #4]
 8006e86:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <_ZL11MX_DMA_Initv+0x3c>)
 8006e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8a:	4a0b      	ldr	r2, [pc, #44]	; (8006eb8 <_ZL11MX_DMA_Initv+0x3c>)
 8006e8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e90:	6313      	str	r3, [r2, #48]	; 0x30
 8006e92:	4b09      	ldr	r3, [pc, #36]	; (8006eb8 <_ZL11MX_DMA_Initv+0x3c>)
 8006e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e9a:	607b      	str	r3, [r7, #4]
 8006e9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	2038      	movs	r0, #56	; 0x38
 8006ea4:	f001 fdd5 	bl	8008a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006ea8:	2038      	movs	r0, #56	; 0x38
 8006eaa:	f001 fdee 	bl	8008a8a <HAL_NVIC_EnableIRQ>

}
 8006eae:	bf00      	nop
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	40023800 	.word	0x40023800

08006ebc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08c      	sub	sp, #48	; 0x30
 8006ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ec2:	f107 031c 	add.w	r3, r7, #28
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	601a      	str	r2, [r3, #0]
 8006eca:	605a      	str	r2, [r3, #4]
 8006ecc:	609a      	str	r2, [r3, #8]
 8006ece:	60da      	str	r2, [r3, #12]
 8006ed0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	61bb      	str	r3, [r7, #24]
 8006ed6:	4b57      	ldr	r3, [pc, #348]	; (8007034 <_ZL12MX_GPIO_Initv+0x178>)
 8006ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eda:	4a56      	ldr	r2, [pc, #344]	; (8007034 <_ZL12MX_GPIO_Initv+0x178>)
 8006edc:	f043 0310 	orr.w	r3, r3, #16
 8006ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ee2:	4b54      	ldr	r3, [pc, #336]	; (8007034 <_ZL12MX_GPIO_Initv+0x178>)
 8006ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee6:	f003 0310 	and.w	r3, r3, #16
 8006eea:	61bb      	str	r3, [r7, #24]
 8006eec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006eee:	2300      	movs	r3, #0
 8006ef0:	617b      	str	r3, [r7, #20]
 8006ef2:	4b50      	ldr	r3, [pc, #320]	; (8007034 <_ZL12MX_GPIO_Initv+0x178>)
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef6:	4a4f      	ldr	r2, [pc, #316]	; (8007034 <_ZL12MX_GPIO_Initv+0x178>)
 8006ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006efc:	6313      	str	r3, [r2, #48]	; 0x30
 8006efe:	4b4d      	ldr	r3, [pc, #308]	; (8007034 <_ZL12MX_GPIO_Initv+0x178>)
 8006f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	613b      	str	r3, [r7, #16]
 8006f0e:	4b49      	ldr	r3, [pc, #292]	; (8007034 <_ZL12MX_GPIO_Initv+0x178>)
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	4a48      	ldr	r2, [pc, #288]	; (8007034 <_ZL12MX_GPIO_Initv+0x178>)
 8006f14:	f043 0304 	orr.w	r3, r3, #4
 8006f18:	6313      	str	r3, [r2, #48]	; 0x30
 8006f1a:	4b46      	ldr	r3, [pc, #280]	; (8007034 <_ZL12MX_GPIO_Initv+0x178>)
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1e:	f003 0304 	and.w	r3, r3, #4
 8006f22:	613b      	str	r3, [r7, #16]
 8006f24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	4b42      	ldr	r3, [pc, #264]	; (8007034 <_ZL12MX_GPIO_Initv+0x178>)
 8006f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2e:	4a41      	ldr	r2, [pc, #260]	; (8007034 <_ZL12MX_GPIO_Initv+0x178>)
 8006f30:	f043 0301 	orr.w	r3, r3, #1
 8006f34:	6313      	str	r3, [r2, #48]	; 0x30
 8006f36:	4b3f      	ldr	r3, [pc, #252]	; (8007034 <_ZL12MX_GPIO_Initv+0x178>)
 8006f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f42:	2300      	movs	r3, #0
 8006f44:	60bb      	str	r3, [r7, #8]
 8006f46:	4b3b      	ldr	r3, [pc, #236]	; (8007034 <_ZL12MX_GPIO_Initv+0x178>)
 8006f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4a:	4a3a      	ldr	r2, [pc, #232]	; (8007034 <_ZL12MX_GPIO_Initv+0x178>)
 8006f4c:	f043 0302 	orr.w	r3, r3, #2
 8006f50:	6313      	str	r3, [r2, #48]	; 0x30
 8006f52:	4b38      	ldr	r3, [pc, #224]	; (8007034 <_ZL12MX_GPIO_Initv+0x178>)
 8006f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	60bb      	str	r3, [r7, #8]
 8006f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f5e:	2300      	movs	r3, #0
 8006f60:	607b      	str	r3, [r7, #4]
 8006f62:	4b34      	ldr	r3, [pc, #208]	; (8007034 <_ZL12MX_GPIO_Initv+0x178>)
 8006f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f66:	4a33      	ldr	r2, [pc, #204]	; (8007034 <_ZL12MX_GPIO_Initv+0x178>)
 8006f68:	f043 0308 	orr.w	r3, r3, #8
 8006f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f6e:	4b31      	ldr	r3, [pc, #196]	; (8007034 <_ZL12MX_GPIO_Initv+0x178>)
 8006f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f72:	f003 0308 	and.w	r3, r3, #8
 8006f76:	607b      	str	r3, [r7, #4]
 8006f78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	211c      	movs	r1, #28
 8006f7e:	482e      	ldr	r0, [pc, #184]	; (8007038 <_ZL12MX_GPIO_Initv+0x17c>)
 8006f80:	f002 fc3e 	bl	8009800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8006f84:	2200      	movs	r2, #0
 8006f86:	2110      	movs	r1, #16
 8006f88:	482c      	ldr	r0, [pc, #176]	; (800703c <_ZL12MX_GPIO_Initv+0x180>)
 8006f8a:	f002 fc39 	bl	8009800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8006f8e:	2200      	movs	r2, #0
 8006f90:	2120      	movs	r1, #32
 8006f92:	482b      	ldr	r0, [pc, #172]	; (8007040 <_ZL12MX_GPIO_Initv+0x184>)
 8006f94:	f002 fc34 	bl	8009800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, COI_Pin|RGB3_Pin|RGB2_Pin|RGB1_Pin, GPIO_PIN_RESET);
 8006f98:	2200      	movs	r2, #0
 8006f9a:	21e8      	movs	r1, #232	; 0xe8
 8006f9c:	4829      	ldr	r0, [pc, #164]	; (8007044 <_ZL12MX_GPIO_Initv+0x188>)
 8006f9e:	f002 fc2f 	bl	8009800 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8006fa2:	231c      	movs	r3, #28
 8006fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006faa:	2300      	movs	r3, #0
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006fb2:	f107 031c 	add.w	r3, r7, #28
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	481f      	ldr	r0, [pc, #124]	; (8007038 <_ZL12MX_GPIO_Initv+0x17c>)
 8006fba:	f002 fa87 	bl	80094cc <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin;
 8006fbe:	2310      	movs	r3, #16
 8006fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NRF_CSN_GPIO_Port, &GPIO_InitStruct);
 8006fce:	f107 031c 	add.w	r3, r7, #28
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	4819      	ldr	r0, [pc, #100]	; (800703c <_ZL12MX_GPIO_Initv+0x180>)
 8006fd6:	f002 fa79 	bl	80094cc <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8006fda:	2320      	movs	r3, #32
 8006fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8006fea:	f107 031c 	add.w	r3, r7, #28
 8006fee:	4619      	mov	r1, r3
 8006ff0:	4813      	ldr	r0, [pc, #76]	; (8007040 <_ZL12MX_GPIO_Initv+0x184>)
 8006ff2:	f002 fa6b 	bl	80094cc <HAL_GPIO_Init>

  /*Configure GPIO pins : DRDY_Pin INTA_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|INTA_Pin;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006ffa:	4b13      	ldr	r3, [pc, #76]	; (8007048 <_ZL12MX_GPIO_Initv+0x18c>)
 8006ffc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007002:	f107 031c 	add.w	r3, r7, #28
 8007006:	4619      	mov	r1, r3
 8007008:	480e      	ldr	r0, [pc, #56]	; (8007044 <_ZL12MX_GPIO_Initv+0x188>)
 800700a:	f002 fa5f 	bl	80094cc <HAL_GPIO_Init>

  /*Configure GPIO pins : COI_Pin RGB3_Pin RGB2_Pin RGB1_Pin */
  GPIO_InitStruct.Pin = COI_Pin|RGB3_Pin|RGB2_Pin|RGB1_Pin;
 800700e:	23e8      	movs	r3, #232	; 0xe8
 8007010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007012:	2301      	movs	r3, #1
 8007014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007016:	2300      	movs	r3, #0
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800701a:	2300      	movs	r3, #0
 800701c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800701e:	f107 031c 	add.w	r3, r7, #28
 8007022:	4619      	mov	r1, r3
 8007024:	4807      	ldr	r0, [pc, #28]	; (8007044 <_ZL12MX_GPIO_Initv+0x188>)
 8007026:	f002 fa51 	bl	80094cc <HAL_GPIO_Init>

}
 800702a:	bf00      	nop
 800702c:	3730      	adds	r7, #48	; 0x30
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	40023800 	.word	0x40023800
 8007038:	40021000 	.word	0x40021000
 800703c:	40020000 	.word	0x40020000
 8007040:	40020800 	.word	0x40020800
 8007044:	40020c00 	.word	0x40020c00
 8007048:	10110000 	.word	0x10110000
 800704c:	00000000 	.word	0x00000000

08007050 <_Z13ChangeSettingv>:

/* USER CODE BEGIN 4 */
void ChangeSetting()
{
 8007050:	b5b0      	push	{r4, r5, r7, lr}
 8007052:	b08a      	sub	sp, #40	; 0x28
 8007054:	af00      	add	r7, sp, #0
	//TODO nhay den bao hieu
	float adjustableRollPitchValuePgain = pidForHorizontal.roll.Pgain;
 8007056:	4bc2      	ldr	r3, [pc, #776]	; (8007360 <_Z13ChangeSettingv+0x310>)
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	627b      	str	r3, [r7, #36]	; 0x24
	float adjustableRollPitchValueIgain = pidForHorizontal.roll.Igain;
 800705c:	4bc0      	ldr	r3, [pc, #768]	; (8007360 <_Z13ChangeSettingv+0x310>)
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	623b      	str	r3, [r7, #32]
	float adjustableRollPitchValueDgain = pidForHorizontal.roll.Dgain;
 8007062:	4bbf      	ldr	r3, [pc, #764]	; (8007360 <_Z13ChangeSettingv+0x310>)
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	61fb      	str	r3, [r7, #28]

	float adjustableYawValuePgain = pidForHorizontal.yaw.Pgain;
 8007068:	4bbd      	ldr	r3, [pc, #756]	; (8007360 <_Z13ChangeSettingv+0x310>)
 800706a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800706c:	61bb      	str	r3, [r7, #24]
	float adjustableYawValueIgain = pidForHorizontal.yaw.Igain;
 800706e:	4bbc      	ldr	r3, [pc, #752]	; (8007360 <_Z13ChangeSettingv+0x310>)
 8007070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007072:	617b      	str	r3, [r7, #20]
	float adjustableYawValueDgain = pidForHorizontal.yaw.Dgain;
 8007074:	4bba      	ldr	r3, [pc, #744]	; (8007360 <_Z13ChangeSettingv+0x310>)
 8007076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007078:	613b      	str	r3, [r7, #16]

	float adjustableAltitudeValuePgain = ms5611.pid_Pgain_Altitude;
 800707a:	4bba      	ldr	r3, [pc, #744]	; (8007364 <_Z13ChangeSettingv+0x314>)
 800707c:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8007080:	60fb      	str	r3, [r7, #12]
	float adjustableAltitudeValueIgain = ms5611.pid_Igain_Altitude;
 8007082:	4bb8      	ldr	r3, [pc, #736]	; (8007364 <_Z13ChangeSettingv+0x314>)
 8007084:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8007088:	60bb      	str	r3, [r7, #8]
	float adjustableAltitudeValueDgain = ms5611.pid_Dgain_Altitude;
 800708a:	4bb6      	ldr	r3, [pc, #728]	; (8007364 <_Z13ChangeSettingv+0x314>)
 800708c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8007090:	607b      	str	r3, [r7, #4]



	for(int i=1;i<=5;i++)
 8007092:	2301      	movs	r3, #1
 8007094:	603b      	str	r3, [r7, #0]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b05      	cmp	r3, #5
 800709a:	f300 83d1 	bgt.w	8007840 <_Z13ChangeSettingv+0x7f0>
	{
		DWT_Delay_us(4000);
 800709e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80070a2:	f7fe fda3 	bl	8005bec <DWT_Delay_us>

		if((throttle > 950) && (throttle < 1150) )
 80070a6:	4bb0      	ldr	r3, [pc, #704]	; (8007368 <_Z13ChangeSettingv+0x318>)
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	f240 32b6 	movw	r2, #950	; 0x3b6
 80070ae:	4293      	cmp	r3, r2
 80070b0:	f240 8136 	bls.w	8007320 <_Z13ChangeSettingv+0x2d0>
 80070b4:	4bac      	ldr	r3, [pc, #688]	; (8007368 <_Z13ChangeSettingv+0x318>)
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	f240 427d 	movw	r2, #1149	; 0x47d
 80070bc:	4293      	cmp	r3, r2
 80070be:	f200 812f 	bhi.w	8007320 <_Z13ChangeSettingv+0x2d0>
		{
			if (roll > 1550) adjustableRollPitchValuePgain += (float)(roll - 1550) * 0.000001;
 80070c2:	4baa      	ldr	r3, [pc, #680]	; (800736c <_Z13ChangeSettingv+0x31c>)
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	f240 620e 	movw	r2, #1550	; 0x60e
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d923      	bls.n	8007116 <_Z13ChangeSettingv+0xc6>
 80070ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070d0:	f7f9 f9de 	bl	8000490 <__aeabi_f2d>
 80070d4:	4604      	mov	r4, r0
 80070d6:	460d      	mov	r5, r1
 80070d8:	4ba4      	ldr	r3, [pc, #656]	; (800736c <_Z13ChangeSettingv+0x31c>)
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	f2a3 630e 	subw	r3, r3, #1550	; 0x60e
 80070e0:	ee07 3a90 	vmov	s15, r3
 80070e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070e8:	ee17 0a90 	vmov	r0, s15
 80070ec:	f7f9 f9d0 	bl	8000490 <__aeabi_f2d>
 80070f0:	a399      	add	r3, pc, #612	; (adr r3, 8007358 <_Z13ChangeSettingv+0x308>)
 80070f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f6:	f7f9 fa23 	bl	8000540 <__aeabi_dmul>
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	4620      	mov	r0, r4
 8007100:	4629      	mov	r1, r5
 8007102:	f7f9 f867 	bl	80001d4 <__adddf3>
 8007106:	4603      	mov	r3, r0
 8007108:	460c      	mov	r4, r1
 800710a:	4618      	mov	r0, r3
 800710c:	4621      	mov	r1, r4
 800710e:	f7f9 fd0f 	bl	8000b30 <__aeabi_d2f>
 8007112:	4603      	mov	r3, r0
 8007114:	627b      	str	r3, [r7, #36]	; 0x24
			if (roll < 1450) adjustableRollPitchValuePgain -= (float)(1450 - roll) * 0.000001;
 8007116:	4b95      	ldr	r3, [pc, #596]	; (800736c <_Z13ChangeSettingv+0x31c>)
 8007118:	881b      	ldrh	r3, [r3, #0]
 800711a:	f240 52a9 	movw	r2, #1449	; 0x5a9
 800711e:	4293      	cmp	r3, r2
 8007120:	d824      	bhi.n	800716c <_Z13ChangeSettingv+0x11c>
 8007122:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007124:	f7f9 f9b4 	bl	8000490 <__aeabi_f2d>
 8007128:	4604      	mov	r4, r0
 800712a:	460d      	mov	r5, r1
 800712c:	4b8f      	ldr	r3, [pc, #572]	; (800736c <_Z13ChangeSettingv+0x31c>)
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	f5c3 63b5 	rsb	r3, r3, #1448	; 0x5a8
 8007134:	3302      	adds	r3, #2
 8007136:	ee07 3a90 	vmov	s15, r3
 800713a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800713e:	ee17 0a90 	vmov	r0, s15
 8007142:	f7f9 f9a5 	bl	8000490 <__aeabi_f2d>
 8007146:	a384      	add	r3, pc, #528	; (adr r3, 8007358 <_Z13ChangeSettingv+0x308>)
 8007148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714c:	f7f9 f9f8 	bl	8000540 <__aeabi_dmul>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	4620      	mov	r0, r4
 8007156:	4629      	mov	r1, r5
 8007158:	f7f9 f83a 	bl	80001d0 <__aeabi_dsub>
 800715c:	4603      	mov	r3, r0
 800715e:	460c      	mov	r4, r1
 8007160:	4618      	mov	r0, r3
 8007162:	4621      	mov	r1, r4
 8007164:	f7f9 fce4 	bl	8000b30 <__aeabi_d2f>
 8007168:	4603      	mov	r3, r0
 800716a:	627b      	str	r3, [r7, #36]	; 0x24
			if (adjustableRollPitchValuePgain < 0)adjustableRollPitchValuePgain = 0;
 800716c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007170:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007178:	d502      	bpl.n	8007180 <_Z13ChangeSettingv+0x130>
 800717a:	f04f 0300 	mov.w	r3, #0
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
			pidForHorizontal.roll.Pgain = adjustableRollPitchValuePgain;
 8007180:	4a77      	ldr	r2, [pc, #476]	; (8007360 <_Z13ChangeSettingv+0x310>)
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	6053      	str	r3, [r2, #4]
			pidForHorizontal.pitch.Pgain = adjustableRollPitchValuePgain;
 8007186:	4a76      	ldr	r2, [pc, #472]	; (8007360 <_Z13ChangeSettingv+0x310>)
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	6353      	str	r3, [r2, #52]	; 0x34

			if (pitch > 1550)adjustableRollPitchValueIgain += (float)(pitch - 1550) * 0.000001;
 800718c:	4b78      	ldr	r3, [pc, #480]	; (8007370 <_Z13ChangeSettingv+0x320>)
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	f240 620e 	movw	r2, #1550	; 0x60e
 8007194:	4293      	cmp	r3, r2
 8007196:	d923      	bls.n	80071e0 <_Z13ChangeSettingv+0x190>
 8007198:	6a38      	ldr	r0, [r7, #32]
 800719a:	f7f9 f979 	bl	8000490 <__aeabi_f2d>
 800719e:	4604      	mov	r4, r0
 80071a0:	460d      	mov	r5, r1
 80071a2:	4b73      	ldr	r3, [pc, #460]	; (8007370 <_Z13ChangeSettingv+0x320>)
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	f2a3 630e 	subw	r3, r3, #1550	; 0x60e
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071b2:	ee17 0a90 	vmov	r0, s15
 80071b6:	f7f9 f96b 	bl	8000490 <__aeabi_f2d>
 80071ba:	a367      	add	r3, pc, #412	; (adr r3, 8007358 <_Z13ChangeSettingv+0x308>)
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	f7f9 f9be 	bl	8000540 <__aeabi_dmul>
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	4620      	mov	r0, r4
 80071ca:	4629      	mov	r1, r5
 80071cc:	f7f9 f802 	bl	80001d4 <__adddf3>
 80071d0:	4603      	mov	r3, r0
 80071d2:	460c      	mov	r4, r1
 80071d4:	4618      	mov	r0, r3
 80071d6:	4621      	mov	r1, r4
 80071d8:	f7f9 fcaa 	bl	8000b30 <__aeabi_d2f>
 80071dc:	4603      	mov	r3, r0
 80071de:	623b      	str	r3, [r7, #32]
			if (pitch < 1450)adjustableRollPitchValueIgain -= (float)(1450 - pitch) * 0.000001;
 80071e0:	4b63      	ldr	r3, [pc, #396]	; (8007370 <_Z13ChangeSettingv+0x320>)
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	f240 52a9 	movw	r2, #1449	; 0x5a9
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d824      	bhi.n	8007236 <_Z13ChangeSettingv+0x1e6>
 80071ec:	6a38      	ldr	r0, [r7, #32]
 80071ee:	f7f9 f94f 	bl	8000490 <__aeabi_f2d>
 80071f2:	4604      	mov	r4, r0
 80071f4:	460d      	mov	r5, r1
 80071f6:	4b5e      	ldr	r3, [pc, #376]	; (8007370 <_Z13ChangeSettingv+0x320>)
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	f5c3 63b5 	rsb	r3, r3, #1448	; 0x5a8
 80071fe:	3302      	adds	r3, #2
 8007200:	ee07 3a90 	vmov	s15, r3
 8007204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007208:	ee17 0a90 	vmov	r0, s15
 800720c:	f7f9 f940 	bl	8000490 <__aeabi_f2d>
 8007210:	a351      	add	r3, pc, #324	; (adr r3, 8007358 <_Z13ChangeSettingv+0x308>)
 8007212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007216:	f7f9 f993 	bl	8000540 <__aeabi_dmul>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4620      	mov	r0, r4
 8007220:	4629      	mov	r1, r5
 8007222:	f7f8 ffd5 	bl	80001d0 <__aeabi_dsub>
 8007226:	4603      	mov	r3, r0
 8007228:	460c      	mov	r4, r1
 800722a:	4618      	mov	r0, r3
 800722c:	4621      	mov	r1, r4
 800722e:	f7f9 fc7f 	bl	8000b30 <__aeabi_d2f>
 8007232:	4603      	mov	r3, r0
 8007234:	623b      	str	r3, [r7, #32]
			if (adjustableRollPitchValueIgain < 0)adjustableRollPitchValueIgain = 0;
 8007236:	edd7 7a08 	vldr	s15, [r7, #32]
 800723a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800723e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007242:	d502      	bpl.n	800724a <_Z13ChangeSettingv+0x1fa>
 8007244:	f04f 0300 	mov.w	r3, #0
 8007248:	623b      	str	r3, [r7, #32]
			pidForHorizontal.roll.Igain = adjustableRollPitchValueIgain;
 800724a:	4a45      	ldr	r2, [pc, #276]	; (8007360 <_Z13ChangeSettingv+0x310>)
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	6093      	str	r3, [r2, #8]
			pidForHorizontal.pitch.Igain = adjustableRollPitchValueIgain;
 8007250:	4a43      	ldr	r2, [pc, #268]	; (8007360 <_Z13ChangeSettingv+0x310>)
 8007252:	6a3b      	ldr	r3, [r7, #32]
 8007254:	6393      	str	r3, [r2, #56]	; 0x38

			if (yaw > 1550)adjustableRollPitchValueDgain += (float)(yaw - 1550) * 0.000001;
 8007256:	4b47      	ldr	r3, [pc, #284]	; (8007374 <_Z13ChangeSettingv+0x324>)
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	f240 620e 	movw	r2, #1550	; 0x60e
 800725e:	4293      	cmp	r3, r2
 8007260:	d923      	bls.n	80072aa <_Z13ChangeSettingv+0x25a>
 8007262:	69f8      	ldr	r0, [r7, #28]
 8007264:	f7f9 f914 	bl	8000490 <__aeabi_f2d>
 8007268:	4604      	mov	r4, r0
 800726a:	460d      	mov	r5, r1
 800726c:	4b41      	ldr	r3, [pc, #260]	; (8007374 <_Z13ChangeSettingv+0x324>)
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	f2a3 630e 	subw	r3, r3, #1550	; 0x60e
 8007274:	ee07 3a90 	vmov	s15, r3
 8007278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800727c:	ee17 0a90 	vmov	r0, s15
 8007280:	f7f9 f906 	bl	8000490 <__aeabi_f2d>
 8007284:	a334      	add	r3, pc, #208	; (adr r3, 8007358 <_Z13ChangeSettingv+0x308>)
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	f7f9 f959 	bl	8000540 <__aeabi_dmul>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	4620      	mov	r0, r4
 8007294:	4629      	mov	r1, r5
 8007296:	f7f8 ff9d 	bl	80001d4 <__adddf3>
 800729a:	4603      	mov	r3, r0
 800729c:	460c      	mov	r4, r1
 800729e:	4618      	mov	r0, r3
 80072a0:	4621      	mov	r1, r4
 80072a2:	f7f9 fc45 	bl	8000b30 <__aeabi_d2f>
 80072a6:	4603      	mov	r3, r0
 80072a8:	61fb      	str	r3, [r7, #28]
			if (yaw < 1450)adjustableRollPitchValueDgain -= (float)(1450 - yaw) * 0.000001;
 80072aa:	4b32      	ldr	r3, [pc, #200]	; (8007374 <_Z13ChangeSettingv+0x324>)
 80072ac:	881b      	ldrh	r3, [r3, #0]
 80072ae:	f240 52a9 	movw	r2, #1449	; 0x5a9
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d824      	bhi.n	8007300 <_Z13ChangeSettingv+0x2b0>
 80072b6:	69f8      	ldr	r0, [r7, #28]
 80072b8:	f7f9 f8ea 	bl	8000490 <__aeabi_f2d>
 80072bc:	4604      	mov	r4, r0
 80072be:	460d      	mov	r5, r1
 80072c0:	4b2c      	ldr	r3, [pc, #176]	; (8007374 <_Z13ChangeSettingv+0x324>)
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	f5c3 63b5 	rsb	r3, r3, #1448	; 0x5a8
 80072c8:	3302      	adds	r3, #2
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072d2:	ee17 0a90 	vmov	r0, s15
 80072d6:	f7f9 f8db 	bl	8000490 <__aeabi_f2d>
 80072da:	a31f      	add	r3, pc, #124	; (adr r3, 8007358 <_Z13ChangeSettingv+0x308>)
 80072dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e0:	f7f9 f92e 	bl	8000540 <__aeabi_dmul>
 80072e4:	4602      	mov	r2, r0
 80072e6:	460b      	mov	r3, r1
 80072e8:	4620      	mov	r0, r4
 80072ea:	4629      	mov	r1, r5
 80072ec:	f7f8 ff70 	bl	80001d0 <__aeabi_dsub>
 80072f0:	4603      	mov	r3, r0
 80072f2:	460c      	mov	r4, r1
 80072f4:	4618      	mov	r0, r3
 80072f6:	4621      	mov	r1, r4
 80072f8:	f7f9 fc1a 	bl	8000b30 <__aeabi_d2f>
 80072fc:	4603      	mov	r3, r0
 80072fe:	61fb      	str	r3, [r7, #28]
			if (adjustableRollPitchValueDgain < 0)adjustableRollPitchValueDgain = 0;
 8007300:	edd7 7a07 	vldr	s15, [r7, #28]
 8007304:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800730c:	d502      	bpl.n	8007314 <_Z13ChangeSettingv+0x2c4>
 800730e:	f04f 0300 	mov.w	r3, #0
 8007312:	61fb      	str	r3, [r7, #28]
			pidForHorizontal.roll.Dgain = adjustableRollPitchValueDgain;
 8007314:	4a12      	ldr	r2, [pc, #72]	; (8007360 <_Z13ChangeSettingv+0x310>)
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	60d3      	str	r3, [r2, #12]
			pidForHorizontal.pitch.Dgain = adjustableRollPitchValueDgain;
 800731a:	4a11      	ldr	r2, [pc, #68]	; (8007360 <_Z13ChangeSettingv+0x310>)
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	63d3      	str	r3, [r2, #60]	; 0x3c
		}

		if((throttle > 1400) && (throttle < 1600) )
 8007320:	4b11      	ldr	r3, [pc, #68]	; (8007368 <_Z13ChangeSettingv+0x318>)
 8007322:	881b      	ldrh	r3, [r3, #0]
 8007324:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8007328:	f240 813d 	bls.w	80075a6 <_Z13ChangeSettingv+0x556>
 800732c:	4b0e      	ldr	r3, [pc, #56]	; (8007368 <_Z13ChangeSettingv+0x318>)
 800732e:	881b      	ldrh	r3, [r3, #0]
 8007330:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007334:	f080 8137 	bcs.w	80075a6 <_Z13ChangeSettingv+0x556>
		{
			if (roll > 1550) adjustableYawValuePgain += (float)(roll - 1550) * 0.000001;
 8007338:	4b0c      	ldr	r3, [pc, #48]	; (800736c <_Z13ChangeSettingv+0x31c>)
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	f240 620e 	movw	r2, #1550	; 0x60e
 8007340:	4293      	cmp	r3, r2
 8007342:	d934      	bls.n	80073ae <_Z13ChangeSettingv+0x35e>
 8007344:	69b8      	ldr	r0, [r7, #24]
 8007346:	f7f9 f8a3 	bl	8000490 <__aeabi_f2d>
 800734a:	4604      	mov	r4, r0
 800734c:	460d      	mov	r5, r1
 800734e:	4b07      	ldr	r3, [pc, #28]	; (800736c <_Z13ChangeSettingv+0x31c>)
 8007350:	881b      	ldrh	r3, [r3, #0]
 8007352:	f2a3 630e 	subw	r3, r3, #1550	; 0x60e
 8007356:	e00f      	b.n	8007378 <_Z13ChangeSettingv+0x328>
 8007358:	a0b5ed8d 	.word	0xa0b5ed8d
 800735c:	3eb0c6f7 	.word	0x3eb0c6f7
 8007360:	20000c0c 	.word	0x20000c0c
 8007364:	200007f0 	.word	0x200007f0
 8007368:	20000006 	.word	0x20000006
 800736c:	2000065c 	.word	0x2000065c
 8007370:	2000065e 	.word	0x2000065e
 8007374:	20000660 	.word	0x20000660
 8007378:	ee07 3a90 	vmov	s15, r3
 800737c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007380:	ee17 0a90 	vmov	r0, s15
 8007384:	f7f9 f884 	bl	8000490 <__aeabi_f2d>
 8007388:	a3d5      	add	r3, pc, #852	; (adr r3, 80076e0 <_Z13ChangeSettingv+0x690>)
 800738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738e:	f7f9 f8d7 	bl	8000540 <__aeabi_dmul>
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	4620      	mov	r0, r4
 8007398:	4629      	mov	r1, r5
 800739a:	f7f8 ff1b 	bl	80001d4 <__adddf3>
 800739e:	4603      	mov	r3, r0
 80073a0:	460c      	mov	r4, r1
 80073a2:	4618      	mov	r0, r3
 80073a4:	4621      	mov	r1, r4
 80073a6:	f7f9 fbc3 	bl	8000b30 <__aeabi_d2f>
 80073aa:	4603      	mov	r3, r0
 80073ac:	61bb      	str	r3, [r7, #24]
			if (roll < 1450) adjustableYawValuePgain -= (float)(1450 - roll) * 0.000001;
 80073ae:	4bce      	ldr	r3, [pc, #824]	; (80076e8 <_Z13ChangeSettingv+0x698>)
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	f240 52a9 	movw	r2, #1449	; 0x5a9
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d824      	bhi.n	8007404 <_Z13ChangeSettingv+0x3b4>
 80073ba:	69b8      	ldr	r0, [r7, #24]
 80073bc:	f7f9 f868 	bl	8000490 <__aeabi_f2d>
 80073c0:	4604      	mov	r4, r0
 80073c2:	460d      	mov	r5, r1
 80073c4:	4bc8      	ldr	r3, [pc, #800]	; (80076e8 <_Z13ChangeSettingv+0x698>)
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	f5c3 63b5 	rsb	r3, r3, #1448	; 0x5a8
 80073cc:	3302      	adds	r3, #2
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073d6:	ee17 0a90 	vmov	r0, s15
 80073da:	f7f9 f859 	bl	8000490 <__aeabi_f2d>
 80073de:	a3c0      	add	r3, pc, #768	; (adr r3, 80076e0 <_Z13ChangeSettingv+0x690>)
 80073e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e4:	f7f9 f8ac 	bl	8000540 <__aeabi_dmul>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	4620      	mov	r0, r4
 80073ee:	4629      	mov	r1, r5
 80073f0:	f7f8 feee 	bl	80001d0 <__aeabi_dsub>
 80073f4:	4603      	mov	r3, r0
 80073f6:	460c      	mov	r4, r1
 80073f8:	4618      	mov	r0, r3
 80073fa:	4621      	mov	r1, r4
 80073fc:	f7f9 fb98 	bl	8000b30 <__aeabi_d2f>
 8007400:	4603      	mov	r3, r0
 8007402:	61bb      	str	r3, [r7, #24]
			if (adjustableYawValuePgain < 0)adjustableYawValuePgain = 0;
 8007404:	edd7 7a06 	vldr	s15, [r7, #24]
 8007408:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800740c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007410:	d502      	bpl.n	8007418 <_Z13ChangeSettingv+0x3c8>
 8007412:	f04f 0300 	mov.w	r3, #0
 8007416:	61bb      	str	r3, [r7, #24]
			pidForHorizontal.yaw.Pgain = adjustableYawValuePgain;
 8007418:	4ab4      	ldr	r2, [pc, #720]	; (80076ec <_Z13ChangeSettingv+0x69c>)
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	6653      	str	r3, [r2, #100]	; 0x64

			if (pitch > 1550)adjustableYawValueIgain += (float)(pitch - 1550) * 0.000001;
 800741e:	4bb4      	ldr	r3, [pc, #720]	; (80076f0 <_Z13ChangeSettingv+0x6a0>)
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	f240 620e 	movw	r2, #1550	; 0x60e
 8007426:	4293      	cmp	r3, r2
 8007428:	d923      	bls.n	8007472 <_Z13ChangeSettingv+0x422>
 800742a:	6978      	ldr	r0, [r7, #20]
 800742c:	f7f9 f830 	bl	8000490 <__aeabi_f2d>
 8007430:	4604      	mov	r4, r0
 8007432:	460d      	mov	r5, r1
 8007434:	4bae      	ldr	r3, [pc, #696]	; (80076f0 <_Z13ChangeSettingv+0x6a0>)
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	f2a3 630e 	subw	r3, r3, #1550	; 0x60e
 800743c:	ee07 3a90 	vmov	s15, r3
 8007440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007444:	ee17 0a90 	vmov	r0, s15
 8007448:	f7f9 f822 	bl	8000490 <__aeabi_f2d>
 800744c:	a3a4      	add	r3, pc, #656	; (adr r3, 80076e0 <_Z13ChangeSettingv+0x690>)
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	f7f9 f875 	bl	8000540 <__aeabi_dmul>
 8007456:	4602      	mov	r2, r0
 8007458:	460b      	mov	r3, r1
 800745a:	4620      	mov	r0, r4
 800745c:	4629      	mov	r1, r5
 800745e:	f7f8 feb9 	bl	80001d4 <__adddf3>
 8007462:	4603      	mov	r3, r0
 8007464:	460c      	mov	r4, r1
 8007466:	4618      	mov	r0, r3
 8007468:	4621      	mov	r1, r4
 800746a:	f7f9 fb61 	bl	8000b30 <__aeabi_d2f>
 800746e:	4603      	mov	r3, r0
 8007470:	617b      	str	r3, [r7, #20]
			if (pitch < 1450)adjustableYawValueIgain -= (float)(1450 - pitch) * 0.000001;
 8007472:	4b9f      	ldr	r3, [pc, #636]	; (80076f0 <_Z13ChangeSettingv+0x6a0>)
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	f240 52a9 	movw	r2, #1449	; 0x5a9
 800747a:	4293      	cmp	r3, r2
 800747c:	d824      	bhi.n	80074c8 <_Z13ChangeSettingv+0x478>
 800747e:	6978      	ldr	r0, [r7, #20]
 8007480:	f7f9 f806 	bl	8000490 <__aeabi_f2d>
 8007484:	4604      	mov	r4, r0
 8007486:	460d      	mov	r5, r1
 8007488:	4b99      	ldr	r3, [pc, #612]	; (80076f0 <_Z13ChangeSettingv+0x6a0>)
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	f5c3 63b5 	rsb	r3, r3, #1448	; 0x5a8
 8007490:	3302      	adds	r3, #2
 8007492:	ee07 3a90 	vmov	s15, r3
 8007496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800749a:	ee17 0a90 	vmov	r0, s15
 800749e:	f7f8 fff7 	bl	8000490 <__aeabi_f2d>
 80074a2:	a38f      	add	r3, pc, #572	; (adr r3, 80076e0 <_Z13ChangeSettingv+0x690>)
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	f7f9 f84a 	bl	8000540 <__aeabi_dmul>
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	4620      	mov	r0, r4
 80074b2:	4629      	mov	r1, r5
 80074b4:	f7f8 fe8c 	bl	80001d0 <__aeabi_dsub>
 80074b8:	4603      	mov	r3, r0
 80074ba:	460c      	mov	r4, r1
 80074bc:	4618      	mov	r0, r3
 80074be:	4621      	mov	r1, r4
 80074c0:	f7f9 fb36 	bl	8000b30 <__aeabi_d2f>
 80074c4:	4603      	mov	r3, r0
 80074c6:	617b      	str	r3, [r7, #20]
			if (adjustableYawValueIgain < 0)adjustableYawValueIgain = 0;
 80074c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80074cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d4:	d502      	bpl.n	80074dc <_Z13ChangeSettingv+0x48c>
 80074d6:	f04f 0300 	mov.w	r3, #0
 80074da:	617b      	str	r3, [r7, #20]
			pidForHorizontal.yaw.Igain = adjustableYawValueIgain;
 80074dc:	4a83      	ldr	r2, [pc, #524]	; (80076ec <_Z13ChangeSettingv+0x69c>)
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	6693      	str	r3, [r2, #104]	; 0x68

			if (yaw > 1550)adjustableYawValueDgain += (float)(yaw - 1550) * 0.000001;
 80074e2:	4b84      	ldr	r3, [pc, #528]	; (80076f4 <_Z13ChangeSettingv+0x6a4>)
 80074e4:	881b      	ldrh	r3, [r3, #0]
 80074e6:	f240 620e 	movw	r2, #1550	; 0x60e
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d923      	bls.n	8007536 <_Z13ChangeSettingv+0x4e6>
 80074ee:	6938      	ldr	r0, [r7, #16]
 80074f0:	f7f8 ffce 	bl	8000490 <__aeabi_f2d>
 80074f4:	4604      	mov	r4, r0
 80074f6:	460d      	mov	r5, r1
 80074f8:	4b7e      	ldr	r3, [pc, #504]	; (80076f4 <_Z13ChangeSettingv+0x6a4>)
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	f2a3 630e 	subw	r3, r3, #1550	; 0x60e
 8007500:	ee07 3a90 	vmov	s15, r3
 8007504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007508:	ee17 0a90 	vmov	r0, s15
 800750c:	f7f8 ffc0 	bl	8000490 <__aeabi_f2d>
 8007510:	a373      	add	r3, pc, #460	; (adr r3, 80076e0 <_Z13ChangeSettingv+0x690>)
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	f7f9 f813 	bl	8000540 <__aeabi_dmul>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	4620      	mov	r0, r4
 8007520:	4629      	mov	r1, r5
 8007522:	f7f8 fe57 	bl	80001d4 <__adddf3>
 8007526:	4603      	mov	r3, r0
 8007528:	460c      	mov	r4, r1
 800752a:	4618      	mov	r0, r3
 800752c:	4621      	mov	r1, r4
 800752e:	f7f9 faff 	bl	8000b30 <__aeabi_d2f>
 8007532:	4603      	mov	r3, r0
 8007534:	613b      	str	r3, [r7, #16]
			if (yaw < 1450)adjustableYawValueDgain -= (float)(1450 - yaw) * 0.000001;
 8007536:	4b6f      	ldr	r3, [pc, #444]	; (80076f4 <_Z13ChangeSettingv+0x6a4>)
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	f240 52a9 	movw	r2, #1449	; 0x5a9
 800753e:	4293      	cmp	r3, r2
 8007540:	d824      	bhi.n	800758c <_Z13ChangeSettingv+0x53c>
 8007542:	6938      	ldr	r0, [r7, #16]
 8007544:	f7f8 ffa4 	bl	8000490 <__aeabi_f2d>
 8007548:	4604      	mov	r4, r0
 800754a:	460d      	mov	r5, r1
 800754c:	4b69      	ldr	r3, [pc, #420]	; (80076f4 <_Z13ChangeSettingv+0x6a4>)
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	f5c3 63b5 	rsb	r3, r3, #1448	; 0x5a8
 8007554:	3302      	adds	r3, #2
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800755e:	ee17 0a90 	vmov	r0, s15
 8007562:	f7f8 ff95 	bl	8000490 <__aeabi_f2d>
 8007566:	a35e      	add	r3, pc, #376	; (adr r3, 80076e0 <_Z13ChangeSettingv+0x690>)
 8007568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756c:	f7f8 ffe8 	bl	8000540 <__aeabi_dmul>
 8007570:	4602      	mov	r2, r0
 8007572:	460b      	mov	r3, r1
 8007574:	4620      	mov	r0, r4
 8007576:	4629      	mov	r1, r5
 8007578:	f7f8 fe2a 	bl	80001d0 <__aeabi_dsub>
 800757c:	4603      	mov	r3, r0
 800757e:	460c      	mov	r4, r1
 8007580:	4618      	mov	r0, r3
 8007582:	4621      	mov	r1, r4
 8007584:	f7f9 fad4 	bl	8000b30 <__aeabi_d2f>
 8007588:	4603      	mov	r3, r0
 800758a:	613b      	str	r3, [r7, #16]
			if (adjustableYawValueDgain < 0)adjustableYawValueDgain = 0;
 800758c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007590:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007598:	d502      	bpl.n	80075a0 <_Z13ChangeSettingv+0x550>
 800759a:	f04f 0300 	mov.w	r3, #0
 800759e:	613b      	str	r3, [r7, #16]
			pidForHorizontal.yaw.Dgain = adjustableYawValueDgain;
 80075a0:	4a52      	ldr	r2, [pc, #328]	; (80076ec <_Z13ChangeSettingv+0x69c>)
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	66d3      	str	r3, [r2, #108]	; 0x6c
		}

		if((throttle > 1700) && (throttle < 1900) )
 80075a6:	4b54      	ldr	r3, [pc, #336]	; (80076f8 <_Z13ChangeSettingv+0x6a8>)
 80075a8:	881b      	ldrh	r3, [r3, #0]
 80075aa:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80075ae:	4293      	cmp	r3, r2
 80075b0:	f240 8142 	bls.w	8007838 <_Z13ChangeSettingv+0x7e8>
 80075b4:	4b50      	ldr	r3, [pc, #320]	; (80076f8 <_Z13ChangeSettingv+0x6a8>)
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	f240 726b 	movw	r2, #1899	; 0x76b
 80075bc:	4293      	cmp	r3, r2
 80075be:	f200 813b 	bhi.w	8007838 <_Z13ChangeSettingv+0x7e8>
		{
			if (roll > 1550) adjustableAltitudeValuePgain += (float)(roll - 1550) * 0.000001;
 80075c2:	4b49      	ldr	r3, [pc, #292]	; (80076e8 <_Z13ChangeSettingv+0x698>)
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	f240 620e 	movw	r2, #1550	; 0x60e
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d923      	bls.n	8007616 <_Z13ChangeSettingv+0x5c6>
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f7f8 ff5e 	bl	8000490 <__aeabi_f2d>
 80075d4:	4604      	mov	r4, r0
 80075d6:	460d      	mov	r5, r1
 80075d8:	4b43      	ldr	r3, [pc, #268]	; (80076e8 <_Z13ChangeSettingv+0x698>)
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	f2a3 630e 	subw	r3, r3, #1550	; 0x60e
 80075e0:	ee07 3a90 	vmov	s15, r3
 80075e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075e8:	ee17 0a90 	vmov	r0, s15
 80075ec:	f7f8 ff50 	bl	8000490 <__aeabi_f2d>
 80075f0:	a33b      	add	r3, pc, #236	; (adr r3, 80076e0 <_Z13ChangeSettingv+0x690>)
 80075f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f6:	f7f8 ffa3 	bl	8000540 <__aeabi_dmul>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	4620      	mov	r0, r4
 8007600:	4629      	mov	r1, r5
 8007602:	f7f8 fde7 	bl	80001d4 <__adddf3>
 8007606:	4603      	mov	r3, r0
 8007608:	460c      	mov	r4, r1
 800760a:	4618      	mov	r0, r3
 800760c:	4621      	mov	r1, r4
 800760e:	f7f9 fa8f 	bl	8000b30 <__aeabi_d2f>
 8007612:	4603      	mov	r3, r0
 8007614:	60fb      	str	r3, [r7, #12]
			if (roll < 1450) adjustableAltitudeValuePgain -= (float)(1450 - roll) * 0.000001;
 8007616:	4b34      	ldr	r3, [pc, #208]	; (80076e8 <_Z13ChangeSettingv+0x698>)
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	f240 52a9 	movw	r2, #1449	; 0x5a9
 800761e:	4293      	cmp	r3, r2
 8007620:	d824      	bhi.n	800766c <_Z13ChangeSettingv+0x61c>
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f7f8 ff34 	bl	8000490 <__aeabi_f2d>
 8007628:	4604      	mov	r4, r0
 800762a:	460d      	mov	r5, r1
 800762c:	4b2e      	ldr	r3, [pc, #184]	; (80076e8 <_Z13ChangeSettingv+0x698>)
 800762e:	881b      	ldrh	r3, [r3, #0]
 8007630:	f5c3 63b5 	rsb	r3, r3, #1448	; 0x5a8
 8007634:	3302      	adds	r3, #2
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800763e:	ee17 0a90 	vmov	r0, s15
 8007642:	f7f8 ff25 	bl	8000490 <__aeabi_f2d>
 8007646:	a326      	add	r3, pc, #152	; (adr r3, 80076e0 <_Z13ChangeSettingv+0x690>)
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	f7f8 ff78 	bl	8000540 <__aeabi_dmul>
 8007650:	4602      	mov	r2, r0
 8007652:	460b      	mov	r3, r1
 8007654:	4620      	mov	r0, r4
 8007656:	4629      	mov	r1, r5
 8007658:	f7f8 fdba 	bl	80001d0 <__aeabi_dsub>
 800765c:	4603      	mov	r3, r0
 800765e:	460c      	mov	r4, r1
 8007660:	4618      	mov	r0, r3
 8007662:	4621      	mov	r1, r4
 8007664:	f7f9 fa64 	bl	8000b30 <__aeabi_d2f>
 8007668:	4603      	mov	r3, r0
 800766a:	60fb      	str	r3, [r7, #12]
			if (adjustableAltitudeValuePgain < 0)adjustableAltitudeValuePgain = 0;
 800766c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007670:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007678:	d502      	bpl.n	8007680 <_Z13ChangeSettingv+0x630>
 800767a:	f04f 0300 	mov.w	r3, #0
 800767e:	60fb      	str	r3, [r7, #12]
			ms5611.pid_Pgain_Altitude = adjustableAltitudeValuePgain;
 8007680:	4a1e      	ldr	r2, [pc, #120]	; (80076fc <_Z13ChangeSettingv+0x6ac>)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f8c2 31e4 	str.w	r3, [r2, #484]	; 0x1e4

			if (pitch > 1550)adjustableAltitudeValueIgain += (float)(pitch - 1550) * 0.000001;
 8007688:	4b19      	ldr	r3, [pc, #100]	; (80076f0 <_Z13ChangeSettingv+0x6a0>)
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	f240 620e 	movw	r2, #1550	; 0x60e
 8007690:	4293      	cmp	r3, r2
 8007692:	d935      	bls.n	8007700 <_Z13ChangeSettingv+0x6b0>
 8007694:	68b8      	ldr	r0, [r7, #8]
 8007696:	f7f8 fefb 	bl	8000490 <__aeabi_f2d>
 800769a:	4604      	mov	r4, r0
 800769c:	460d      	mov	r5, r1
 800769e:	4b14      	ldr	r3, [pc, #80]	; (80076f0 <_Z13ChangeSettingv+0x6a0>)
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	f2a3 630e 	subw	r3, r3, #1550	; 0x60e
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076ae:	ee17 0a90 	vmov	r0, s15
 80076b2:	f7f8 feed 	bl	8000490 <__aeabi_f2d>
 80076b6:	a30a      	add	r3, pc, #40	; (adr r3, 80076e0 <_Z13ChangeSettingv+0x690>)
 80076b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076bc:	f7f8 ff40 	bl	8000540 <__aeabi_dmul>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4620      	mov	r0, r4
 80076c6:	4629      	mov	r1, r5
 80076c8:	f7f8 fd84 	bl	80001d4 <__adddf3>
 80076cc:	4603      	mov	r3, r0
 80076ce:	460c      	mov	r4, r1
 80076d0:	4618      	mov	r0, r3
 80076d2:	4621      	mov	r1, r4
 80076d4:	f7f9 fa2c 	bl	8000b30 <__aeabi_d2f>
 80076d8:	4603      	mov	r3, r0
 80076da:	60bb      	str	r3, [r7, #8]
 80076dc:	e010      	b.n	8007700 <_Z13ChangeSettingv+0x6b0>
 80076de:	bf00      	nop
 80076e0:	a0b5ed8d 	.word	0xa0b5ed8d
 80076e4:	3eb0c6f7 	.word	0x3eb0c6f7
 80076e8:	2000065c 	.word	0x2000065c
 80076ec:	20000c0c 	.word	0x20000c0c
 80076f0:	2000065e 	.word	0x2000065e
 80076f4:	20000660 	.word	0x20000660
 80076f8:	20000006 	.word	0x20000006
 80076fc:	200007f0 	.word	0x200007f0
			if (pitch < 1450)adjustableAltitudeValueIgain -= (float)(1450 - pitch) * 0.000001;
 8007700:	4b53      	ldr	r3, [pc, #332]	; (8007850 <_Z13ChangeSettingv+0x800>)
 8007702:	881b      	ldrh	r3, [r3, #0]
 8007704:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8007708:	4293      	cmp	r3, r2
 800770a:	d824      	bhi.n	8007756 <_Z13ChangeSettingv+0x706>
 800770c:	68b8      	ldr	r0, [r7, #8]
 800770e:	f7f8 febf 	bl	8000490 <__aeabi_f2d>
 8007712:	4604      	mov	r4, r0
 8007714:	460d      	mov	r5, r1
 8007716:	4b4e      	ldr	r3, [pc, #312]	; (8007850 <_Z13ChangeSettingv+0x800>)
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	f5c3 63b5 	rsb	r3, r3, #1448	; 0x5a8
 800771e:	3302      	adds	r3, #2
 8007720:	ee07 3a90 	vmov	s15, r3
 8007724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007728:	ee17 0a90 	vmov	r0, s15
 800772c:	f7f8 feb0 	bl	8000490 <__aeabi_f2d>
 8007730:	a345      	add	r3, pc, #276	; (adr r3, 8007848 <_Z13ChangeSettingv+0x7f8>)
 8007732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007736:	f7f8 ff03 	bl	8000540 <__aeabi_dmul>
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	4620      	mov	r0, r4
 8007740:	4629      	mov	r1, r5
 8007742:	f7f8 fd45 	bl	80001d0 <__aeabi_dsub>
 8007746:	4603      	mov	r3, r0
 8007748:	460c      	mov	r4, r1
 800774a:	4618      	mov	r0, r3
 800774c:	4621      	mov	r1, r4
 800774e:	f7f9 f9ef 	bl	8000b30 <__aeabi_d2f>
 8007752:	4603      	mov	r3, r0
 8007754:	60bb      	str	r3, [r7, #8]
			if (adjustableAltitudeValueIgain < 0)adjustableAltitudeValueIgain = 0;
 8007756:	edd7 7a02 	vldr	s15, [r7, #8]
 800775a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800775e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007762:	d502      	bpl.n	800776a <_Z13ChangeSettingv+0x71a>
 8007764:	f04f 0300 	mov.w	r3, #0
 8007768:	60bb      	str	r3, [r7, #8]
			ms5611.pid_Igain_Altitude = adjustableAltitudeValueIgain;
 800776a:	4a3a      	ldr	r2, [pc, #232]	; (8007854 <_Z13ChangeSettingv+0x804>)
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	f8c2 31e8 	str.w	r3, [r2, #488]	; 0x1e8

			if (yaw > 1550)adjustableAltitudeValueDgain += (float)(yaw - 1550) * 0.000001;
 8007772:	4b39      	ldr	r3, [pc, #228]	; (8007858 <_Z13ChangeSettingv+0x808>)
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	f240 620e 	movw	r2, #1550	; 0x60e
 800777a:	4293      	cmp	r3, r2
 800777c:	d923      	bls.n	80077c6 <_Z13ChangeSettingv+0x776>
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7f8 fe86 	bl	8000490 <__aeabi_f2d>
 8007784:	4604      	mov	r4, r0
 8007786:	460d      	mov	r5, r1
 8007788:	4b33      	ldr	r3, [pc, #204]	; (8007858 <_Z13ChangeSettingv+0x808>)
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	f2a3 630e 	subw	r3, r3, #1550	; 0x60e
 8007790:	ee07 3a90 	vmov	s15, r3
 8007794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007798:	ee17 0a90 	vmov	r0, s15
 800779c:	f7f8 fe78 	bl	8000490 <__aeabi_f2d>
 80077a0:	a329      	add	r3, pc, #164	; (adr r3, 8007848 <_Z13ChangeSettingv+0x7f8>)
 80077a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a6:	f7f8 fecb 	bl	8000540 <__aeabi_dmul>
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	4620      	mov	r0, r4
 80077b0:	4629      	mov	r1, r5
 80077b2:	f7f8 fd0f 	bl	80001d4 <__adddf3>
 80077b6:	4603      	mov	r3, r0
 80077b8:	460c      	mov	r4, r1
 80077ba:	4618      	mov	r0, r3
 80077bc:	4621      	mov	r1, r4
 80077be:	f7f9 f9b7 	bl	8000b30 <__aeabi_d2f>
 80077c2:	4603      	mov	r3, r0
 80077c4:	607b      	str	r3, [r7, #4]
			if (yaw < 1450)adjustableAltitudeValueDgain -= (float)(1450 - yaw) * 0.000001;
 80077c6:	4b24      	ldr	r3, [pc, #144]	; (8007858 <_Z13ChangeSettingv+0x808>)
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	f240 52a9 	movw	r2, #1449	; 0x5a9
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d824      	bhi.n	800781c <_Z13ChangeSettingv+0x7cc>
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7f8 fe5c 	bl	8000490 <__aeabi_f2d>
 80077d8:	4604      	mov	r4, r0
 80077da:	460d      	mov	r5, r1
 80077dc:	4b1e      	ldr	r3, [pc, #120]	; (8007858 <_Z13ChangeSettingv+0x808>)
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	f5c3 63b5 	rsb	r3, r3, #1448	; 0x5a8
 80077e4:	3302      	adds	r3, #2
 80077e6:	ee07 3a90 	vmov	s15, r3
 80077ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077ee:	ee17 0a90 	vmov	r0, s15
 80077f2:	f7f8 fe4d 	bl	8000490 <__aeabi_f2d>
 80077f6:	a314      	add	r3, pc, #80	; (adr r3, 8007848 <_Z13ChangeSettingv+0x7f8>)
 80077f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fc:	f7f8 fea0 	bl	8000540 <__aeabi_dmul>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	4620      	mov	r0, r4
 8007806:	4629      	mov	r1, r5
 8007808:	f7f8 fce2 	bl	80001d0 <__aeabi_dsub>
 800780c:	4603      	mov	r3, r0
 800780e:	460c      	mov	r4, r1
 8007810:	4618      	mov	r0, r3
 8007812:	4621      	mov	r1, r4
 8007814:	f7f9 f98c 	bl	8000b30 <__aeabi_d2f>
 8007818:	4603      	mov	r3, r0
 800781a:	607b      	str	r3, [r7, #4]
			if (adjustableAltitudeValueDgain < 0)adjustableAltitudeValueDgain = 0;
 800781c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007820:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007828:	d502      	bpl.n	8007830 <_Z13ChangeSettingv+0x7e0>
 800782a:	f04f 0300 	mov.w	r3, #0
 800782e:	607b      	str	r3, [r7, #4]
			ms5611.pid_Dgain_Altitude = adjustableAltitudeValueDgain;
 8007830:	4a08      	ldr	r2, [pc, #32]	; (8007854 <_Z13ChangeSettingv+0x804>)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec
	for(int i=1;i<=5;i++)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	3301      	adds	r3, #1
 800783c:	603b      	str	r3, [r7, #0]
 800783e:	e42a      	b.n	8007096 <_Z13ChangeSettingv+0x46>
		}

	}
}
 8007840:	bf00      	nop
 8007842:	3728      	adds	r7, #40	; 0x28
 8007844:	46bd      	mov	sp, r7
 8007846:	bdb0      	pop	{r4, r5, r7, pc}
 8007848:	a0b5ed8d 	.word	0xa0b5ed8d
 800784c:	3eb0c6f7 	.word	0x3eb0c6f7
 8007850:	2000065e 	.word	0x2000065e
 8007854:	200007f0 	.word	0x200007f0
 8007858:	20000660 	.word	0x20000660

0800785c <_Z16StartStopTakeOffv>:
void StartStopTakeOff(void)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	af00      	add	r7, sp, #0
	//TODO Bước 1 là nhấn nút BTN5 để bật cơ headingLock;
	// Bước 2 nhấn nút BTN4 để bật stateMachine = 1 ;
	// Bước 3 nhấn nút BTN3
	if ((BTN4 == 1) && (FirstBTN4==0))
 8007860:	4ba1      	ldr	r3, [pc, #644]	; (8007ae8 <_Z16StartStopTakeOffv+0x28c>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d109      	bne.n	800787c <_Z16StartStopTakeOffv+0x20>
 8007868:	4ba0      	ldr	r3, [pc, #640]	; (8007aec <_Z16StartStopTakeOffv+0x290>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d105      	bne.n	800787c <_Z16StartStopTakeOffv+0x20>
	{
		FirstBTN4=1;
 8007870:	4b9e      	ldr	r3, [pc, #632]	; (8007aec <_Z16StartStopTakeOffv+0x290>)
 8007872:	2201      	movs	r2, #1
 8007874:	601a      	str	r2, [r3, #0]
		stateMachine = 1;
 8007876:	4b9e      	ldr	r3, [pc, #632]	; (8007af0 <_Z16StartStopTakeOffv+0x294>)
 8007878:	2201      	movs	r2, #1
 800787a:	701a      	strb	r2, [r3, #0]
	}

	// Bước 3 nhấn nút BTN3
	if ((stateMachine == 1) && (BTN3 == 1) && (FirstBTN3==0) )
 800787c:	4b9c      	ldr	r3, [pc, #624]	; (8007af0 <_Z16StartStopTakeOffv+0x294>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d17f      	bne.n	8007984 <_Z16StartStopTakeOffv+0x128>
 8007884:	4b9b      	ldr	r3, [pc, #620]	; (8007af4 <_Z16StartStopTakeOffv+0x298>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d17b      	bne.n	8007984 <_Z16StartStopTakeOffv+0x128>
 800788c:	4b9a      	ldr	r3, [pc, #616]	; (8007af8 <_Z16StartStopTakeOffv+0x29c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d177      	bne.n	8007984 <_Z16StartStopTakeOffv+0x128>
	{
		FirstBTN3=1;
 8007894:	4b98      	ldr	r3, [pc, #608]	; (8007af8 <_Z16StartStopTakeOffv+0x29c>)
 8007896:	2201      	movs	r2, #1
 8007898:	601a      	str	r2, [r3, #0]
		// Thiết lập throttle value về giá trị idle motor speed
		Throttle = idleSpeedMotor;
 800789a:	4b98      	ldr	r3, [pc, #608]	; (8007afc <_Z16StartStopTakeOffv+0x2a0>)
 800789c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80078a0:	4b97      	ldr	r3, [pc, #604]	; (8007b00 <_Z16StartStopTakeOffv+0x2a4>)
 80078a2:	801a      	strh	r2, [r3, #0]

		// Giá trị góc Roll và Pitch khởi điểm sẽ được tính toán chỉ dựa trên accel
		gy86.anglePitch = gy86.anglePitchAccel;
 80078a4:	4b97      	ldr	r3, [pc, #604]	; (8007b04 <_Z16StartStopTakeOffv+0x2a8>)
 80078a6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80078aa:	4a96      	ldr	r2, [pc, #600]	; (8007b04 <_Z16StartStopTakeOffv+0x2a8>)
 80078ac:	6613      	str	r3, [r2, #96]	; 0x60
		gy86.angleRoll = gy86.angleRollAccel;
 80078ae:	4b95      	ldr	r3, [pc, #596]	; (8007b04 <_Z16StartStopTakeOffv+0x2a8>)
 80078b0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80078b4:	4a93      	ldr	r2, [pc, #588]	; (8007b04 <_Z16StartStopTakeOffv+0x2a8>)
 80078b6:	65d3      	str	r3, [r2, #92]	; 0x5c

		// Lấy giá trị áp suất tại mặt đất, để tham chiếu cho sau này
		groundPressure = ms5611.GetActualPressure();
 80078b8:	4893      	ldr	r0, [pc, #588]	; (8007b08 <_Z16StartStopTakeOffv+0x2ac>)
 80078ba:	f7fd fe07 	bl	80054cc <_ZN9Barometer17GetActualPressureEv>
 80078be:	eef0 7a40 	vmov.f32	s15, s0
 80078c2:	4b92      	ldr	r3, [pc, #584]	; (8007b0c <_Z16StartStopTakeOffv+0x2b0>)
 80078c4:	edc3 7a00 	vstr	s15, [r3]

		gy86.courseLockHeading = gy86.angleYaw;
 80078c8:	4b8e      	ldr	r3, [pc, #568]	; (8007b04 <_Z16StartStopTakeOffv+0x2a8>)
 80078ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078cc:	4a8d      	ldr	r2, [pc, #564]	; (8007b04 <_Z16StartStopTakeOffv+0x2a8>)
 80078ce:	6053      	str	r3, [r2, #4]

		gy86.accelTotalVectorAtStart = gy86.accelTotalVector;
 80078d0:	4b8c      	ldr	r3, [pc, #560]	; (8007b04 <_Z16StartStopTakeOffv+0x2a8>)
 80078d2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80078d6:	4a8b      	ldr	r2, [pc, #556]	; (8007b04 <_Z16StartStopTakeOffv+0x2a8>)
 80078d8:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c

		stateMachine = 2;
 80078dc:	4b84      	ldr	r3, [pc, #528]	; (8007af0 <_Z16StartStopTakeOffv+0x294>)
 80078de:	2202      	movs	r2, #2
 80078e0:	701a      	strb	r2, [r3, #0]
		gy86.accelAltIntegrated = 0;
 80078e2:	4b88      	ldr	r3, [pc, #544]	; (8007b04 <_Z16StartStopTakeOffv+0x2a8>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		if ((manualTakeoffThrottle > 1400) && (manualTakeoffThrottle < 1600))  // Tốc độ cất cánh
 80078ea:	4b89      	ldr	r3, [pc, #548]	; (8007b10 <_Z16StartStopTakeOffv+0x2b4>)
 80078ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078f0:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80078f4:	dd38      	ble.n	8007968 <_Z16StartStopTakeOffv+0x10c>
 80078f6:	4b86      	ldr	r3, [pc, #536]	; (8007b10 <_Z16StartStopTakeOffv+0x2b4>)
 80078f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007900:	da32      	bge.n	8007968 <_Z16StartStopTakeOffv+0x10c>
		{
			takeoffThrottle = manualTakeoffThrottle - 1500;
 8007902:	4b83      	ldr	r3, [pc, #524]	; (8007b10 <_Z16StartStopTakeOffv+0x2b4>)
 8007904:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007908:	b29b      	uxth	r3, r3
 800790a:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 800790e:	b29b      	uxth	r3, r3
 8007910:	b21a      	sxth	r2, r3
 8007912:	4b80      	ldr	r3, [pc, #512]	; (8007b14 <_Z16StartStopTakeOffv+0x2b8>)
 8007914:	801a      	strh	r2, [r3, #0]
			// Thiết lập cờ takeoffDetected để chỉ ra rằng quadcopter đang bay
			takeoffDetected = 1;
 8007916:	4b80      	ldr	r3, [pc, #512]	; (8007b18 <_Z16StartStopTakeOffv+0x2bc>)
 8007918:	2201      	movs	r2, #1
 800791a:	701a      	strb	r2, [r3, #0]
			//Reset PID để việc cất cánh được smooth hơn
			pidForHorizontal.roll.ImemValue = 0;
 800791c:	4b7f      	ldr	r3, [pc, #508]	; (8007b1c <_Z16StartStopTakeOffv+0x2c0>)
 800791e:	f04f 0200 	mov.w	r2, #0
 8007922:	61da      	str	r2, [r3, #28]
			pidForHorizontal.roll.previousError = 0;
 8007924:	4b7d      	ldr	r3, [pc, #500]	; (8007b1c <_Z16StartStopTakeOffv+0x2c0>)
 8007926:	f04f 0200 	mov.w	r2, #0
 800792a:	625a      	str	r2, [r3, #36]	; 0x24
			pidForHorizontal.roll.outputValue = 0;
 800792c:	4b7b      	ldr	r3, [pc, #492]	; (8007b1c <_Z16StartStopTakeOffv+0x2c0>)
 800792e:	f04f 0200 	mov.w	r2, #0
 8007932:	611a      	str	r2, [r3, #16]
			pidForHorizontal.pitch.ImemValue = 0;
 8007934:	4b79      	ldr	r3, [pc, #484]	; (8007b1c <_Z16StartStopTakeOffv+0x2c0>)
 8007936:	f04f 0200 	mov.w	r2, #0
 800793a:	64da      	str	r2, [r3, #76]	; 0x4c
			pidForHorizontal.pitch.previousError = 0;
 800793c:	4b77      	ldr	r3, [pc, #476]	; (8007b1c <_Z16StartStopTakeOffv+0x2c0>)
 800793e:	f04f 0200 	mov.w	r2, #0
 8007942:	655a      	str	r2, [r3, #84]	; 0x54
			pidForHorizontal.pitch.outputValue = 0;
 8007944:	4b75      	ldr	r3, [pc, #468]	; (8007b1c <_Z16StartStopTakeOffv+0x2c0>)
 8007946:	f04f 0200 	mov.w	r2, #0
 800794a:	641a      	str	r2, [r3, #64]	; 0x40
			pidForHorizontal.yaw.ImemValue = 0;
 800794c:	4b73      	ldr	r3, [pc, #460]	; (8007b1c <_Z16StartStopTakeOffv+0x2c0>)
 800794e:	f04f 0200 	mov.w	r2, #0
 8007952:	67da      	str	r2, [r3, #124]	; 0x7c
			pidForHorizontal.yaw.previousError = 0;
 8007954:	4b71      	ldr	r3, [pc, #452]	; (8007b1c <_Z16StartStopTakeOffv+0x2c0>)
 8007956:	f04f 0200 	mov.w	r2, #0
 800795a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			pidForHorizontal.yaw.outputValue = 0;
 800795e:	4b6f      	ldr	r3, [pc, #444]	; (8007b1c <_Z16StartStopTakeOffv+0x2c0>)
 8007960:	f04f 0200 	mov.w	r2, #0
 8007964:	671a      	str	r2, [r3, #112]	; 0x70
 8007966:	e00d      	b.n	8007984 <_Z16StartStopTakeOffv+0x128>
		}
		else if (manualTakeoffThrottle)
 8007968:	4b69      	ldr	r3, [pc, #420]	; (8007b10 <_Z16StartStopTakeOffv+0x2b4>)
 800796a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d008      	beq.n	8007984 <_Z16StartStopTakeOffv+0x128>
		{                                            //Nếu giá trị không hợp lệ
			error = 5;                                //Error = 5.
 8007972:	4b6b      	ldr	r3, [pc, #428]	; (8007b20 <_Z16StartStopTakeOffv+0x2c4>)
 8007974:	2205      	movs	r2, #5
 8007976:	701a      	strb	r2, [r3, #0]
			takeoffThrottle = 0;                      //No hover throttle compensation.
 8007978:	4b66      	ldr	r3, [pc, #408]	; (8007b14 <_Z16StartStopTakeOffv+0x2b8>)
 800797a:	2200      	movs	r2, #0
 800797c:	801a      	strh	r2, [r3, #0]
			stateMachine = 0;                          //Set the start variable to 0 to stop the motors.
 800797e:	4b5c      	ldr	r3, [pc, #368]	; (8007af0 <_Z16StartStopTakeOffv+0x294>)
 8007980:	2200      	movs	r2, #0
 8007982:	701a      	strb	r2, [r3, #0]
		}
	}
	//Stopping the motors:Bấm nút BTN2.
	if (stateMachine == 2 && BTN2==1)
 8007984:	4b5a      	ldr	r3, [pc, #360]	; (8007af0 <_Z16StartStopTakeOffv+0x294>)
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	2b02      	cmp	r3, #2
 800798a:	d109      	bne.n	80079a0 <_Z16StartStopTakeOffv+0x144>
 800798c:	4b65      	ldr	r3, [pc, #404]	; (8007b24 <_Z16StartStopTakeOffv+0x2c8>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d105      	bne.n	80079a0 <_Z16StartStopTakeOffv+0x144>
	{
		stateMachine = 0;                   //Đặt biến khởi động thành 0 để tắt động cơ.
 8007994:	4b56      	ldr	r3, [pc, #344]	; (8007af0 <_Z16StartStopTakeOffv+0x294>)
 8007996:	2200      	movs	r2, #0
 8007998:	701a      	strb	r2, [r3, #0]
		takeoffDetected = 0;                  //Đặt lại phát hiện tự động cất cánh
 800799a:	4b5f      	ldr	r3, [pc, #380]	; (8007b18 <_Z16StartStopTakeOffv+0x2bc>)
 800799c:	2200      	movs	r2, #0
 800799e:	701a      	strb	r2, [r3, #0]
	}

	if (takeoffDetected == 0 && stateMachine == 2)
 80079a0:	4b5d      	ldr	r3, [pc, #372]	; (8007b18 <_Z16StartStopTakeOffv+0x2bc>)
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f040 809d 	bne.w	8007ae4 <_Z16StartStopTakeOffv+0x288>
 80079aa:	4b51      	ldr	r3, [pc, #324]	; (8007af0 <_Z16StartStopTakeOffv+0x294>)
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	f040 8098 	bne.w	8007ae4 <_Z16StartStopTakeOffv+0x288>
	{                                       //When the Drone is started and no take-off is detected.
		if (throttle > 1520 && throttle < 1750)
 80079b4:	4b5c      	ldr	r3, [pc, #368]	; (8007b28 <_Z16StartStopTakeOffv+0x2cc>)
 80079b6:	881b      	ldrh	r3, [r3, #0]
 80079b8:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 80079bc:	d90e      	bls.n	80079dc <_Z16StartStopTakeOffv+0x180>
 80079be:	4b5a      	ldr	r3, [pc, #360]	; (8007b28 <_Z16StartStopTakeOffv+0x2cc>)
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	f240 62d5 	movw	r2, #1749	; 0x6d5
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d808      	bhi.n	80079dc <_Z16StartStopTakeOffv+0x180>
		{
			Throttle++;                           //Khi ga còn một nửa hoặc cao hơn, hãy tăng ga.
 80079ca:	4b4d      	ldr	r3, [pc, #308]	; (8007b00 <_Z16StartStopTakeOffv+0x2a4>)
 80079cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	3301      	adds	r3, #1
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	b21a      	sxth	r2, r3
 80079d8:	4b49      	ldr	r3, [pc, #292]	; (8007b00 <_Z16StartStopTakeOffv+0x2a4>)
 80079da:	801a      	strh	r2, [r3, #0]
		}
		if (Throttle == 1750)
 80079dc:	4b48      	ldr	r3, [pc, #288]	; (8007b00 <_Z16StartStopTakeOffv+0x2a4>)
 80079de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079e2:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d102      	bne.n	80079f0 <_Z16StartStopTakeOffv+0x194>
		{
			error = 6;                                                //If take-off is not detected when the throttle has reached 1700: error = 6.
 80079ea:	4b4d      	ldr	r3, [pc, #308]	; (8007b20 <_Z16StartStopTakeOffv+0x2c4>)
 80079ec:	2206      	movs	r2, #6
 80079ee:	701a      	strb	r2, [r3, #0]
		}
		if (throttle <= 1475)
 80079f0:	4b4d      	ldr	r3, [pc, #308]	; (8007b28 <_Z16StartStopTakeOffv+0x2cc>)
 80079f2:	881b      	ldrh	r3, [r3, #0]
 80079f4:	f240 52c3 	movw	r2, #1475	; 0x5c3
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d836      	bhi.n	8007a6a <_Z16StartStopTakeOffv+0x20e>
		{                                                       //When the throttle is below the center stick position.
			if (Throttle > idleSpeedMotor)
 80079fc:	4b40      	ldr	r3, [pc, #256]	; (8007b00 <_Z16StartStopTakeOffv+0x2a4>)
 80079fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007a02:	4b3e      	ldr	r3, [pc, #248]	; (8007afc <_Z16StartStopTakeOffv+0x2a0>)
 8007a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	dd09      	ble.n	8007a20 <_Z16StartStopTakeOffv+0x1c4>
			{
				Throttle--;                                  //Lower the throttle to the motor_idle_speed variable.
 8007a0c:	4b3c      	ldr	r3, [pc, #240]	; (8007b00 <_Z16StartStopTakeOffv+0x2a4>)
 8007a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	3b01      	subs	r3, #1
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	b21a      	sxth	r2, r3
 8007a1a:	4b39      	ldr	r3, [pc, #228]	; (8007b00 <_Z16StartStopTakeOffv+0x2a4>)
 8007a1c:	801a      	strh	r2, [r3, #0]
 8007a1e:	e024      	b.n	8007a6a <_Z16StartStopTakeOffv+0x20e>
			}
			//Reset the PID controllers for a smooth take-off.
			else {                                                                       //When the throttle is back at idle speed reset the PID controllers.
				pidForHorizontal.roll.ImemValue = 0;
 8007a20:	4b3e      	ldr	r3, [pc, #248]	; (8007b1c <_Z16StartStopTakeOffv+0x2c0>)
 8007a22:	f04f 0200 	mov.w	r2, #0
 8007a26:	61da      	str	r2, [r3, #28]
				pidForHorizontal.roll.previousError = 0;
 8007a28:	4b3c      	ldr	r3, [pc, #240]	; (8007b1c <_Z16StartStopTakeOffv+0x2c0>)
 8007a2a:	f04f 0200 	mov.w	r2, #0
 8007a2e:	625a      	str	r2, [r3, #36]	; 0x24
				pidForHorizontal.roll.outputValue = 0;
 8007a30:	4b3a      	ldr	r3, [pc, #232]	; (8007b1c <_Z16StartStopTakeOffv+0x2c0>)
 8007a32:	f04f 0200 	mov.w	r2, #0
 8007a36:	611a      	str	r2, [r3, #16]
				pidForHorizontal.pitch.ImemValue = 0;
 8007a38:	4b38      	ldr	r3, [pc, #224]	; (8007b1c <_Z16StartStopTakeOffv+0x2c0>)
 8007a3a:	f04f 0200 	mov.w	r2, #0
 8007a3e:	64da      	str	r2, [r3, #76]	; 0x4c
				pidForHorizontal.pitch.previousError = 0;
 8007a40:	4b36      	ldr	r3, [pc, #216]	; (8007b1c <_Z16StartStopTakeOffv+0x2c0>)
 8007a42:	f04f 0200 	mov.w	r2, #0
 8007a46:	655a      	str	r2, [r3, #84]	; 0x54
				pidForHorizontal.pitch.outputValue = 0;
 8007a48:	4b34      	ldr	r3, [pc, #208]	; (8007b1c <_Z16StartStopTakeOffv+0x2c0>)
 8007a4a:	f04f 0200 	mov.w	r2, #0
 8007a4e:	641a      	str	r2, [r3, #64]	; 0x40
				pidForHorizontal.yaw.ImemValue = 0;
 8007a50:	4b32      	ldr	r3, [pc, #200]	; (8007b1c <_Z16StartStopTakeOffv+0x2c0>)
 8007a52:	f04f 0200 	mov.w	r2, #0
 8007a56:	67da      	str	r2, [r3, #124]	; 0x7c
				pidForHorizontal.yaw.previousError = 0;
 8007a58:	4b30      	ldr	r3, [pc, #192]	; (8007b1c <_Z16StartStopTakeOffv+0x2c0>)
 8007a5a:	f04f 0200 	mov.w	r2, #0
 8007a5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				pidForHorizontal.yaw.outputValue = 0;
 8007a62:	4b2e      	ldr	r3, [pc, #184]	; (8007b1c <_Z16StartStopTakeOffv+0x2c0>)
 8007a64:	f04f 0200 	mov.w	r2, #0
 8007a68:	671a      	str	r2, [r3, #112]	; 0x70
			}
		}
		if (gy86.shortTotalAccel_Z / 25 - gy86.accelTotalVectorAtStart > 800)
 8007a6a:	4b26      	ldr	r3, [pc, #152]	; (8007b04 <_Z16StartStopTakeOffv+0x2a8>)
 8007a6c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8007a70:	4a2e      	ldr	r2, [pc, #184]	; (8007b2c <_Z16StartStopTakeOffv+0x2d0>)
 8007a72:	fb82 1203 	smull	r1, r2, r2, r3
 8007a76:	10d2      	asrs	r2, r2, #3
 8007a78:	17db      	asrs	r3, r3, #31
 8007a7a:	1ad2      	subs	r2, r2, r3
 8007a7c:	4b21      	ldr	r3, [pc, #132]	; (8007b04 <_Z16StartStopTakeOffv+0x2a8>)
 8007a7e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8007a88:	dd2c      	ble.n	8007ae4 <_Z16StartStopTakeOffv+0x288>
		{        //Việc cất cánh được phát hiện khi chiếc Drone đang tăng tốc
			takeoffDetected = 1;                           //Đặt biến phát hiện cất cánh thành 1 để chỉ ra một lần cất cánh
 8007a8a:	4b23      	ldr	r3, [pc, #140]	; (8007b18 <_Z16StartStopTakeOffv+0x2bc>)
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	701a      	strb	r2, [r3, #0]
			ms5611.Set_PID_altitude_setpoint(groundPressure - 22);    //Đặt điểm đặt độ cao ở độ cao mặt đất + khoảng 2,2 mét.
 8007a90:	4b1e      	ldr	r3, [pc, #120]	; (8007b0c <_Z16StartStopTakeOffv+0x2b0>)
 8007a92:	edd3 7a00 	vldr	s15, [r3]
 8007a96:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8007a9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8007aa2:	4819      	ldr	r0, [pc, #100]	; (8007b08 <_Z16StartStopTakeOffv+0x2ac>)
 8007aa4:	f7fd fd22 	bl	80054ec <_ZN9Barometer25Set_PID_altitude_setpointEf>
			if (Throttle > 1400 && Throttle < 1700) takeoffThrottle = Throttle - 1530;  //Nếu ga tự động nằm trong khoảng 1400 đến 1600us trong khi cất cánh, hãy tính ga cất cánh.
 8007aa8:	4b15      	ldr	r3, [pc, #84]	; (8007b00 <_Z16StartStopTakeOffv+0x2a4>)
 8007aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007aae:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8007ab2:	dd11      	ble.n	8007ad8 <_Z16StartStopTakeOffv+0x27c>
 8007ab4:	4b12      	ldr	r3, [pc, #72]	; (8007b00 <_Z16StartStopTakeOffv+0x2a4>)
 8007ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007aba:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	dc0a      	bgt.n	8007ad8 <_Z16StartStopTakeOffv+0x27c>
 8007ac2:	4b0f      	ldr	r3, [pc, #60]	; (8007b00 <_Z16StartStopTakeOffv+0x2a4>)
 8007ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	f2a3 53fa 	subw	r3, r3, #1530	; 0x5fa
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	b21a      	sxth	r2, r3
 8007ad2:	4b10      	ldr	r3, [pc, #64]	; (8007b14 <_Z16StartStopTakeOffv+0x2b8>)
 8007ad4:	801a      	strh	r2, [r3, #0]
				takeoffThrottle = 0;    //Không có ga cất cánh được tính toán
				error = 7;
			}
		}
	}
}
 8007ad6:	e005      	b.n	8007ae4 <_Z16StartStopTakeOffv+0x288>
				takeoffThrottle = 0;    //Không có ga cất cánh được tính toán
 8007ad8:	4b0e      	ldr	r3, [pc, #56]	; (8007b14 <_Z16StartStopTakeOffv+0x2b8>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	801a      	strh	r2, [r3, #0]
				error = 7;
 8007ade:	4b10      	ldr	r3, [pc, #64]	; (8007b20 <_Z16StartStopTakeOffv+0x2c4>)
 8007ae0:	2207      	movs	r2, #7
 8007ae2:	701a      	strb	r2, [r3, #0]
}
 8007ae4:	bf00      	nop
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	2000066c 	.word	0x2000066c
 8007aec:	20000678 	.word	0x20000678
 8007af0:	20000665 	.word	0x20000665
 8007af4:	20000670 	.word	0x20000670
 8007af8:	2000067c 	.word	0x2000067c
 8007afc:	20000008 	.word	0x20000008
 8007b00:	20000688 	.word	0x20000688
 8007b04:	20000694 	.word	0x20000694
 8007b08:	200007f0 	.word	0x200007f0
 8007b0c:	2000068c 	.word	0x2000068c
 8007b10:	2000000a 	.word	0x2000000a
 8007b14:	20000690 	.word	0x20000690
 8007b18:	20000664 	.word	0x20000664
 8007b1c:	20000c0c 	.word	0x20000c0c
 8007b20:	20000666 	.word	0x20000666
 8007b24:	20000674 	.word	0x20000674
 8007b28:	20000006 	.word	0x20000006
 8007b2c:	51eb851f 	.word	0x51eb851f

08007b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007b30:	b480      	push	{r7}
 8007b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007b34:	bf00      	nop
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
	...

08007b40 <_Z41__static_initialization_and_destruction_0ii>:
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d117      	bne.n	8007b80 <_Z41__static_initialization_and_destruction_0ii+0x40>
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d112      	bne.n	8007b80 <_Z41__static_initialization_and_destruction_0ii+0x40>
IMU9DOF gy86(&hi2c1,11, 0x080E0000);
 8007b5a:	4b11      	ldr	r3, [pc, #68]	; (8007ba0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8007b5c:	220b      	movs	r2, #11
 8007b5e:	4911      	ldr	r1, [pc, #68]	; (8007ba4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8007b60:	4811      	ldr	r0, [pc, #68]	; (8007ba8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8007b62:	f7fa ff25 	bl	80029b0 <_ZN7IMU9DOFC1EP17I2C_HandleTypeDefhm>
Barometer ms5611(&hi2c1);
 8007b66:	490f      	ldr	r1, [pc, #60]	; (8007ba4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8007b68:	4810      	ldr	r0, [pc, #64]	; (8007bac <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8007b6a:	f7fd f879 	bl	8004c60 <_ZN9BarometerC1EP17I2C_HandleTypeDef>
GPS gpsM8N(GPIOA, GPIO_PIN_10);
 8007b6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007b72:	490f      	ldr	r1, [pc, #60]	; (8007bb0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8007b74:	480f      	ldr	r0, [pc, #60]	; (8007bb4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8007b76:	f7f9 fd3b 	bl	80015f0 <_ZN3GPSC1EP12GPIO_TypeDeft>
PID_Horizontal pidForHorizontal;
 8007b7a:	480f      	ldr	r0, [pc, #60]	; (8007bb8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8007b7c:	f7fc fd6c 	bl	8004658 <_ZN14PID_HorizontalC1Ev>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d107      	bne.n	8007b96 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d102      	bne.n	8007b96 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8007b90:	4809      	ldr	r0, [pc, #36]	; (8007bb8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8007b92:	f7fc fd71 	bl	8004678 <_ZN14PID_HorizontalD1Ev>
}
 8007b96:	bf00      	nop
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	080e0000 	.word	0x080e0000
 8007ba4:	200003ac 	.word	0x200003ac
 8007ba8:	20000694 	.word	0x20000694
 8007bac:	200007f0 	.word	0x200007f0
 8007bb0:	40020000 	.word	0x40020000
 8007bb4:	200009e8 	.word	0x200009e8
 8007bb8:	20000c0c 	.word	0x20000c0c

08007bbc <_GLOBAL__sub_I_hadc1>:
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007bc4:	2001      	movs	r0, #1
 8007bc6:	f7ff ffbb 	bl	8007b40 <_Z41__static_initialization_and_destruction_0ii>
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <_GLOBAL__sub_D_hadc1>:
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007bd4:	2000      	movs	r0, #0
 8007bd6:	f7ff ffb3 	bl	8007b40 <_Z41__static_initialization_and_destruction_0ii>
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007be2:	2300      	movs	r3, #0
 8007be4:	607b      	str	r3, [r7, #4]
 8007be6:	4b10      	ldr	r3, [pc, #64]	; (8007c28 <HAL_MspInit+0x4c>)
 8007be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bea:	4a0f      	ldr	r2, [pc, #60]	; (8007c28 <HAL_MspInit+0x4c>)
 8007bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8007bf2:	4b0d      	ldr	r3, [pc, #52]	; (8007c28 <HAL_MspInit+0x4c>)
 8007bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bfa:	607b      	str	r3, [r7, #4]
 8007bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007bfe:	2300      	movs	r3, #0
 8007c00:	603b      	str	r3, [r7, #0]
 8007c02:	4b09      	ldr	r3, [pc, #36]	; (8007c28 <HAL_MspInit+0x4c>)
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	4a08      	ldr	r2, [pc, #32]	; (8007c28 <HAL_MspInit+0x4c>)
 8007c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8007c0e:	4b06      	ldr	r3, [pc, #24]	; (8007c28 <HAL_MspInit+0x4c>)
 8007c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c16:	603b      	str	r3, [r7, #0]
 8007c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007c1a:	bf00      	nop
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	40023800 	.word	0x40023800

08007c2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b08a      	sub	sp, #40	; 0x28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c34:	f107 0314 	add.w	r3, r7, #20
 8007c38:	2200      	movs	r2, #0
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	605a      	str	r2, [r3, #4]
 8007c3e:	609a      	str	r2, [r3, #8]
 8007c40:	60da      	str	r2, [r3, #12]
 8007c42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a2f      	ldr	r2, [pc, #188]	; (8007d08 <HAL_ADC_MspInit+0xdc>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d157      	bne.n	8007cfe <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007c4e:	2300      	movs	r3, #0
 8007c50:	613b      	str	r3, [r7, #16]
 8007c52:	4b2e      	ldr	r3, [pc, #184]	; (8007d0c <HAL_ADC_MspInit+0xe0>)
 8007c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c56:	4a2d      	ldr	r2, [pc, #180]	; (8007d0c <HAL_ADC_MspInit+0xe0>)
 8007c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8007c5e:	4b2b      	ldr	r3, [pc, #172]	; (8007d0c <HAL_ADC_MspInit+0xe0>)
 8007c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c66:	613b      	str	r3, [r7, #16]
 8007c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	60fb      	str	r3, [r7, #12]
 8007c6e:	4b27      	ldr	r3, [pc, #156]	; (8007d0c <HAL_ADC_MspInit+0xe0>)
 8007c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c72:	4a26      	ldr	r2, [pc, #152]	; (8007d0c <HAL_ADC_MspInit+0xe0>)
 8007c74:	f043 0304 	orr.w	r3, r3, #4
 8007c78:	6313      	str	r3, [r2, #48]	; 0x30
 8007c7a:	4b24      	ldr	r3, [pc, #144]	; (8007d0c <HAL_ADC_MspInit+0xe0>)
 8007c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7e:	f003 0304 	and.w	r3, r3, #4
 8007c82:	60fb      	str	r3, [r7, #12]
 8007c84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007c86:	2301      	movs	r3, #1
 8007c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c92:	f107 0314 	add.w	r3, r7, #20
 8007c96:	4619      	mov	r1, r3
 8007c98:	481d      	ldr	r0, [pc, #116]	; (8007d10 <HAL_ADC_MspInit+0xe4>)
 8007c9a:	f001 fc17 	bl	80094cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8007c9e:	4b1d      	ldr	r3, [pc, #116]	; (8007d14 <HAL_ADC_MspInit+0xe8>)
 8007ca0:	4a1d      	ldr	r2, [pc, #116]	; (8007d18 <HAL_ADC_MspInit+0xec>)
 8007ca2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8007ca4:	4b1b      	ldr	r3, [pc, #108]	; (8007d14 <HAL_ADC_MspInit+0xe8>)
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007caa:	4b1a      	ldr	r3, [pc, #104]	; (8007d14 <HAL_ADC_MspInit+0xe8>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007cb0:	4b18      	ldr	r3, [pc, #96]	; (8007d14 <HAL_ADC_MspInit+0xe8>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007cb6:	4b17      	ldr	r3, [pc, #92]	; (8007d14 <HAL_ADC_MspInit+0xe8>)
 8007cb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007cbc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007cbe:	4b15      	ldr	r3, [pc, #84]	; (8007d14 <HAL_ADC_MspInit+0xe8>)
 8007cc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cc4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007cc6:	4b13      	ldr	r3, [pc, #76]	; (8007d14 <HAL_ADC_MspInit+0xe8>)
 8007cc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007ccc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007cce:	4b11      	ldr	r3, [pc, #68]	; (8007d14 <HAL_ADC_MspInit+0xe8>)
 8007cd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cd4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007cd6:	4b0f      	ldr	r3, [pc, #60]	; (8007d14 <HAL_ADC_MspInit+0xe8>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007cdc:	4b0d      	ldr	r3, [pc, #52]	; (8007d14 <HAL_ADC_MspInit+0xe8>)
 8007cde:	2200      	movs	r2, #0
 8007ce0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007ce2:	480c      	ldr	r0, [pc, #48]	; (8007d14 <HAL_ADC_MspInit+0xe8>)
 8007ce4:	f000 feec 	bl	8008ac0 <HAL_DMA_Init>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d001      	beq.n	8007cf2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8007cee:	f7ff ff1f 	bl	8007b30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a07      	ldr	r2, [pc, #28]	; (8007d14 <HAL_ADC_MspInit+0xe8>)
 8007cf6:	639a      	str	r2, [r3, #56]	; 0x38
 8007cf8:	4a06      	ldr	r2, [pc, #24]	; (8007d14 <HAL_ADC_MspInit+0xe8>)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8007cfe:	bf00      	nop
 8007d00:	3728      	adds	r7, #40	; 0x28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	40012000 	.word	0x40012000
 8007d0c:	40023800 	.word	0x40023800
 8007d10:	40020800 	.word	0x40020800
 8007d14:	2000034c 	.word	0x2000034c
 8007d18:	40026410 	.word	0x40026410

08007d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b08c      	sub	sp, #48	; 0x30
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d24:	f107 031c 	add.w	r3, r7, #28
 8007d28:	2200      	movs	r2, #0
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	605a      	str	r2, [r3, #4]
 8007d2e:	609a      	str	r2, [r3, #8]
 8007d30:	60da      	str	r2, [r3, #12]
 8007d32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a32      	ldr	r2, [pc, #200]	; (8007e04 <HAL_I2C_MspInit+0xe8>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d12c      	bne.n	8007d98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d3e:	2300      	movs	r3, #0
 8007d40:	61bb      	str	r3, [r7, #24]
 8007d42:	4b31      	ldr	r3, [pc, #196]	; (8007e08 <HAL_I2C_MspInit+0xec>)
 8007d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d46:	4a30      	ldr	r2, [pc, #192]	; (8007e08 <HAL_I2C_MspInit+0xec>)
 8007d48:	f043 0302 	orr.w	r3, r3, #2
 8007d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8007d4e:	4b2e      	ldr	r3, [pc, #184]	; (8007e08 <HAL_I2C_MspInit+0xec>)
 8007d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d52:	f003 0302 	and.w	r3, r3, #2
 8007d56:	61bb      	str	r3, [r7, #24]
 8007d58:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007d5a:	23c0      	movs	r3, #192	; 0xc0
 8007d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d5e:	2312      	movs	r3, #18
 8007d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d62:	2301      	movs	r3, #1
 8007d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d66:	2303      	movs	r3, #3
 8007d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007d6a:	2304      	movs	r3, #4
 8007d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d6e:	f107 031c 	add.w	r3, r7, #28
 8007d72:	4619      	mov	r1, r3
 8007d74:	4825      	ldr	r0, [pc, #148]	; (8007e0c <HAL_I2C_MspInit+0xf0>)
 8007d76:	f001 fba9 	bl	80094cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	617b      	str	r3, [r7, #20]
 8007d7e:	4b22      	ldr	r3, [pc, #136]	; (8007e08 <HAL_I2C_MspInit+0xec>)
 8007d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d82:	4a21      	ldr	r2, [pc, #132]	; (8007e08 <HAL_I2C_MspInit+0xec>)
 8007d84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d88:	6413      	str	r3, [r2, #64]	; 0x40
 8007d8a:	4b1f      	ldr	r3, [pc, #124]	; (8007e08 <HAL_I2C_MspInit+0xec>)
 8007d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d92:	617b      	str	r3, [r7, #20]
 8007d94:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007d96:	e031      	b.n	8007dfc <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a1c      	ldr	r2, [pc, #112]	; (8007e10 <HAL_I2C_MspInit+0xf4>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d12c      	bne.n	8007dfc <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007da2:	2300      	movs	r3, #0
 8007da4:	613b      	str	r3, [r7, #16]
 8007da6:	4b18      	ldr	r3, [pc, #96]	; (8007e08 <HAL_I2C_MspInit+0xec>)
 8007da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007daa:	4a17      	ldr	r2, [pc, #92]	; (8007e08 <HAL_I2C_MspInit+0xec>)
 8007dac:	f043 0302 	orr.w	r3, r3, #2
 8007db0:	6313      	str	r3, [r2, #48]	; 0x30
 8007db2:	4b15      	ldr	r3, [pc, #84]	; (8007e08 <HAL_I2C_MspInit+0xec>)
 8007db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	613b      	str	r3, [r7, #16]
 8007dbc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007dbe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007dc4:	2312      	movs	r3, #18
 8007dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007dd0:	2304      	movs	r3, #4
 8007dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007dd4:	f107 031c 	add.w	r3, r7, #28
 8007dd8:	4619      	mov	r1, r3
 8007dda:	480c      	ldr	r0, [pc, #48]	; (8007e0c <HAL_I2C_MspInit+0xf0>)
 8007ddc:	f001 fb76 	bl	80094cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007de0:	2300      	movs	r3, #0
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	4b08      	ldr	r3, [pc, #32]	; (8007e08 <HAL_I2C_MspInit+0xec>)
 8007de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de8:	4a07      	ldr	r2, [pc, #28]	; (8007e08 <HAL_I2C_MspInit+0xec>)
 8007dea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007dee:	6413      	str	r3, [r2, #64]	; 0x40
 8007df0:	4b05      	ldr	r3, [pc, #20]	; (8007e08 <HAL_I2C_MspInit+0xec>)
 8007df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007df8:	60fb      	str	r3, [r7, #12]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
}
 8007dfc:	bf00      	nop
 8007dfe:	3730      	adds	r7, #48	; 0x30
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	40005400 	.word	0x40005400
 8007e08:	40023800 	.word	0x40023800
 8007e0c:	40020400 	.word	0x40020400
 8007e10:	40005800 	.word	0x40005800

08007e14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b08a      	sub	sp, #40	; 0x28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e1c:	f107 0314 	add.w	r3, r7, #20
 8007e20:	2200      	movs	r2, #0
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	605a      	str	r2, [r3, #4]
 8007e26:	609a      	str	r2, [r3, #8]
 8007e28:	60da      	str	r2, [r3, #12]
 8007e2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a1d      	ldr	r2, [pc, #116]	; (8007ea8 <HAL_SPI_MspInit+0x94>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d133      	bne.n	8007e9e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007e36:	2300      	movs	r3, #0
 8007e38:	613b      	str	r3, [r7, #16]
 8007e3a:	4b1c      	ldr	r3, [pc, #112]	; (8007eac <HAL_SPI_MspInit+0x98>)
 8007e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e3e:	4a1b      	ldr	r2, [pc, #108]	; (8007eac <HAL_SPI_MspInit+0x98>)
 8007e40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e44:	6453      	str	r3, [r2, #68]	; 0x44
 8007e46:	4b19      	ldr	r3, [pc, #100]	; (8007eac <HAL_SPI_MspInit+0x98>)
 8007e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e4e:	613b      	str	r3, [r7, #16]
 8007e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e52:	2300      	movs	r3, #0
 8007e54:	60fb      	str	r3, [r7, #12]
 8007e56:	4b15      	ldr	r3, [pc, #84]	; (8007eac <HAL_SPI_MspInit+0x98>)
 8007e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5a:	4a14      	ldr	r2, [pc, #80]	; (8007eac <HAL_SPI_MspInit+0x98>)
 8007e5c:	f043 0301 	orr.w	r3, r3, #1
 8007e60:	6313      	str	r3, [r2, #48]	; 0x30
 8007e62:	4b12      	ldr	r3, [pc, #72]	; (8007eac <HAL_SPI_MspInit+0x98>)
 8007e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	60fb      	str	r3, [r7, #12]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007e6e:	23e0      	movs	r3, #224	; 0xe0
 8007e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e72:	2302      	movs	r3, #2
 8007e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e76:	2300      	movs	r3, #0
 8007e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007e7e:	2305      	movs	r3, #5
 8007e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e82:	f107 0314 	add.w	r3, r7, #20
 8007e86:	4619      	mov	r1, r3
 8007e88:	4809      	ldr	r0, [pc, #36]	; (8007eb0 <HAL_SPI_MspInit+0x9c>)
 8007e8a:	f001 fb1f 	bl	80094cc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2100      	movs	r1, #0
 8007e92:	2023      	movs	r0, #35	; 0x23
 8007e94:	f000 fddd 	bl	8008a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8007e98:	2023      	movs	r0, #35	; 0x23
 8007e9a:	f000 fdf6 	bl	8008a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007e9e:	bf00      	nop
 8007ea0:	3728      	adds	r7, #40	; 0x28
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	40013000 	.word	0x40013000
 8007eac:	40023800 	.word	0x40023800
 8007eb0:	40020000 	.word	0x40020000

08007eb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a26      	ldr	r2, [pc, #152]	; (8007f5c <HAL_TIM_Base_MspInit+0xa8>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d10e      	bne.n	8007ee4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	617b      	str	r3, [r7, #20]
 8007eca:	4b25      	ldr	r3, [pc, #148]	; (8007f60 <HAL_TIM_Base_MspInit+0xac>)
 8007ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ece:	4a24      	ldr	r2, [pc, #144]	; (8007f60 <HAL_TIM_Base_MspInit+0xac>)
 8007ed0:	f043 0301 	orr.w	r3, r3, #1
 8007ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8007ed6:	4b22      	ldr	r3, [pc, #136]	; (8007f60 <HAL_TIM_Base_MspInit+0xac>)
 8007ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	617b      	str	r3, [r7, #20]
 8007ee0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007ee2:	e036      	b.n	8007f52 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eec:	d116      	bne.n	8007f1c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007eee:	2300      	movs	r3, #0
 8007ef0:	613b      	str	r3, [r7, #16]
 8007ef2:	4b1b      	ldr	r3, [pc, #108]	; (8007f60 <HAL_TIM_Base_MspInit+0xac>)
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef6:	4a1a      	ldr	r2, [pc, #104]	; (8007f60 <HAL_TIM_Base_MspInit+0xac>)
 8007ef8:	f043 0301 	orr.w	r3, r3, #1
 8007efc:	6413      	str	r3, [r2, #64]	; 0x40
 8007efe:	4b18      	ldr	r3, [pc, #96]	; (8007f60 <HAL_TIM_Base_MspInit+0xac>)
 8007f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	613b      	str	r3, [r7, #16]
 8007f08:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	201c      	movs	r0, #28
 8007f10:	f000 fd9f 	bl	8008a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007f14:	201c      	movs	r0, #28
 8007f16:	f000 fdb8 	bl	8008a8a <HAL_NVIC_EnableIRQ>
}
 8007f1a:	e01a      	b.n	8007f52 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a10      	ldr	r2, [pc, #64]	; (8007f64 <HAL_TIM_Base_MspInit+0xb0>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d115      	bne.n	8007f52 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007f26:	2300      	movs	r3, #0
 8007f28:	60fb      	str	r3, [r7, #12]
 8007f2a:	4b0d      	ldr	r3, [pc, #52]	; (8007f60 <HAL_TIM_Base_MspInit+0xac>)
 8007f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2e:	4a0c      	ldr	r2, [pc, #48]	; (8007f60 <HAL_TIM_Base_MspInit+0xac>)
 8007f30:	f043 0304 	orr.w	r3, r3, #4
 8007f34:	6413      	str	r3, [r2, #64]	; 0x40
 8007f36:	4b0a      	ldr	r3, [pc, #40]	; (8007f60 <HAL_TIM_Base_MspInit+0xac>)
 8007f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3a:	f003 0304 	and.w	r3, r3, #4
 8007f3e:	60fb      	str	r3, [r7, #12]
 8007f40:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007f42:	2200      	movs	r2, #0
 8007f44:	2100      	movs	r1, #0
 8007f46:	201e      	movs	r0, #30
 8007f48:	f000 fd83 	bl	8008a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007f4c:	201e      	movs	r0, #30
 8007f4e:	f000 fd9c 	bl	8008a8a <HAL_NVIC_EnableIRQ>
}
 8007f52:	bf00      	nop
 8007f54:	3718      	adds	r7, #24
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	40010000 	.word	0x40010000
 8007f60:	40023800 	.word	0x40023800
 8007f64:	40000800 	.word	0x40000800

08007f68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f70:	f107 030c 	add.w	r3, r7, #12
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	605a      	str	r2, [r3, #4]
 8007f7a:	609a      	str	r2, [r3, #8]
 8007f7c:	60da      	str	r2, [r3, #12]
 8007f7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a12      	ldr	r2, [pc, #72]	; (8007fd0 <HAL_TIM_MspPostInit+0x68>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d11e      	bne.n	8007fc8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	60bb      	str	r3, [r7, #8]
 8007f8e:	4b11      	ldr	r3, [pc, #68]	; (8007fd4 <HAL_TIM_MspPostInit+0x6c>)
 8007f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f92:	4a10      	ldr	r2, [pc, #64]	; (8007fd4 <HAL_TIM_MspPostInit+0x6c>)
 8007f94:	f043 0308 	orr.w	r3, r3, #8
 8007f98:	6313      	str	r3, [r2, #48]	; 0x30
 8007f9a:	4b0e      	ldr	r3, [pc, #56]	; (8007fd4 <HAL_TIM_MspPostInit+0x6c>)
 8007f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9e:	f003 0308 	and.w	r3, r3, #8
 8007fa2:	60bb      	str	r3, [r7, #8]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007fa6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007faa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fac:	2302      	movs	r3, #2
 8007fae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007fb8:	2302      	movs	r3, #2
 8007fba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007fbc:	f107 030c 	add.w	r3, r7, #12
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	4805      	ldr	r0, [pc, #20]	; (8007fd8 <HAL_TIM_MspPostInit+0x70>)
 8007fc4:	f001 fa82 	bl	80094cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007fc8:	bf00      	nop
 8007fca:	3720      	adds	r7, #32
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	40000800 	.word	0x40000800
 8007fd4:	40023800 	.word	0x40023800
 8007fd8:	40020c00 	.word	0x40020c00

08007fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b08e      	sub	sp, #56	; 0x38
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fe8:	2200      	movs	r2, #0
 8007fea:	601a      	str	r2, [r3, #0]
 8007fec:	605a      	str	r2, [r3, #4]
 8007fee:	609a      	str	r2, [r3, #8]
 8007ff0:	60da      	str	r2, [r3, #12]
 8007ff2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a5b      	ldr	r2, [pc, #364]	; (8008168 <HAL_UART_MspInit+0x18c>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d12c      	bne.n	8008058 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007ffe:	2300      	movs	r3, #0
 8008000:	623b      	str	r3, [r7, #32]
 8008002:	4b5a      	ldr	r3, [pc, #360]	; (800816c <HAL_UART_MspInit+0x190>)
 8008004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008006:	4a59      	ldr	r2, [pc, #356]	; (800816c <HAL_UART_MspInit+0x190>)
 8008008:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800800c:	6413      	str	r3, [r2, #64]	; 0x40
 800800e:	4b57      	ldr	r3, [pc, #348]	; (800816c <HAL_UART_MspInit+0x190>)
 8008010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008012:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008016:	623b      	str	r3, [r7, #32]
 8008018:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800801a:	2300      	movs	r3, #0
 800801c:	61fb      	str	r3, [r7, #28]
 800801e:	4b53      	ldr	r3, [pc, #332]	; (800816c <HAL_UART_MspInit+0x190>)
 8008020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008022:	4a52      	ldr	r2, [pc, #328]	; (800816c <HAL_UART_MspInit+0x190>)
 8008024:	f043 0301 	orr.w	r3, r3, #1
 8008028:	6313      	str	r3, [r2, #48]	; 0x30
 800802a:	4b50      	ldr	r3, [pc, #320]	; (800816c <HAL_UART_MspInit+0x190>)
 800802c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	61fb      	str	r3, [r7, #28]
 8008034:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008036:	2303      	movs	r3, #3
 8008038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800803a:	2302      	movs	r3, #2
 800803c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800803e:	2301      	movs	r3, #1
 8008040:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008042:	2303      	movs	r3, #3
 8008044:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8008046:	2308      	movs	r3, #8
 8008048:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800804a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800804e:	4619      	mov	r1, r3
 8008050:	4847      	ldr	r0, [pc, #284]	; (8008170 <HAL_UART_MspInit+0x194>)
 8008052:	f001 fa3b 	bl	80094cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008056:	e082      	b.n	800815e <HAL_UART_MspInit+0x182>
  else if(huart->Instance==UART5)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a45      	ldr	r2, [pc, #276]	; (8008174 <HAL_UART_MspInit+0x198>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d14b      	bne.n	80080fa <HAL_UART_MspInit+0x11e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8008062:	2300      	movs	r3, #0
 8008064:	61bb      	str	r3, [r7, #24]
 8008066:	4b41      	ldr	r3, [pc, #260]	; (800816c <HAL_UART_MspInit+0x190>)
 8008068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806a:	4a40      	ldr	r2, [pc, #256]	; (800816c <HAL_UART_MspInit+0x190>)
 800806c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008070:	6413      	str	r3, [r2, #64]	; 0x40
 8008072:	4b3e      	ldr	r3, [pc, #248]	; (800816c <HAL_UART_MspInit+0x190>)
 8008074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800807a:	61bb      	str	r3, [r7, #24]
 800807c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800807e:	2300      	movs	r3, #0
 8008080:	617b      	str	r3, [r7, #20]
 8008082:	4b3a      	ldr	r3, [pc, #232]	; (800816c <HAL_UART_MspInit+0x190>)
 8008084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008086:	4a39      	ldr	r2, [pc, #228]	; (800816c <HAL_UART_MspInit+0x190>)
 8008088:	f043 0304 	orr.w	r3, r3, #4
 800808c:	6313      	str	r3, [r2, #48]	; 0x30
 800808e:	4b37      	ldr	r3, [pc, #220]	; (800816c <HAL_UART_MspInit+0x190>)
 8008090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008092:	f003 0304 	and.w	r3, r3, #4
 8008096:	617b      	str	r3, [r7, #20]
 8008098:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800809a:	2300      	movs	r3, #0
 800809c:	613b      	str	r3, [r7, #16]
 800809e:	4b33      	ldr	r3, [pc, #204]	; (800816c <HAL_UART_MspInit+0x190>)
 80080a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a2:	4a32      	ldr	r2, [pc, #200]	; (800816c <HAL_UART_MspInit+0x190>)
 80080a4:	f043 0308 	orr.w	r3, r3, #8
 80080a8:	6313      	str	r3, [r2, #48]	; 0x30
 80080aa:	4b30      	ldr	r3, [pc, #192]	; (800816c <HAL_UART_MspInit+0x190>)
 80080ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ae:	f003 0308 	and.w	r3, r3, #8
 80080b2:	613b      	str	r3, [r7, #16]
 80080b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80080b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080bc:	2302      	movs	r3, #2
 80080be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80080c0:	2301      	movs	r3, #1
 80080c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080c4:	2303      	movs	r3, #3
 80080c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80080c8:	2308      	movs	r3, #8
 80080ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080d0:	4619      	mov	r1, r3
 80080d2:	4829      	ldr	r0, [pc, #164]	; (8008178 <HAL_UART_MspInit+0x19c>)
 80080d4:	f001 f9fa 	bl	80094cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80080d8:	2304      	movs	r3, #4
 80080da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080dc:	2302      	movs	r3, #2
 80080de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80080e0:	2301      	movs	r3, #1
 80080e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080e4:	2303      	movs	r3, #3
 80080e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80080e8:	2308      	movs	r3, #8
 80080ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80080ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080f0:	4619      	mov	r1, r3
 80080f2:	4822      	ldr	r0, [pc, #136]	; (800817c <HAL_UART_MspInit+0x1a0>)
 80080f4:	f001 f9ea 	bl	80094cc <HAL_GPIO_Init>
}
 80080f8:	e031      	b.n	800815e <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART1)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a20      	ldr	r2, [pc, #128]	; (8008180 <HAL_UART_MspInit+0x1a4>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d12c      	bne.n	800815e <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART1_CLK_ENABLE();
 8008104:	2300      	movs	r3, #0
 8008106:	60fb      	str	r3, [r7, #12]
 8008108:	4b18      	ldr	r3, [pc, #96]	; (800816c <HAL_UART_MspInit+0x190>)
 800810a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810c:	4a17      	ldr	r2, [pc, #92]	; (800816c <HAL_UART_MspInit+0x190>)
 800810e:	f043 0310 	orr.w	r3, r3, #16
 8008112:	6453      	str	r3, [r2, #68]	; 0x44
 8008114:	4b15      	ldr	r3, [pc, #84]	; (800816c <HAL_UART_MspInit+0x190>)
 8008116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008118:	f003 0310 	and.w	r3, r3, #16
 800811c:	60fb      	str	r3, [r7, #12]
 800811e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008120:	2300      	movs	r3, #0
 8008122:	60bb      	str	r3, [r7, #8]
 8008124:	4b11      	ldr	r3, [pc, #68]	; (800816c <HAL_UART_MspInit+0x190>)
 8008126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008128:	4a10      	ldr	r2, [pc, #64]	; (800816c <HAL_UART_MspInit+0x190>)
 800812a:	f043 0301 	orr.w	r3, r3, #1
 800812e:	6313      	str	r3, [r2, #48]	; 0x30
 8008130:	4b0e      	ldr	r3, [pc, #56]	; (800816c <HAL_UART_MspInit+0x190>)
 8008132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	60bb      	str	r3, [r7, #8]
 800813a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800813c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008140:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008142:	2302      	movs	r3, #2
 8008144:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008146:	2300      	movs	r3, #0
 8008148:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800814a:	2303      	movs	r3, #3
 800814c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800814e:	2307      	movs	r3, #7
 8008150:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008156:	4619      	mov	r1, r3
 8008158:	4805      	ldr	r0, [pc, #20]	; (8008170 <HAL_UART_MspInit+0x194>)
 800815a:	f001 f9b7 	bl	80094cc <HAL_GPIO_Init>
}
 800815e:	bf00      	nop
 8008160:	3738      	adds	r7, #56	; 0x38
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	40004c00 	.word	0x40004c00
 800816c:	40023800 	.word	0x40023800
 8008170:	40020000 	.word	0x40020000
 8008174:	40005000 	.word	0x40005000
 8008178:	40020800 	.word	0x40020800
 800817c:	40020c00 	.word	0x40020c00
 8008180:	40011000 	.word	0x40011000

08008184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008184:	b480      	push	{r7}
 8008186:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008188:	bf00      	nop
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008192:	b480      	push	{r7}
 8008194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008196:	e7fe      	b.n	8008196 <HardFault_Handler+0x4>

08008198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008198:	b480      	push	{r7}
 800819a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800819c:	e7fe      	b.n	800819c <MemManage_Handler+0x4>

0800819e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800819e:	b480      	push	{r7}
 80081a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80081a2:	e7fe      	b.n	80081a2 <BusFault_Handler+0x4>

080081a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80081a4:	b480      	push	{r7}
 80081a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80081a8:	e7fe      	b.n	80081a8 <UsageFault_Handler+0x4>

080081aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80081aa:	b480      	push	{r7}
 80081ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80081ae:	bf00      	nop
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80081b8:	b480      	push	{r7}
 80081ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80081bc:	bf00      	nop
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80081c6:	b480      	push	{r7}
 80081c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80081ca:	bf00      	nop
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80081d8:	f000 f8bc 	bl	8008354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80081dc:	bf00      	nop
 80081de:	bd80      	pop	{r7, pc}

080081e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80081e4:	4802      	ldr	r0, [pc, #8]	; (80081f0 <TIM2_IRQHandler+0x10>)
 80081e6:	f004 fc09 	bl	800c9fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80081ea:	bf00      	nop
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	200004ec 	.word	0x200004ec

080081f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80081f8:	4802      	ldr	r0, [pc, #8]	; (8008204 <TIM4_IRQHandler+0x10>)
 80081fa:	f004 fbff 	bl	800c9fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80081fe:	bf00      	nop
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	2000052c 	.word	0x2000052c

08008208 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800820c:	4802      	ldr	r0, [pc, #8]	; (8008218 <SPI1_IRQHandler+0x10>)
 800820e:	f004 f927 	bl	800c460 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8008212:	bf00      	nop
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	20000454 	.word	0x20000454

0800821c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008220:	4802      	ldr	r0, [pc, #8]	; (800822c <DMA2_Stream0_IRQHandler+0x10>)
 8008222:	f000 fd1d 	bl	8008c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008226:	bf00      	nop
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	2000034c 	.word	0x2000034c

08008230 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008230:	b480      	push	{r7}
 8008232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008234:	4b08      	ldr	r3, [pc, #32]	; (8008258 <SystemInit+0x28>)
 8008236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800823a:	4a07      	ldr	r2, [pc, #28]	; (8008258 <SystemInit+0x28>)
 800823c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008244:	4b04      	ldr	r3, [pc, #16]	; (8008258 <SystemInit+0x28>)
 8008246:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800824a:	609a      	str	r2, [r3, #8]
#endif
}
 800824c:	bf00      	nop
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	e000ed00 	.word	0xe000ed00

0800825c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800825c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008294 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008260:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008262:	e003      	b.n	800826c <LoopCopyDataInit>

08008264 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008264:	4b0c      	ldr	r3, [pc, #48]	; (8008298 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008266:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008268:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800826a:	3104      	adds	r1, #4

0800826c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800826c:	480b      	ldr	r0, [pc, #44]	; (800829c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800826e:	4b0c      	ldr	r3, [pc, #48]	; (80082a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008270:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008272:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008274:	d3f6      	bcc.n	8008264 <CopyDataInit>
  ldr  r2, =_sbss
 8008276:	4a0b      	ldr	r2, [pc, #44]	; (80082a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008278:	e002      	b.n	8008280 <LoopFillZerobss>

0800827a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800827a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800827c:	f842 3b04 	str.w	r3, [r2], #4

08008280 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008280:	4b09      	ldr	r3, [pc, #36]	; (80082a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008282:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008284:	d3f9      	bcc.n	800827a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008286:	f7ff ffd3 	bl	8008230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800828a:	f008 fc4b 	bl	8010b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800828e:	f7fd fdab 	bl	8005de8 <main>
  bx  lr    
 8008292:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008294:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008298:	08010f24 	.word	0x08010f24
  ldr  r0, =_sdata
 800829c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80082a0:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 80082a4:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 80082a8:	20000ccc 	.word	0x20000ccc

080082ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80082ac:	e7fe      	b.n	80082ac <ADC_IRQHandler>
	...

080082b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80082b4:	4b0e      	ldr	r3, [pc, #56]	; (80082f0 <HAL_Init+0x40>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a0d      	ldr	r2, [pc, #52]	; (80082f0 <HAL_Init+0x40>)
 80082ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80082c0:	4b0b      	ldr	r3, [pc, #44]	; (80082f0 <HAL_Init+0x40>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a0a      	ldr	r2, [pc, #40]	; (80082f0 <HAL_Init+0x40>)
 80082c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80082ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80082cc:	4b08      	ldr	r3, [pc, #32]	; (80082f0 <HAL_Init+0x40>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a07      	ldr	r2, [pc, #28]	; (80082f0 <HAL_Init+0x40>)
 80082d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80082d8:	2003      	movs	r0, #3
 80082da:	f000 fbaf 	bl	8008a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80082de:	2000      	movs	r0, #0
 80082e0:	f000 f808 	bl	80082f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80082e4:	f7ff fc7a 	bl	8007bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	40023c00 	.word	0x40023c00

080082f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80082fc:	4b12      	ldr	r3, [pc, #72]	; (8008348 <HAL_InitTick+0x54>)
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	4b12      	ldr	r3, [pc, #72]	; (800834c <HAL_InitTick+0x58>)
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	4619      	mov	r1, r3
 8008306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800830a:	fbb3 f3f1 	udiv	r3, r3, r1
 800830e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008312:	4618      	mov	r0, r3
 8008314:	f000 fbc7 	bl	8008aa6 <HAL_SYSTICK_Config>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e00e      	b.n	8008340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2b0f      	cmp	r3, #15
 8008326:	d80a      	bhi.n	800833e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008328:	2200      	movs	r2, #0
 800832a:	6879      	ldr	r1, [r7, #4]
 800832c:	f04f 30ff 	mov.w	r0, #4294967295
 8008330:	f000 fb8f 	bl	8008a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008334:	4a06      	ldr	r2, [pc, #24]	; (8008350 <HAL_InitTick+0x5c>)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800833a:	2300      	movs	r3, #0
 800833c:	e000      	b.n	8008340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
}
 8008340:	4618      	mov	r0, r3
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	2000000c 	.word	0x2000000c
 800834c:	20000014 	.word	0x20000014
 8008350:	20000010 	.word	0x20000010

08008354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008354:	b480      	push	{r7}
 8008356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008358:	4b06      	ldr	r3, [pc, #24]	; (8008374 <HAL_IncTick+0x20>)
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	461a      	mov	r2, r3
 800835e:	4b06      	ldr	r3, [pc, #24]	; (8008378 <HAL_IncTick+0x24>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4413      	add	r3, r2
 8008364:	4a04      	ldr	r2, [pc, #16]	; (8008378 <HAL_IncTick+0x24>)
 8008366:	6013      	str	r3, [r2, #0]
}
 8008368:	bf00      	nop
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	20000014 	.word	0x20000014
 8008378:	20000ca8 	.word	0x20000ca8

0800837c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800837c:	b480      	push	{r7}
 800837e:	af00      	add	r7, sp, #0
  return uwTick;
 8008380:	4b03      	ldr	r3, [pc, #12]	; (8008390 <HAL_GetTick+0x14>)
 8008382:	681b      	ldr	r3, [r3, #0]
}
 8008384:	4618      	mov	r0, r3
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	20000ca8 	.word	0x20000ca8

08008394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800839c:	f7ff ffee 	bl	800837c <HAL_GetTick>
 80083a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ac:	d005      	beq.n	80083ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80083ae:	4b09      	ldr	r3, [pc, #36]	; (80083d4 <HAL_Delay+0x40>)
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	461a      	mov	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	4413      	add	r3, r2
 80083b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80083ba:	bf00      	nop
 80083bc:	f7ff ffde 	bl	800837c <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d8f7      	bhi.n	80083bc <HAL_Delay+0x28>
  {
  }
}
 80083cc:	bf00      	nop
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	20000014 	.word	0x20000014

080083d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e033      	b.n	8008456 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d109      	bne.n	800840a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7ff fc18 	bl	8007c2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840e:	f003 0310 	and.w	r3, r3, #16
 8008412:	2b00      	cmp	r3, #0
 8008414:	d118      	bne.n	8008448 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800841e:	f023 0302 	bic.w	r3, r3, #2
 8008422:	f043 0202 	orr.w	r2, r3, #2
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f93a 	bl	80086a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843a:	f023 0303 	bic.w	r3, r3, #3
 800843e:	f043 0201 	orr.w	r2, r3, #1
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	641a      	str	r2, [r3, #64]	; 0x40
 8008446:	e001      	b.n	800844c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008454:	7bfb      	ldrb	r3, [r7, #15]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
	...

08008460 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008474:	2b01      	cmp	r3, #1
 8008476:	d101      	bne.n	800847c <HAL_ADC_ConfigChannel+0x1c>
 8008478:	2302      	movs	r3, #2
 800847a:	e105      	b.n	8008688 <HAL_ADC_ConfigChannel+0x228>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b09      	cmp	r3, #9
 800848a:	d925      	bls.n	80084d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68d9      	ldr	r1, [r3, #12]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	b29b      	uxth	r3, r3
 8008498:	461a      	mov	r2, r3
 800849a:	4613      	mov	r3, r2
 800849c:	005b      	lsls	r3, r3, #1
 800849e:	4413      	add	r3, r2
 80084a0:	3b1e      	subs	r3, #30
 80084a2:	2207      	movs	r2, #7
 80084a4:	fa02 f303 	lsl.w	r3, r2, r3
 80084a8:	43da      	mvns	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	400a      	ands	r2, r1
 80084b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68d9      	ldr	r1, [r3, #12]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	689a      	ldr	r2, [r3, #8]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	4618      	mov	r0, r3
 80084c4:	4603      	mov	r3, r0
 80084c6:	005b      	lsls	r3, r3, #1
 80084c8:	4403      	add	r3, r0
 80084ca:	3b1e      	subs	r3, #30
 80084cc:	409a      	lsls	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	430a      	orrs	r2, r1
 80084d4:	60da      	str	r2, [r3, #12]
 80084d6:	e022      	b.n	800851e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6919      	ldr	r1, [r3, #16]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	461a      	mov	r2, r3
 80084e6:	4613      	mov	r3, r2
 80084e8:	005b      	lsls	r3, r3, #1
 80084ea:	4413      	add	r3, r2
 80084ec:	2207      	movs	r2, #7
 80084ee:	fa02 f303 	lsl.w	r3, r2, r3
 80084f2:	43da      	mvns	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	400a      	ands	r2, r1
 80084fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6919      	ldr	r1, [r3, #16]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	689a      	ldr	r2, [r3, #8]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	b29b      	uxth	r3, r3
 800850c:	4618      	mov	r0, r3
 800850e:	4603      	mov	r3, r0
 8008510:	005b      	lsls	r3, r3, #1
 8008512:	4403      	add	r3, r0
 8008514:	409a      	lsls	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	430a      	orrs	r2, r1
 800851c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	2b06      	cmp	r3, #6
 8008524:	d824      	bhi.n	8008570 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	685a      	ldr	r2, [r3, #4]
 8008530:	4613      	mov	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4413      	add	r3, r2
 8008536:	3b05      	subs	r3, #5
 8008538:	221f      	movs	r2, #31
 800853a:	fa02 f303 	lsl.w	r3, r2, r3
 800853e:	43da      	mvns	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	400a      	ands	r2, r1
 8008546:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	b29b      	uxth	r3, r3
 8008554:	4618      	mov	r0, r3
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	685a      	ldr	r2, [r3, #4]
 800855a:	4613      	mov	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4413      	add	r3, r2
 8008560:	3b05      	subs	r3, #5
 8008562:	fa00 f203 	lsl.w	r2, r0, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	430a      	orrs	r2, r1
 800856c:	635a      	str	r2, [r3, #52]	; 0x34
 800856e:	e04c      	b.n	800860a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	2b0c      	cmp	r3, #12
 8008576:	d824      	bhi.n	80085c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	685a      	ldr	r2, [r3, #4]
 8008582:	4613      	mov	r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	4413      	add	r3, r2
 8008588:	3b23      	subs	r3, #35	; 0x23
 800858a:	221f      	movs	r2, #31
 800858c:	fa02 f303 	lsl.w	r3, r2, r3
 8008590:	43da      	mvns	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	400a      	ands	r2, r1
 8008598:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	4618      	mov	r0, r3
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	4613      	mov	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4413      	add	r3, r2
 80085b2:	3b23      	subs	r3, #35	; 0x23
 80085b4:	fa00 f203 	lsl.w	r2, r0, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	430a      	orrs	r2, r1
 80085be:	631a      	str	r2, [r3, #48]	; 0x30
 80085c0:	e023      	b.n	800860a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	4613      	mov	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4413      	add	r3, r2
 80085d2:	3b41      	subs	r3, #65	; 0x41
 80085d4:	221f      	movs	r2, #31
 80085d6:	fa02 f303 	lsl.w	r3, r2, r3
 80085da:	43da      	mvns	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	400a      	ands	r2, r1
 80085e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	4618      	mov	r0, r3
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	4613      	mov	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	3b41      	subs	r3, #65	; 0x41
 80085fe:	fa00 f203 	lsl.w	r2, r0, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	430a      	orrs	r2, r1
 8008608:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800860a:	4b22      	ldr	r3, [pc, #136]	; (8008694 <HAL_ADC_ConfigChannel+0x234>)
 800860c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a21      	ldr	r2, [pc, #132]	; (8008698 <HAL_ADC_ConfigChannel+0x238>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d109      	bne.n	800862c <HAL_ADC_ConfigChannel+0x1cc>
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b12      	cmp	r3, #18
 800861e:	d105      	bne.n	800862c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a19      	ldr	r2, [pc, #100]	; (8008698 <HAL_ADC_ConfigChannel+0x238>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d123      	bne.n	800867e <HAL_ADC_ConfigChannel+0x21e>
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b10      	cmp	r3, #16
 800863c:	d003      	beq.n	8008646 <HAL_ADC_ConfigChannel+0x1e6>
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2b11      	cmp	r3, #17
 8008644:	d11b      	bne.n	800867e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b10      	cmp	r3, #16
 8008658:	d111      	bne.n	800867e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800865a:	4b10      	ldr	r3, [pc, #64]	; (800869c <HAL_ADC_ConfigChannel+0x23c>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a10      	ldr	r2, [pc, #64]	; (80086a0 <HAL_ADC_ConfigChannel+0x240>)
 8008660:	fba2 2303 	umull	r2, r3, r2, r3
 8008664:	0c9a      	lsrs	r2, r3, #18
 8008666:	4613      	mov	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4413      	add	r3, r2
 800866c:	005b      	lsls	r3, r3, #1
 800866e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008670:	e002      	b.n	8008678 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	3b01      	subs	r3, #1
 8008676:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1f9      	bne.n	8008672 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr
 8008694:	40012300 	.word	0x40012300
 8008698:	40012000 	.word	0x40012000
 800869c:	2000000c 	.word	0x2000000c
 80086a0:	431bde83 	.word	0x431bde83

080086a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80086ac:	4b79      	ldr	r3, [pc, #484]	; (8008894 <ADC_Init+0x1f0>)
 80086ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	685a      	ldr	r2, [r3, #4]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	431a      	orrs	r2, r3
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	685a      	ldr	r2, [r3, #4]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	6859      	ldr	r1, [r3, #4]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	021a      	lsls	r2, r3, #8
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	685a      	ldr	r2, [r3, #4]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80086fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	6859      	ldr	r1, [r3, #4]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	689a      	ldr	r2, [r3, #8]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	430a      	orrs	r2, r1
 800870e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689a      	ldr	r2, [r3, #8]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800871e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	6899      	ldr	r1, [r3, #8]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68da      	ldr	r2, [r3, #12]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008736:	4a58      	ldr	r2, [pc, #352]	; (8008898 <ADC_Init+0x1f4>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d022      	beq.n	8008782 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	689a      	ldr	r2, [r3, #8]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800874a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	6899      	ldr	r1, [r3, #8]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	430a      	orrs	r2, r1
 800875c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	689a      	ldr	r2, [r3, #8]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800876c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	6899      	ldr	r1, [r3, #8]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	430a      	orrs	r2, r1
 800877e:	609a      	str	r2, [r3, #8]
 8008780:	e00f      	b.n	80087a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	689a      	ldr	r2, [r3, #8]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008790:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	689a      	ldr	r2, [r3, #8]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80087a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	689a      	ldr	r2, [r3, #8]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f022 0202 	bic.w	r2, r2, #2
 80087b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	6899      	ldr	r1, [r3, #8]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	7e1b      	ldrb	r3, [r3, #24]
 80087bc:	005a      	lsls	r2, r3, #1
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	430a      	orrs	r2, r1
 80087c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d01b      	beq.n	8008808 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	685a      	ldr	r2, [r3, #4]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80087ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6859      	ldr	r1, [r3, #4]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fa:	3b01      	subs	r3, #1
 80087fc:	035a      	lsls	r2, r3, #13
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	430a      	orrs	r2, r1
 8008804:	605a      	str	r2, [r3, #4]
 8008806:	e007      	b.n	8008818 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008816:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008826:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	3b01      	subs	r3, #1
 8008834:	051a      	lsls	r2, r3, #20
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	430a      	orrs	r2, r1
 800883c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	689a      	ldr	r2, [r3, #8]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800884c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	6899      	ldr	r1, [r3, #8]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800885a:	025a      	lsls	r2, r3, #9
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	430a      	orrs	r2, r1
 8008862:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	689a      	ldr	r2, [r3, #8]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008872:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6899      	ldr	r1, [r3, #8]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	029a      	lsls	r2, r3, #10
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	430a      	orrs	r2, r1
 8008886:	609a      	str	r2, [r3, #8]
}
 8008888:	bf00      	nop
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr
 8008894:	40012300 	.word	0x40012300
 8008898:	0f000001 	.word	0x0f000001

0800889c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f003 0307 	and.w	r3, r3, #7
 80088aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80088ac:	4b0c      	ldr	r3, [pc, #48]	; (80088e0 <__NVIC_SetPriorityGrouping+0x44>)
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80088b8:	4013      	ands	r3, r2
 80088ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80088c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80088c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80088ce:	4a04      	ldr	r2, [pc, #16]	; (80088e0 <__NVIC_SetPriorityGrouping+0x44>)
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	60d3      	str	r3, [r2, #12]
}
 80088d4:	bf00      	nop
 80088d6:	3714      	adds	r7, #20
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr
 80088e0:	e000ed00 	.word	0xe000ed00

080088e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80088e4:	b480      	push	{r7}
 80088e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80088e8:	4b04      	ldr	r3, [pc, #16]	; (80088fc <__NVIC_GetPriorityGrouping+0x18>)
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	0a1b      	lsrs	r3, r3, #8
 80088ee:	f003 0307 	and.w	r3, r3, #7
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	e000ed00 	.word	0xe000ed00

08008900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	4603      	mov	r3, r0
 8008908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800890a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800890e:	2b00      	cmp	r3, #0
 8008910:	db0b      	blt.n	800892a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008912:	79fb      	ldrb	r3, [r7, #7]
 8008914:	f003 021f 	and.w	r2, r3, #31
 8008918:	4907      	ldr	r1, [pc, #28]	; (8008938 <__NVIC_EnableIRQ+0x38>)
 800891a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800891e:	095b      	lsrs	r3, r3, #5
 8008920:	2001      	movs	r0, #1
 8008922:	fa00 f202 	lsl.w	r2, r0, r2
 8008926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800892a:	bf00      	nop
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	e000e100 	.word	0xe000e100

0800893c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	4603      	mov	r3, r0
 8008944:	6039      	str	r1, [r7, #0]
 8008946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800894c:	2b00      	cmp	r3, #0
 800894e:	db0a      	blt.n	8008966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	b2da      	uxtb	r2, r3
 8008954:	490c      	ldr	r1, [pc, #48]	; (8008988 <__NVIC_SetPriority+0x4c>)
 8008956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800895a:	0112      	lsls	r2, r2, #4
 800895c:	b2d2      	uxtb	r2, r2
 800895e:	440b      	add	r3, r1
 8008960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008964:	e00a      	b.n	800897c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	b2da      	uxtb	r2, r3
 800896a:	4908      	ldr	r1, [pc, #32]	; (800898c <__NVIC_SetPriority+0x50>)
 800896c:	79fb      	ldrb	r3, [r7, #7]
 800896e:	f003 030f 	and.w	r3, r3, #15
 8008972:	3b04      	subs	r3, #4
 8008974:	0112      	lsls	r2, r2, #4
 8008976:	b2d2      	uxtb	r2, r2
 8008978:	440b      	add	r3, r1
 800897a:	761a      	strb	r2, [r3, #24]
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr
 8008988:	e000e100 	.word	0xe000e100
 800898c:	e000ed00 	.word	0xe000ed00

08008990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008990:	b480      	push	{r7}
 8008992:	b089      	sub	sp, #36	; 0x24
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f003 0307 	and.w	r3, r3, #7
 80089a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	f1c3 0307 	rsb	r3, r3, #7
 80089aa:	2b04      	cmp	r3, #4
 80089ac:	bf28      	it	cs
 80089ae:	2304      	movcs	r3, #4
 80089b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	3304      	adds	r3, #4
 80089b6:	2b06      	cmp	r3, #6
 80089b8:	d902      	bls.n	80089c0 <NVIC_EncodePriority+0x30>
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	3b03      	subs	r3, #3
 80089be:	e000      	b.n	80089c2 <NVIC_EncodePriority+0x32>
 80089c0:	2300      	movs	r3, #0
 80089c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80089c4:	f04f 32ff 	mov.w	r2, #4294967295
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	fa02 f303 	lsl.w	r3, r2, r3
 80089ce:	43da      	mvns	r2, r3
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	401a      	ands	r2, r3
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80089d8:	f04f 31ff 	mov.w	r1, #4294967295
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	fa01 f303 	lsl.w	r3, r1, r3
 80089e2:	43d9      	mvns	r1, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80089e8:	4313      	orrs	r3, r2
         );
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3724      	adds	r7, #36	; 0x24
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
	...

080089f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	3b01      	subs	r3, #1
 8008a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a08:	d301      	bcc.n	8008a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e00f      	b.n	8008a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008a0e:	4a0a      	ldr	r2, [pc, #40]	; (8008a38 <SysTick_Config+0x40>)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	3b01      	subs	r3, #1
 8008a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008a16:	210f      	movs	r1, #15
 8008a18:	f04f 30ff 	mov.w	r0, #4294967295
 8008a1c:	f7ff ff8e 	bl	800893c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008a20:	4b05      	ldr	r3, [pc, #20]	; (8008a38 <SysTick_Config+0x40>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008a26:	4b04      	ldr	r3, [pc, #16]	; (8008a38 <SysTick_Config+0x40>)
 8008a28:	2207      	movs	r2, #7
 8008a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	e000e010 	.word	0xe000e010

08008a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f7ff ff29 	bl	800889c <__NVIC_SetPriorityGrouping>
}
 8008a4a:	bf00      	nop
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b086      	sub	sp, #24
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	4603      	mov	r3, r0
 8008a5a:	60b9      	str	r1, [r7, #8]
 8008a5c:	607a      	str	r2, [r7, #4]
 8008a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008a60:	2300      	movs	r3, #0
 8008a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008a64:	f7ff ff3e 	bl	80088e4 <__NVIC_GetPriorityGrouping>
 8008a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	68b9      	ldr	r1, [r7, #8]
 8008a6e:	6978      	ldr	r0, [r7, #20]
 8008a70:	f7ff ff8e 	bl	8008990 <NVIC_EncodePriority>
 8008a74:	4602      	mov	r2, r0
 8008a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a7a:	4611      	mov	r1, r2
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7ff ff5d 	bl	800893c <__NVIC_SetPriority>
}
 8008a82:	bf00      	nop
 8008a84:	3718      	adds	r7, #24
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b082      	sub	sp, #8
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	4603      	mov	r3, r0
 8008a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7ff ff31 	bl	8008900 <__NVIC_EnableIRQ>
}
 8008a9e:	bf00      	nop
 8008aa0:	3708      	adds	r7, #8
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b082      	sub	sp, #8
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f7ff ffa2 	bl	80089f8 <SysTick_Config>
 8008ab4:	4603      	mov	r3, r0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
	...

08008ac0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b086      	sub	sp, #24
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008acc:	f7ff fc56 	bl	800837c <HAL_GetTick>
 8008ad0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d101      	bne.n	8008adc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e099      	b.n	8008c10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f022 0201 	bic.w	r2, r2, #1
 8008afa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008afc:	e00f      	b.n	8008b1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008afe:	f7ff fc3d 	bl	800837c <HAL_GetTick>
 8008b02:	4602      	mov	r2, r0
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	2b05      	cmp	r3, #5
 8008b0a:	d908      	bls.n	8008b1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2220      	movs	r2, #32
 8008b10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2203      	movs	r2, #3
 8008b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e078      	b.n	8008c10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 0301 	and.w	r3, r3, #1
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1e8      	bne.n	8008afe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	4b38      	ldr	r3, [pc, #224]	; (8008c18 <HAL_DMA_Init+0x158>)
 8008b38:	4013      	ands	r3, r2
 8008b3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008b4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008b62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a1b      	ldr	r3, [r3, #32]
 8008b68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008b6a:	697a      	ldr	r2, [r7, #20]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b74:	2b04      	cmp	r3, #4
 8008b76:	d107      	bne.n	8008b88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b80:	4313      	orrs	r3, r2
 8008b82:	697a      	ldr	r2, [r7, #20]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	695b      	ldr	r3, [r3, #20]
 8008b96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	f023 0307 	bic.w	r3, r3, #7
 8008b9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bae:	2b04      	cmp	r3, #4
 8008bb0:	d117      	bne.n	8008be2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00e      	beq.n	8008be2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fa0b 	bl	8008fe0 <DMA_CheckFifoParam>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d008      	beq.n	8008be2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2240      	movs	r2, #64	; 0x40
 8008bd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008bde:	2301      	movs	r3, #1
 8008be0:	e016      	b.n	8008c10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f9c2 	bl	8008f74 <DMA_CalcBaseAndBitshift>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bf8:	223f      	movs	r2, #63	; 0x3f
 8008bfa:	409a      	lsls	r2, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3718      	adds	r7, #24
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	f010803f 	.word	0xf010803f

08008c1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d004      	beq.n	8008c3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2280      	movs	r2, #128	; 0x80
 8008c34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e00c      	b.n	8008c54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2205      	movs	r2, #5
 8008c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f022 0201 	bic.w	r2, r2, #1
 8008c50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008c6c:	4b92      	ldr	r3, [pc, #584]	; (8008eb8 <HAL_DMA_IRQHandler+0x258>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a92      	ldr	r2, [pc, #584]	; (8008ebc <HAL_DMA_IRQHandler+0x25c>)
 8008c72:	fba2 2303 	umull	r2, r3, r2, r3
 8008c76:	0a9b      	lsrs	r3, r3, #10
 8008c78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c8a:	2208      	movs	r2, #8
 8008c8c:	409a      	lsls	r2, r3
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	4013      	ands	r3, r2
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d01a      	beq.n	8008ccc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f003 0304 	and.w	r3, r3, #4
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d013      	beq.n	8008ccc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f022 0204 	bic.w	r2, r2, #4
 8008cb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cb8:	2208      	movs	r2, #8
 8008cba:	409a      	lsls	r2, r3
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc4:	f043 0201 	orr.w	r2, r3, #1
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	409a      	lsls	r2, r3
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d012      	beq.n	8008d02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00b      	beq.n	8008d02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cee:	2201      	movs	r2, #1
 8008cf0:	409a      	lsls	r2, r3
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cfa:	f043 0202 	orr.w	r2, r3, #2
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d06:	2204      	movs	r2, #4
 8008d08:	409a      	lsls	r2, r3
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d012      	beq.n	8008d38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 0302 	and.w	r3, r3, #2
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00b      	beq.n	8008d38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d24:	2204      	movs	r2, #4
 8008d26:	409a      	lsls	r2, r3
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d30:	f043 0204 	orr.w	r2, r3, #4
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d3c:	2210      	movs	r2, #16
 8008d3e:	409a      	lsls	r2, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4013      	ands	r3, r2
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d043      	beq.n	8008dd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 0308 	and.w	r3, r3, #8
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d03c      	beq.n	8008dd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d5a:	2210      	movs	r2, #16
 8008d5c:	409a      	lsls	r2, r3
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d018      	beq.n	8008da2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d108      	bne.n	8008d90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d024      	beq.n	8008dd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	4798      	blx	r3
 8008d8e:	e01f      	b.n	8008dd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d01b      	beq.n	8008dd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	4798      	blx	r3
 8008da0:	e016      	b.n	8008dd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d107      	bne.n	8008dc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f022 0208 	bic.w	r2, r2, #8
 8008dbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d003      	beq.n	8008dd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dd4:	2220      	movs	r2, #32
 8008dd6:	409a      	lsls	r2, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	4013      	ands	r3, r2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f000 808e 	beq.w	8008efe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 0310 	and.w	r3, r3, #16
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 8086 	beq.w	8008efe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008df6:	2220      	movs	r2, #32
 8008df8:	409a      	lsls	r2, r3
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	2b05      	cmp	r3, #5
 8008e08:	d136      	bne.n	8008e78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f022 0216 	bic.w	r2, r2, #22
 8008e18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	695a      	ldr	r2, [r3, #20]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d103      	bne.n	8008e3a <HAL_DMA_IRQHandler+0x1da>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d007      	beq.n	8008e4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f022 0208 	bic.w	r2, r2, #8
 8008e48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e4e:	223f      	movs	r2, #63	; 0x3f
 8008e50:	409a      	lsls	r2, r3
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d07d      	beq.n	8008f6a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	4798      	blx	r3
        }
        return;
 8008e76:	e078      	b.n	8008f6a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d01c      	beq.n	8008ec0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d108      	bne.n	8008ea6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d030      	beq.n	8008efe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	4798      	blx	r3
 8008ea4:	e02b      	b.n	8008efe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d027      	beq.n	8008efe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	4798      	blx	r3
 8008eb6:	e022      	b.n	8008efe <HAL_DMA_IRQHandler+0x29e>
 8008eb8:	2000000c 	.word	0x2000000c
 8008ebc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10f      	bne.n	8008eee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f022 0210 	bic.w	r2, r2, #16
 8008edc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d003      	beq.n	8008efe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d032      	beq.n	8008f6c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d022      	beq.n	8008f58 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2205      	movs	r2, #5
 8008f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f022 0201 	bic.w	r2, r2, #1
 8008f28:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	60bb      	str	r3, [r7, #8]
 8008f30:	697a      	ldr	r2, [r7, #20]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d307      	bcc.n	8008f46 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0301 	and.w	r3, r3, #1
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1f2      	bne.n	8008f2a <HAL_DMA_IRQHandler+0x2ca>
 8008f44:	e000      	b.n	8008f48 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008f46:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d005      	beq.n	8008f6c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	4798      	blx	r3
 8008f68:	e000      	b.n	8008f6c <HAL_DMA_IRQHandler+0x30c>
        return;
 8008f6a:	bf00      	nop
    }
  }
}
 8008f6c:	3718      	adds	r7, #24
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop

08008f74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	3b10      	subs	r3, #16
 8008f84:	4a14      	ldr	r2, [pc, #80]	; (8008fd8 <DMA_CalcBaseAndBitshift+0x64>)
 8008f86:	fba2 2303 	umull	r2, r3, r2, r3
 8008f8a:	091b      	lsrs	r3, r3, #4
 8008f8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008f8e:	4a13      	ldr	r2, [pc, #76]	; (8008fdc <DMA_CalcBaseAndBitshift+0x68>)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	4413      	add	r3, r2
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	461a      	mov	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2b03      	cmp	r3, #3
 8008fa0:	d909      	bls.n	8008fb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008faa:	f023 0303 	bic.w	r3, r3, #3
 8008fae:	1d1a      	adds	r2, r3, #4
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	659a      	str	r2, [r3, #88]	; 0x58
 8008fb4:	e007      	b.n	8008fc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008fbe:	f023 0303 	bic.w	r3, r3, #3
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3714      	adds	r7, #20
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	aaaaaaab 	.word	0xaaaaaaab
 8008fdc:	08010cb8 	.word	0x08010cb8

08008fe0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d11f      	bne.n	800903a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2b03      	cmp	r3, #3
 8008ffe:	d855      	bhi.n	80090ac <DMA_CheckFifoParam+0xcc>
 8009000:	a201      	add	r2, pc, #4	; (adr r2, 8009008 <DMA_CheckFifoParam+0x28>)
 8009002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009006:	bf00      	nop
 8009008:	08009019 	.word	0x08009019
 800900c:	0800902b 	.word	0x0800902b
 8009010:	08009019 	.word	0x08009019
 8009014:	080090ad 	.word	0x080090ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009020:	2b00      	cmp	r3, #0
 8009022:	d045      	beq.n	80090b0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009028:	e042      	b.n	80090b0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009032:	d13f      	bne.n	80090b4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009038:	e03c      	b.n	80090b4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009042:	d121      	bne.n	8009088 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	2b03      	cmp	r3, #3
 8009048:	d836      	bhi.n	80090b8 <DMA_CheckFifoParam+0xd8>
 800904a:	a201      	add	r2, pc, #4	; (adr r2, 8009050 <DMA_CheckFifoParam+0x70>)
 800904c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009050:	08009061 	.word	0x08009061
 8009054:	08009067 	.word	0x08009067
 8009058:	08009061 	.word	0x08009061
 800905c:	08009079 	.word	0x08009079
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	73fb      	strb	r3, [r7, #15]
      break;
 8009064:	e02f      	b.n	80090c6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800906e:	2b00      	cmp	r3, #0
 8009070:	d024      	beq.n	80090bc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009076:	e021      	b.n	80090bc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009080:	d11e      	bne.n	80090c0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009086:	e01b      	b.n	80090c0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	2b02      	cmp	r3, #2
 800908c:	d902      	bls.n	8009094 <DMA_CheckFifoParam+0xb4>
 800908e:	2b03      	cmp	r3, #3
 8009090:	d003      	beq.n	800909a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009092:	e018      	b.n	80090c6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	73fb      	strb	r3, [r7, #15]
      break;
 8009098:	e015      	b.n	80090c6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00e      	beq.n	80090c4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	73fb      	strb	r3, [r7, #15]
      break;
 80090aa:	e00b      	b.n	80090c4 <DMA_CheckFifoParam+0xe4>
      break;
 80090ac:	bf00      	nop
 80090ae:	e00a      	b.n	80090c6 <DMA_CheckFifoParam+0xe6>
      break;
 80090b0:	bf00      	nop
 80090b2:	e008      	b.n	80090c6 <DMA_CheckFifoParam+0xe6>
      break;
 80090b4:	bf00      	nop
 80090b6:	e006      	b.n	80090c6 <DMA_CheckFifoParam+0xe6>
      break;
 80090b8:	bf00      	nop
 80090ba:	e004      	b.n	80090c6 <DMA_CheckFifoParam+0xe6>
      break;
 80090bc:	bf00      	nop
 80090be:	e002      	b.n	80090c6 <DMA_CheckFifoParam+0xe6>
      break;   
 80090c0:	bf00      	nop
 80090c2:	e000      	b.n	80090c6 <DMA_CheckFifoParam+0xe6>
      break;
 80090c4:	bf00      	nop
    }
  } 
  
  return status; 
 80090c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80090e6:	4b23      	ldr	r3, [pc, #140]	; (8009174 <HAL_FLASH_Program+0xa0>)
 80090e8:	7e1b      	ldrb	r3, [r3, #24]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d101      	bne.n	80090f2 <HAL_FLASH_Program+0x1e>
 80090ee:	2302      	movs	r3, #2
 80090f0:	e03b      	b.n	800916a <HAL_FLASH_Program+0x96>
 80090f2:	4b20      	ldr	r3, [pc, #128]	; (8009174 <HAL_FLASH_Program+0xa0>)
 80090f4:	2201      	movs	r2, #1
 80090f6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80090f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80090fc:	f000 f870 	bl	80091e0 <FLASH_WaitForLastOperation>
 8009100:	4603      	mov	r3, r0
 8009102:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8009104:	7dfb      	ldrb	r3, [r7, #23]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d12b      	bne.n	8009162 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d105      	bne.n	800911c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8009110:	783b      	ldrb	r3, [r7, #0]
 8009112:	4619      	mov	r1, r3
 8009114:	68b8      	ldr	r0, [r7, #8]
 8009116:	f000 f919 	bl	800934c <FLASH_Program_Byte>
 800911a:	e016      	b.n	800914a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2b01      	cmp	r3, #1
 8009120:	d105      	bne.n	800912e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8009122:	883b      	ldrh	r3, [r7, #0]
 8009124:	4619      	mov	r1, r3
 8009126:	68b8      	ldr	r0, [r7, #8]
 8009128:	f000 f8ec 	bl	8009304 <FLASH_Program_HalfWord>
 800912c:	e00d      	b.n	800914a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2b02      	cmp	r3, #2
 8009132:	d105      	bne.n	8009140 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	4619      	mov	r1, r3
 8009138:	68b8      	ldr	r0, [r7, #8]
 800913a:	f000 f8c1 	bl	80092c0 <FLASH_Program_Word>
 800913e:	e004      	b.n	800914a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8009140:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009144:	68b8      	ldr	r0, [r7, #8]
 8009146:	f000 f88b 	bl	8009260 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800914a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800914e:	f000 f847 	bl	80091e0 <FLASH_WaitForLastOperation>
 8009152:	4603      	mov	r3, r0
 8009154:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8009156:	4b08      	ldr	r3, [pc, #32]	; (8009178 <HAL_FLASH_Program+0xa4>)
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	4a07      	ldr	r2, [pc, #28]	; (8009178 <HAL_FLASH_Program+0xa4>)
 800915c:	f023 0301 	bic.w	r3, r3, #1
 8009160:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009162:	4b04      	ldr	r3, [pc, #16]	; (8009174 <HAL_FLASH_Program+0xa0>)
 8009164:	2200      	movs	r2, #0
 8009166:	761a      	strb	r2, [r3, #24]
  
  return status;
 8009168:	7dfb      	ldrb	r3, [r7, #23]
}
 800916a:	4618      	mov	r0, r3
 800916c:	3718      	adds	r7, #24
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	20000cac 	.word	0x20000cac
 8009178:	40023c00 	.word	0x40023c00

0800917c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009182:	2300      	movs	r3, #0
 8009184:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009186:	4b0b      	ldr	r3, [pc, #44]	; (80091b4 <HAL_FLASH_Unlock+0x38>)
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	2b00      	cmp	r3, #0
 800918c:	da0b      	bge.n	80091a6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800918e:	4b09      	ldr	r3, [pc, #36]	; (80091b4 <HAL_FLASH_Unlock+0x38>)
 8009190:	4a09      	ldr	r2, [pc, #36]	; (80091b8 <HAL_FLASH_Unlock+0x3c>)
 8009192:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009194:	4b07      	ldr	r3, [pc, #28]	; (80091b4 <HAL_FLASH_Unlock+0x38>)
 8009196:	4a09      	ldr	r2, [pc, #36]	; (80091bc <HAL_FLASH_Unlock+0x40>)
 8009198:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800919a:	4b06      	ldr	r3, [pc, #24]	; (80091b4 <HAL_FLASH_Unlock+0x38>)
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	da01      	bge.n	80091a6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80091a6:	79fb      	ldrb	r3, [r7, #7]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr
 80091b4:	40023c00 	.word	0x40023c00
 80091b8:	45670123 	.word	0x45670123
 80091bc:	cdef89ab 	.word	0xcdef89ab

080091c0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80091c0:	b480      	push	{r7}
 80091c2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80091c4:	4b05      	ldr	r3, [pc, #20]	; (80091dc <HAL_FLASH_Lock+0x1c>)
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	4a04      	ldr	r2, [pc, #16]	; (80091dc <HAL_FLASH_Lock+0x1c>)
 80091ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091ce:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	40023c00 	.word	0x40023c00

080091e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80091e8:	2300      	movs	r3, #0
 80091ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80091ec:	4b1a      	ldr	r3, [pc, #104]	; (8009258 <FLASH_WaitForLastOperation+0x78>)
 80091ee:	2200      	movs	r2, #0
 80091f0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80091f2:	f7ff f8c3 	bl	800837c <HAL_GetTick>
 80091f6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80091f8:	e010      	b.n	800921c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009200:	d00c      	beq.n	800921c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d007      	beq.n	8009218 <FLASH_WaitForLastOperation+0x38>
 8009208:	f7ff f8b8 	bl	800837c <HAL_GetTick>
 800920c:	4602      	mov	r2, r0
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	1ad3      	subs	r3, r2, r3
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	429a      	cmp	r2, r3
 8009216:	d201      	bcs.n	800921c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8009218:	2303      	movs	r3, #3
 800921a:	e019      	b.n	8009250 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800921c:	4b0f      	ldr	r3, [pc, #60]	; (800925c <FLASH_WaitForLastOperation+0x7c>)
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1e8      	bne.n	80091fa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8009228:	4b0c      	ldr	r3, [pc, #48]	; (800925c <FLASH_WaitForLastOperation+0x7c>)
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	f003 0301 	and.w	r3, r3, #1
 8009230:	2b00      	cmp	r3, #0
 8009232:	d002      	beq.n	800923a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009234:	4b09      	ldr	r3, [pc, #36]	; (800925c <FLASH_WaitForLastOperation+0x7c>)
 8009236:	2201      	movs	r2, #1
 8009238:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800923a:	4b08      	ldr	r3, [pc, #32]	; (800925c <FLASH_WaitForLastOperation+0x7c>)
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8009242:	2b00      	cmp	r3, #0
 8009244:	d003      	beq.n	800924e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8009246:	f000 f8a3 	bl	8009390 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	e000      	b.n	8009250 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800924e:	2300      	movs	r3, #0
  
}  
 8009250:	4618      	mov	r0, r3
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	20000cac 	.word	0x20000cac
 800925c:	40023c00 	.word	0x40023c00

08009260 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009260:	b490      	push	{r4, r7}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800926c:	4b13      	ldr	r3, [pc, #76]	; (80092bc <FLASH_Program_DoubleWord+0x5c>)
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	4a12      	ldr	r2, [pc, #72]	; (80092bc <FLASH_Program_DoubleWord+0x5c>)
 8009272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009276:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8009278:	4b10      	ldr	r3, [pc, #64]	; (80092bc <FLASH_Program_DoubleWord+0x5c>)
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	4a0f      	ldr	r2, [pc, #60]	; (80092bc <FLASH_Program_DoubleWord+0x5c>)
 800927e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009282:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009284:	4b0d      	ldr	r3, [pc, #52]	; (80092bc <FLASH_Program_DoubleWord+0x5c>)
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	4a0c      	ldr	r2, [pc, #48]	; (80092bc <FLASH_Program_DoubleWord+0x5c>)
 800928a:	f043 0301 	orr.w	r3, r3, #1
 800928e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8009296:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800929a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800929e:	f04f 0300 	mov.w	r3, #0
 80092a2:	f04f 0400 	mov.w	r4, #0
 80092a6:	0013      	movs	r3, r2
 80092a8:	2400      	movs	r4, #0
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	3204      	adds	r2, #4
 80092ae:	6013      	str	r3, [r2, #0]
}
 80092b0:	bf00      	nop
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bc90      	pop	{r4, r7}
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	40023c00 	.word	0x40023c00

080092c0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80092ca:	4b0d      	ldr	r3, [pc, #52]	; (8009300 <FLASH_Program_Word+0x40>)
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	4a0c      	ldr	r2, [pc, #48]	; (8009300 <FLASH_Program_Word+0x40>)
 80092d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80092d6:	4b0a      	ldr	r3, [pc, #40]	; (8009300 <FLASH_Program_Word+0x40>)
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	4a09      	ldr	r2, [pc, #36]	; (8009300 <FLASH_Program_Word+0x40>)
 80092dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80092e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80092e2:	4b07      	ldr	r3, [pc, #28]	; (8009300 <FLASH_Program_Word+0x40>)
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	4a06      	ldr	r2, [pc, #24]	; (8009300 <FLASH_Program_Word+0x40>)
 80092e8:	f043 0301 	orr.w	r3, r3, #1
 80092ec:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	601a      	str	r2, [r3, #0]
}
 80092f4:	bf00      	nop
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	40023c00 	.word	0x40023c00

08009304 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	460b      	mov	r3, r1
 800930e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009310:	4b0d      	ldr	r3, [pc, #52]	; (8009348 <FLASH_Program_HalfWord+0x44>)
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	4a0c      	ldr	r2, [pc, #48]	; (8009348 <FLASH_Program_HalfWord+0x44>)
 8009316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800931a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800931c:	4b0a      	ldr	r3, [pc, #40]	; (8009348 <FLASH_Program_HalfWord+0x44>)
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	4a09      	ldr	r2, [pc, #36]	; (8009348 <FLASH_Program_HalfWord+0x44>)
 8009322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009326:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009328:	4b07      	ldr	r3, [pc, #28]	; (8009348 <FLASH_Program_HalfWord+0x44>)
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	4a06      	ldr	r2, [pc, #24]	; (8009348 <FLASH_Program_HalfWord+0x44>)
 800932e:	f043 0301 	orr.w	r3, r3, #1
 8009332:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	887a      	ldrh	r2, [r7, #2]
 8009338:	801a      	strh	r2, [r3, #0]
}
 800933a:	bf00      	nop
 800933c:	370c      	adds	r7, #12
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	40023c00 	.word	0x40023c00

0800934c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	460b      	mov	r3, r1
 8009356:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009358:	4b0c      	ldr	r3, [pc, #48]	; (800938c <FLASH_Program_Byte+0x40>)
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	4a0b      	ldr	r2, [pc, #44]	; (800938c <FLASH_Program_Byte+0x40>)
 800935e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009362:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8009364:	4b09      	ldr	r3, [pc, #36]	; (800938c <FLASH_Program_Byte+0x40>)
 8009366:	4a09      	ldr	r2, [pc, #36]	; (800938c <FLASH_Program_Byte+0x40>)
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800936c:	4b07      	ldr	r3, [pc, #28]	; (800938c <FLASH_Program_Byte+0x40>)
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	4a06      	ldr	r2, [pc, #24]	; (800938c <FLASH_Program_Byte+0x40>)
 8009372:	f043 0301 	orr.w	r3, r3, #1
 8009376:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	78fa      	ldrb	r2, [r7, #3]
 800937c:	701a      	strb	r2, [r3, #0]
}
 800937e:	bf00      	nop
 8009380:	370c      	adds	r7, #12
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	40023c00 	.word	0x40023c00

08009390 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8009390:	b480      	push	{r7}
 8009392:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8009394:	4b27      	ldr	r3, [pc, #156]	; (8009434 <FLASH_SetErrorCode+0xa4>)
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	f003 0310 	and.w	r3, r3, #16
 800939c:	2b00      	cmp	r3, #0
 800939e:	d008      	beq.n	80093b2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80093a0:	4b25      	ldr	r3, [pc, #148]	; (8009438 <FLASH_SetErrorCode+0xa8>)
 80093a2:	69db      	ldr	r3, [r3, #28]
 80093a4:	f043 0310 	orr.w	r3, r3, #16
 80093a8:	4a23      	ldr	r2, [pc, #140]	; (8009438 <FLASH_SetErrorCode+0xa8>)
 80093aa:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80093ac:	4b21      	ldr	r3, [pc, #132]	; (8009434 <FLASH_SetErrorCode+0xa4>)
 80093ae:	2210      	movs	r2, #16
 80093b0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80093b2:	4b20      	ldr	r3, [pc, #128]	; (8009434 <FLASH_SetErrorCode+0xa4>)
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	f003 0320 	and.w	r3, r3, #32
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d008      	beq.n	80093d0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80093be:	4b1e      	ldr	r3, [pc, #120]	; (8009438 <FLASH_SetErrorCode+0xa8>)
 80093c0:	69db      	ldr	r3, [r3, #28]
 80093c2:	f043 0308 	orr.w	r3, r3, #8
 80093c6:	4a1c      	ldr	r2, [pc, #112]	; (8009438 <FLASH_SetErrorCode+0xa8>)
 80093c8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80093ca:	4b1a      	ldr	r3, [pc, #104]	; (8009434 <FLASH_SetErrorCode+0xa4>)
 80093cc:	2220      	movs	r2, #32
 80093ce:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80093d0:	4b18      	ldr	r3, [pc, #96]	; (8009434 <FLASH_SetErrorCode+0xa4>)
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d008      	beq.n	80093ee <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80093dc:	4b16      	ldr	r3, [pc, #88]	; (8009438 <FLASH_SetErrorCode+0xa8>)
 80093de:	69db      	ldr	r3, [r3, #28]
 80093e0:	f043 0304 	orr.w	r3, r3, #4
 80093e4:	4a14      	ldr	r2, [pc, #80]	; (8009438 <FLASH_SetErrorCode+0xa8>)
 80093e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80093e8:	4b12      	ldr	r3, [pc, #72]	; (8009434 <FLASH_SetErrorCode+0xa4>)
 80093ea:	2240      	movs	r2, #64	; 0x40
 80093ec:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80093ee:	4b11      	ldr	r3, [pc, #68]	; (8009434 <FLASH_SetErrorCode+0xa4>)
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d008      	beq.n	800940c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80093fa:	4b0f      	ldr	r3, [pc, #60]	; (8009438 <FLASH_SetErrorCode+0xa8>)
 80093fc:	69db      	ldr	r3, [r3, #28]
 80093fe:	f043 0302 	orr.w	r3, r3, #2
 8009402:	4a0d      	ldr	r2, [pc, #52]	; (8009438 <FLASH_SetErrorCode+0xa8>)
 8009404:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8009406:	4b0b      	ldr	r3, [pc, #44]	; (8009434 <FLASH_SetErrorCode+0xa4>)
 8009408:	2280      	movs	r2, #128	; 0x80
 800940a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800940c:	4b09      	ldr	r3, [pc, #36]	; (8009434 <FLASH_SetErrorCode+0xa4>)
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	f003 0302 	and.w	r3, r3, #2
 8009414:	2b00      	cmp	r3, #0
 8009416:	d008      	beq.n	800942a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8009418:	4b07      	ldr	r3, [pc, #28]	; (8009438 <FLASH_SetErrorCode+0xa8>)
 800941a:	69db      	ldr	r3, [r3, #28]
 800941c:	f043 0320 	orr.w	r3, r3, #32
 8009420:	4a05      	ldr	r2, [pc, #20]	; (8009438 <FLASH_SetErrorCode+0xa8>)
 8009422:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8009424:	4b03      	ldr	r3, [pc, #12]	; (8009434 <FLASH_SetErrorCode+0xa4>)
 8009426:	2202      	movs	r2, #2
 8009428:	60da      	str	r2, [r3, #12]
  }
}
 800942a:	bf00      	nop
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr
 8009434:	40023c00 	.word	0x40023c00
 8009438:	20000cac 	.word	0x20000cac

0800943c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	460b      	mov	r3, r1
 8009446:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8009448:	2300      	movs	r3, #0
 800944a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800944c:	78fb      	ldrb	r3, [r7, #3]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d102      	bne.n	8009458 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8009452:	2300      	movs	r3, #0
 8009454:	60fb      	str	r3, [r7, #12]
 8009456:	e010      	b.n	800947a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8009458:	78fb      	ldrb	r3, [r7, #3]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d103      	bne.n	8009466 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800945e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	e009      	b.n	800947a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8009466:	78fb      	ldrb	r3, [r7, #3]
 8009468:	2b02      	cmp	r3, #2
 800946a:	d103      	bne.n	8009474 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800946c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009470:	60fb      	str	r3, [r7, #12]
 8009472:	e002      	b.n	800947a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8009474:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009478:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800947a:	4b13      	ldr	r3, [pc, #76]	; (80094c8 <FLASH_Erase_Sector+0x8c>)
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	4a12      	ldr	r2, [pc, #72]	; (80094c8 <FLASH_Erase_Sector+0x8c>)
 8009480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009484:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8009486:	4b10      	ldr	r3, [pc, #64]	; (80094c8 <FLASH_Erase_Sector+0x8c>)
 8009488:	691a      	ldr	r2, [r3, #16]
 800948a:	490f      	ldr	r1, [pc, #60]	; (80094c8 <FLASH_Erase_Sector+0x8c>)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4313      	orrs	r3, r2
 8009490:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8009492:	4b0d      	ldr	r3, [pc, #52]	; (80094c8 <FLASH_Erase_Sector+0x8c>)
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	4a0c      	ldr	r2, [pc, #48]	; (80094c8 <FLASH_Erase_Sector+0x8c>)
 8009498:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800949c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800949e:	4b0a      	ldr	r3, [pc, #40]	; (80094c8 <FLASH_Erase_Sector+0x8c>)
 80094a0:	691a      	ldr	r2, [r3, #16]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	00db      	lsls	r3, r3, #3
 80094a6:	4313      	orrs	r3, r2
 80094a8:	4a07      	ldr	r2, [pc, #28]	; (80094c8 <FLASH_Erase_Sector+0x8c>)
 80094aa:	f043 0302 	orr.w	r3, r3, #2
 80094ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80094b0:	4b05      	ldr	r3, [pc, #20]	; (80094c8 <FLASH_Erase_Sector+0x8c>)
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	4a04      	ldr	r2, [pc, #16]	; (80094c8 <FLASH_Erase_Sector+0x8c>)
 80094b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094ba:	6113      	str	r3, [r2, #16]
}
 80094bc:	bf00      	nop
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr
 80094c8:	40023c00 	.word	0x40023c00

080094cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b089      	sub	sp, #36	; 0x24
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80094d6:	2300      	movs	r3, #0
 80094d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80094da:	2300      	movs	r3, #0
 80094dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80094de:	2300      	movs	r3, #0
 80094e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80094e2:	2300      	movs	r3, #0
 80094e4:	61fb      	str	r3, [r7, #28]
 80094e6:	e16b      	b.n	80097c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80094e8:	2201      	movs	r2, #1
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	fa02 f303 	lsl.w	r3, r2, r3
 80094f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	697a      	ldr	r2, [r7, #20]
 80094f8:	4013      	ands	r3, r2
 80094fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	429a      	cmp	r2, r3
 8009502:	f040 815a 	bne.w	80097ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d00b      	beq.n	8009526 <HAL_GPIO_Init+0x5a>
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	2b02      	cmp	r3, #2
 8009514:	d007      	beq.n	8009526 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800951a:	2b11      	cmp	r3, #17
 800951c:	d003      	beq.n	8009526 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	2b12      	cmp	r3, #18
 8009524:	d130      	bne.n	8009588 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	005b      	lsls	r3, r3, #1
 8009530:	2203      	movs	r2, #3
 8009532:	fa02 f303 	lsl.w	r3, r2, r3
 8009536:	43db      	mvns	r3, r3
 8009538:	69ba      	ldr	r2, [r7, #24]
 800953a:	4013      	ands	r3, r2
 800953c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	68da      	ldr	r2, [r3, #12]
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	005b      	lsls	r3, r3, #1
 8009546:	fa02 f303 	lsl.w	r3, r2, r3
 800954a:	69ba      	ldr	r2, [r7, #24]
 800954c:	4313      	orrs	r3, r2
 800954e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	69ba      	ldr	r2, [r7, #24]
 8009554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800955c:	2201      	movs	r2, #1
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	fa02 f303 	lsl.w	r3, r2, r3
 8009564:	43db      	mvns	r3, r3
 8009566:	69ba      	ldr	r2, [r7, #24]
 8009568:	4013      	ands	r3, r2
 800956a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	091b      	lsrs	r3, r3, #4
 8009572:	f003 0201 	and.w	r2, r3, #1
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	fa02 f303 	lsl.w	r3, r2, r3
 800957c:	69ba      	ldr	r2, [r7, #24]
 800957e:	4313      	orrs	r3, r2
 8009580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	69ba      	ldr	r2, [r7, #24]
 8009586:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	005b      	lsls	r3, r3, #1
 8009592:	2203      	movs	r2, #3
 8009594:	fa02 f303 	lsl.w	r3, r2, r3
 8009598:	43db      	mvns	r3, r3
 800959a:	69ba      	ldr	r2, [r7, #24]
 800959c:	4013      	ands	r3, r2
 800959e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	689a      	ldr	r2, [r3, #8]
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	005b      	lsls	r3, r3, #1
 80095a8:	fa02 f303 	lsl.w	r3, r2, r3
 80095ac:	69ba      	ldr	r2, [r7, #24]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	69ba      	ldr	r2, [r7, #24]
 80095b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	2b02      	cmp	r3, #2
 80095be:	d003      	beq.n	80095c8 <HAL_GPIO_Init+0xfc>
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	2b12      	cmp	r3, #18
 80095c6:	d123      	bne.n	8009610 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	08da      	lsrs	r2, r3, #3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	3208      	adds	r2, #8
 80095d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	f003 0307 	and.w	r3, r3, #7
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	220f      	movs	r2, #15
 80095e0:	fa02 f303 	lsl.w	r3, r2, r3
 80095e4:	43db      	mvns	r3, r3
 80095e6:	69ba      	ldr	r2, [r7, #24]
 80095e8:	4013      	ands	r3, r2
 80095ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	691a      	ldr	r2, [r3, #16]
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	f003 0307 	and.w	r3, r3, #7
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	fa02 f303 	lsl.w	r3, r2, r3
 80095fc:	69ba      	ldr	r2, [r7, #24]
 80095fe:	4313      	orrs	r3, r2
 8009600:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	08da      	lsrs	r2, r3, #3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	3208      	adds	r2, #8
 800960a:	69b9      	ldr	r1, [r7, #24]
 800960c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	005b      	lsls	r3, r3, #1
 800961a:	2203      	movs	r2, #3
 800961c:	fa02 f303 	lsl.w	r3, r2, r3
 8009620:	43db      	mvns	r3, r3
 8009622:	69ba      	ldr	r2, [r7, #24]
 8009624:	4013      	ands	r3, r2
 8009626:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	f003 0203 	and.w	r2, r3, #3
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	005b      	lsls	r3, r3, #1
 8009634:	fa02 f303 	lsl.w	r3, r2, r3
 8009638:	69ba      	ldr	r2, [r7, #24]
 800963a:	4313      	orrs	r3, r2
 800963c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	69ba      	ldr	r2, [r7, #24]
 8009642:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800964c:	2b00      	cmp	r3, #0
 800964e:	f000 80b4 	beq.w	80097ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009652:	2300      	movs	r3, #0
 8009654:	60fb      	str	r3, [r7, #12]
 8009656:	4b5f      	ldr	r3, [pc, #380]	; (80097d4 <HAL_GPIO_Init+0x308>)
 8009658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800965a:	4a5e      	ldr	r2, [pc, #376]	; (80097d4 <HAL_GPIO_Init+0x308>)
 800965c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009660:	6453      	str	r3, [r2, #68]	; 0x44
 8009662:	4b5c      	ldr	r3, [pc, #368]	; (80097d4 <HAL_GPIO_Init+0x308>)
 8009664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800966a:	60fb      	str	r3, [r7, #12]
 800966c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800966e:	4a5a      	ldr	r2, [pc, #360]	; (80097d8 <HAL_GPIO_Init+0x30c>)
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	089b      	lsrs	r3, r3, #2
 8009674:	3302      	adds	r3, #2
 8009676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800967a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	f003 0303 	and.w	r3, r3, #3
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	220f      	movs	r2, #15
 8009686:	fa02 f303 	lsl.w	r3, r2, r3
 800968a:	43db      	mvns	r3, r3
 800968c:	69ba      	ldr	r2, [r7, #24]
 800968e:	4013      	ands	r3, r2
 8009690:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a51      	ldr	r2, [pc, #324]	; (80097dc <HAL_GPIO_Init+0x310>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d02b      	beq.n	80096f2 <HAL_GPIO_Init+0x226>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a50      	ldr	r2, [pc, #320]	; (80097e0 <HAL_GPIO_Init+0x314>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d025      	beq.n	80096ee <HAL_GPIO_Init+0x222>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a4f      	ldr	r2, [pc, #316]	; (80097e4 <HAL_GPIO_Init+0x318>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d01f      	beq.n	80096ea <HAL_GPIO_Init+0x21e>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a4e      	ldr	r2, [pc, #312]	; (80097e8 <HAL_GPIO_Init+0x31c>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d019      	beq.n	80096e6 <HAL_GPIO_Init+0x21a>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a4d      	ldr	r2, [pc, #308]	; (80097ec <HAL_GPIO_Init+0x320>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d013      	beq.n	80096e2 <HAL_GPIO_Init+0x216>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a4c      	ldr	r2, [pc, #304]	; (80097f0 <HAL_GPIO_Init+0x324>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d00d      	beq.n	80096de <HAL_GPIO_Init+0x212>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a4b      	ldr	r2, [pc, #300]	; (80097f4 <HAL_GPIO_Init+0x328>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d007      	beq.n	80096da <HAL_GPIO_Init+0x20e>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a4a      	ldr	r2, [pc, #296]	; (80097f8 <HAL_GPIO_Init+0x32c>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d101      	bne.n	80096d6 <HAL_GPIO_Init+0x20a>
 80096d2:	2307      	movs	r3, #7
 80096d4:	e00e      	b.n	80096f4 <HAL_GPIO_Init+0x228>
 80096d6:	2308      	movs	r3, #8
 80096d8:	e00c      	b.n	80096f4 <HAL_GPIO_Init+0x228>
 80096da:	2306      	movs	r3, #6
 80096dc:	e00a      	b.n	80096f4 <HAL_GPIO_Init+0x228>
 80096de:	2305      	movs	r3, #5
 80096e0:	e008      	b.n	80096f4 <HAL_GPIO_Init+0x228>
 80096e2:	2304      	movs	r3, #4
 80096e4:	e006      	b.n	80096f4 <HAL_GPIO_Init+0x228>
 80096e6:	2303      	movs	r3, #3
 80096e8:	e004      	b.n	80096f4 <HAL_GPIO_Init+0x228>
 80096ea:	2302      	movs	r3, #2
 80096ec:	e002      	b.n	80096f4 <HAL_GPIO_Init+0x228>
 80096ee:	2301      	movs	r3, #1
 80096f0:	e000      	b.n	80096f4 <HAL_GPIO_Init+0x228>
 80096f2:	2300      	movs	r3, #0
 80096f4:	69fa      	ldr	r2, [r7, #28]
 80096f6:	f002 0203 	and.w	r2, r2, #3
 80096fa:	0092      	lsls	r2, r2, #2
 80096fc:	4093      	lsls	r3, r2
 80096fe:	69ba      	ldr	r2, [r7, #24]
 8009700:	4313      	orrs	r3, r2
 8009702:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009704:	4934      	ldr	r1, [pc, #208]	; (80097d8 <HAL_GPIO_Init+0x30c>)
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	089b      	lsrs	r3, r3, #2
 800970a:	3302      	adds	r3, #2
 800970c:	69ba      	ldr	r2, [r7, #24]
 800970e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009712:	4b3a      	ldr	r3, [pc, #232]	; (80097fc <HAL_GPIO_Init+0x330>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	43db      	mvns	r3, r3
 800971c:	69ba      	ldr	r2, [r7, #24]
 800971e:	4013      	ands	r3, r2
 8009720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800972a:	2b00      	cmp	r3, #0
 800972c:	d003      	beq.n	8009736 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800972e:	69ba      	ldr	r2, [r7, #24]
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	4313      	orrs	r3, r2
 8009734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009736:	4a31      	ldr	r2, [pc, #196]	; (80097fc <HAL_GPIO_Init+0x330>)
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800973c:	4b2f      	ldr	r3, [pc, #188]	; (80097fc <HAL_GPIO_Init+0x330>)
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	43db      	mvns	r3, r3
 8009746:	69ba      	ldr	r2, [r7, #24]
 8009748:	4013      	ands	r3, r2
 800974a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009754:	2b00      	cmp	r3, #0
 8009756:	d003      	beq.n	8009760 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009758:	69ba      	ldr	r2, [r7, #24]
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	4313      	orrs	r3, r2
 800975e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009760:	4a26      	ldr	r2, [pc, #152]	; (80097fc <HAL_GPIO_Init+0x330>)
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009766:	4b25      	ldr	r3, [pc, #148]	; (80097fc <HAL_GPIO_Init+0x330>)
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	43db      	mvns	r3, r3
 8009770:	69ba      	ldr	r2, [r7, #24]
 8009772:	4013      	ands	r3, r2
 8009774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800977e:	2b00      	cmp	r3, #0
 8009780:	d003      	beq.n	800978a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009782:	69ba      	ldr	r2, [r7, #24]
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	4313      	orrs	r3, r2
 8009788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800978a:	4a1c      	ldr	r2, [pc, #112]	; (80097fc <HAL_GPIO_Init+0x330>)
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009790:	4b1a      	ldr	r3, [pc, #104]	; (80097fc <HAL_GPIO_Init+0x330>)
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	43db      	mvns	r3, r3
 800979a:	69ba      	ldr	r2, [r7, #24]
 800979c:	4013      	ands	r3, r2
 800979e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d003      	beq.n	80097b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80097ac:	69ba      	ldr	r2, [r7, #24]
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80097b4:	4a11      	ldr	r2, [pc, #68]	; (80097fc <HAL_GPIO_Init+0x330>)
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	3301      	adds	r3, #1
 80097be:	61fb      	str	r3, [r7, #28]
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	2b0f      	cmp	r3, #15
 80097c4:	f67f ae90 	bls.w	80094e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80097c8:	bf00      	nop
 80097ca:	3724      	adds	r7, #36	; 0x24
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr
 80097d4:	40023800 	.word	0x40023800
 80097d8:	40013800 	.word	0x40013800
 80097dc:	40020000 	.word	0x40020000
 80097e0:	40020400 	.word	0x40020400
 80097e4:	40020800 	.word	0x40020800
 80097e8:	40020c00 	.word	0x40020c00
 80097ec:	40021000 	.word	0x40021000
 80097f0:	40021400 	.word	0x40021400
 80097f4:	40021800 	.word	0x40021800
 80097f8:	40021c00 	.word	0x40021c00
 80097fc:	40013c00 	.word	0x40013c00

08009800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	460b      	mov	r3, r1
 800980a:	807b      	strh	r3, [r7, #2]
 800980c:	4613      	mov	r3, r2
 800980e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009810:	787b      	ldrb	r3, [r7, #1]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d003      	beq.n	800981e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009816:	887a      	ldrh	r2, [r7, #2]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800981c:	e003      	b.n	8009826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800981e:	887b      	ldrh	r3, [r7, #2]
 8009820:	041a      	lsls	r2, r3, #16
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	619a      	str	r2, [r3, #24]
}
 8009826:	bf00      	nop
 8009828:	370c      	adds	r7, #12
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009832:	b480      	push	{r7}
 8009834:	b083      	sub	sp, #12
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	460b      	mov	r3, r1
 800983c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	695a      	ldr	r2, [r3, #20]
 8009842:	887b      	ldrh	r3, [r7, #2]
 8009844:	401a      	ands	r2, r3
 8009846:	887b      	ldrh	r3, [r7, #2]
 8009848:	429a      	cmp	r2, r3
 800984a:	d104      	bne.n	8009856 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800984c:	887b      	ldrh	r3, [r7, #2]
 800984e:	041a      	lsls	r2, r3, #16
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8009854:	e002      	b.n	800985c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8009856:	887a      	ldrh	r2, [r7, #2]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	619a      	str	r2, [r3, #24]
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d101      	bne.n	800987a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e11f      	b.n	8009aba <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	d106      	bne.n	8009894 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f7fe fa44 	bl	8007d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2224      	movs	r2, #36	; 0x24
 8009898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f022 0201 	bic.w	r2, r2, #1
 80098aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80098ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80098cc:	f002 f95c 	bl	800bb88 <HAL_RCC_GetPCLK1Freq>
 80098d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	4a7b      	ldr	r2, [pc, #492]	; (8009ac4 <HAL_I2C_Init+0x25c>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d807      	bhi.n	80098ec <HAL_I2C_Init+0x84>
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	4a7a      	ldr	r2, [pc, #488]	; (8009ac8 <HAL_I2C_Init+0x260>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	bf94      	ite	ls
 80098e4:	2301      	movls	r3, #1
 80098e6:	2300      	movhi	r3, #0
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	e006      	b.n	80098fa <HAL_I2C_Init+0x92>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	4a77      	ldr	r2, [pc, #476]	; (8009acc <HAL_I2C_Init+0x264>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	bf94      	ite	ls
 80098f4:	2301      	movls	r3, #1
 80098f6:	2300      	movhi	r3, #0
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d001      	beq.n	8009902 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	e0db      	b.n	8009aba <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	4a72      	ldr	r2, [pc, #456]	; (8009ad0 <HAL_I2C_Init+0x268>)
 8009906:	fba2 2303 	umull	r2, r3, r2, r3
 800990a:	0c9b      	lsrs	r3, r3, #18
 800990c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68ba      	ldr	r2, [r7, #8]
 800991e:	430a      	orrs	r2, r1
 8009920:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6a1b      	ldr	r3, [r3, #32]
 8009928:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	4a64      	ldr	r2, [pc, #400]	; (8009ac4 <HAL_I2C_Init+0x25c>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d802      	bhi.n	800993c <HAL_I2C_Init+0xd4>
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	3301      	adds	r3, #1
 800993a:	e009      	b.n	8009950 <HAL_I2C_Init+0xe8>
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009942:	fb02 f303 	mul.w	r3, r2, r3
 8009946:	4a63      	ldr	r2, [pc, #396]	; (8009ad4 <HAL_I2C_Init+0x26c>)
 8009948:	fba2 2303 	umull	r2, r3, r2, r3
 800994c:	099b      	lsrs	r3, r3, #6
 800994e:	3301      	adds	r3, #1
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	6812      	ldr	r2, [r2, #0]
 8009954:	430b      	orrs	r3, r1
 8009956:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	69db      	ldr	r3, [r3, #28]
 800995e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009962:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	4956      	ldr	r1, [pc, #344]	; (8009ac4 <HAL_I2C_Init+0x25c>)
 800996c:	428b      	cmp	r3, r1
 800996e:	d80d      	bhi.n	800998c <HAL_I2C_Init+0x124>
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	1e59      	subs	r1, r3, #1
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	005b      	lsls	r3, r3, #1
 800997a:	fbb1 f3f3 	udiv	r3, r1, r3
 800997e:	3301      	adds	r3, #1
 8009980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009984:	2b04      	cmp	r3, #4
 8009986:	bf38      	it	cc
 8009988:	2304      	movcc	r3, #4
 800998a:	e04f      	b.n	8009a2c <HAL_I2C_Init+0x1c4>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d111      	bne.n	80099b8 <HAL_I2C_Init+0x150>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	1e58      	subs	r0, r3, #1
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6859      	ldr	r1, [r3, #4]
 800999c:	460b      	mov	r3, r1
 800999e:	005b      	lsls	r3, r3, #1
 80099a0:	440b      	add	r3, r1
 80099a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80099a6:	3301      	adds	r3, #1
 80099a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	bf0c      	ite	eq
 80099b0:	2301      	moveq	r3, #1
 80099b2:	2300      	movne	r3, #0
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	e012      	b.n	80099de <HAL_I2C_Init+0x176>
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	1e58      	subs	r0, r3, #1
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6859      	ldr	r1, [r3, #4]
 80099c0:	460b      	mov	r3, r1
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	440b      	add	r3, r1
 80099c6:	0099      	lsls	r1, r3, #2
 80099c8:	440b      	add	r3, r1
 80099ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80099ce:	3301      	adds	r3, #1
 80099d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	bf0c      	ite	eq
 80099d8:	2301      	moveq	r3, #1
 80099da:	2300      	movne	r3, #0
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d001      	beq.n	80099e6 <HAL_I2C_Init+0x17e>
 80099e2:	2301      	movs	r3, #1
 80099e4:	e022      	b.n	8009a2c <HAL_I2C_Init+0x1c4>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d10e      	bne.n	8009a0c <HAL_I2C_Init+0x1a4>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	1e58      	subs	r0, r3, #1
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6859      	ldr	r1, [r3, #4]
 80099f6:	460b      	mov	r3, r1
 80099f8:	005b      	lsls	r3, r3, #1
 80099fa:	440b      	add	r3, r1
 80099fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a00:	3301      	adds	r3, #1
 8009a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a0a:	e00f      	b.n	8009a2c <HAL_I2C_Init+0x1c4>
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	1e58      	subs	r0, r3, #1
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6859      	ldr	r1, [r3, #4]
 8009a14:	460b      	mov	r3, r1
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	440b      	add	r3, r1
 8009a1a:	0099      	lsls	r1, r3, #2
 8009a1c:	440b      	add	r3, r1
 8009a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a22:	3301      	adds	r3, #1
 8009a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a2c:	6879      	ldr	r1, [r7, #4]
 8009a2e:	6809      	ldr	r1, [r1, #0]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	69da      	ldr	r2, [r3, #28]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a1b      	ldr	r3, [r3, #32]
 8009a46:	431a      	orrs	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	430a      	orrs	r2, r1
 8009a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009a5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	6911      	ldr	r1, [r2, #16]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	68d2      	ldr	r2, [r2, #12]
 8009a66:	4311      	orrs	r1, r2
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	6812      	ldr	r2, [r2, #0]
 8009a6c:	430b      	orrs	r3, r1
 8009a6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	695a      	ldr	r2, [r3, #20]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	431a      	orrs	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	430a      	orrs	r2, r1
 8009a8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f042 0201 	orr.w	r2, r2, #1
 8009a9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2220      	movs	r2, #32
 8009aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	000186a0 	.word	0x000186a0
 8009ac8:	001e847f 	.word	0x001e847f
 8009acc:	003d08ff 	.word	0x003d08ff
 8009ad0:	431bde83 	.word	0x431bde83
 8009ad4:	10624dd3 	.word	0x10624dd3

08009ad8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b088      	sub	sp, #32
 8009adc:	af02      	add	r7, sp, #8
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	607a      	str	r2, [r7, #4]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	817b      	strh	r3, [r7, #10]
 8009ae8:	4613      	mov	r3, r2
 8009aea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009aec:	f7fe fc46 	bl	800837c <HAL_GetTick>
 8009af0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	2b20      	cmp	r3, #32
 8009afc:	f040 80e0 	bne.w	8009cc0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	9300      	str	r3, [sp, #0]
 8009b04:	2319      	movs	r3, #25
 8009b06:	2201      	movs	r2, #1
 8009b08:	4970      	ldr	r1, [pc, #448]	; (8009ccc <HAL_I2C_Master_Transmit+0x1f4>)
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f001 fa24 	bl	800af58 <I2C_WaitOnFlagUntilTimeout>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d001      	beq.n	8009b1a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009b16:	2302      	movs	r3, #2
 8009b18:	e0d3      	b.n	8009cc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d101      	bne.n	8009b28 <HAL_I2C_Master_Transmit+0x50>
 8009b24:	2302      	movs	r3, #2
 8009b26:	e0cc      	b.n	8009cc2 <HAL_I2C_Master_Transmit+0x1ea>
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f003 0301 	and.w	r3, r3, #1
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d007      	beq.n	8009b4e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f042 0201 	orr.w	r2, r2, #1
 8009b4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2221      	movs	r2, #33	; 0x21
 8009b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2210      	movs	r2, #16
 8009b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	893a      	ldrh	r2, [r7, #8]
 8009b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	4a50      	ldr	r2, [pc, #320]	; (8009cd0 <HAL_I2C_Master_Transmit+0x1f8>)
 8009b8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009b90:	8979      	ldrh	r1, [r7, #10]
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	6a3a      	ldr	r2, [r7, #32]
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f000 ff10 	bl	800a9bc <I2C_MasterRequestWrite>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d001      	beq.n	8009ba6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e08d      	b.n	8009cc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	613b      	str	r3, [r7, #16]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	695b      	ldr	r3, [r3, #20]
 8009bb0:	613b      	str	r3, [r7, #16]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	699b      	ldr	r3, [r3, #24]
 8009bb8:	613b      	str	r3, [r7, #16]
 8009bba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009bbc:	e066      	b.n	8009c8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009bbe:	697a      	ldr	r2, [r7, #20]
 8009bc0:	6a39      	ldr	r1, [r7, #32]
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f001 fa9e 	bl	800b104 <I2C_WaitOnTXEFlagUntilTimeout>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00d      	beq.n	8009bea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd2:	2b04      	cmp	r3, #4
 8009bd4:	d107      	bne.n	8009be6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009be4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e06b      	b.n	8009cc2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bee:	781a      	ldrb	r2, [r3, #0]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfa:	1c5a      	adds	r2, r3, #1
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	3b01      	subs	r3, #1
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c12:	3b01      	subs	r3, #1
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	695b      	ldr	r3, [r3, #20]
 8009c20:	f003 0304 	and.w	r3, r3, #4
 8009c24:	2b04      	cmp	r3, #4
 8009c26:	d11b      	bne.n	8009c60 <HAL_I2C_Master_Transmit+0x188>
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d017      	beq.n	8009c60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c34:	781a      	ldrb	r2, [r3, #0]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c40:	1c5a      	adds	r2, r3, #1
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	b29a      	uxth	r2, r3
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	b29a      	uxth	r2, r3
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c60:	697a      	ldr	r2, [r7, #20]
 8009c62:	6a39      	ldr	r1, [r7, #32]
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f001 fa8e 	bl	800b186 <I2C_WaitOnBTFFlagUntilTimeout>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00d      	beq.n	8009c8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c74:	2b04      	cmp	r3, #4
 8009c76:	d107      	bne.n	8009c88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e01a      	b.n	8009cc2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d194      	bne.n	8009bbe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ca2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2220      	movs	r2, #32
 8009ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	e000      	b.n	8009cc2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009cc0:	2302      	movs	r3, #2
  }
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3718      	adds	r7, #24
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	00100002 	.word	0x00100002
 8009cd0:	ffff0000 	.word	0xffff0000

08009cd4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b08c      	sub	sp, #48	; 0x30
 8009cd8:	af02      	add	r7, sp, #8
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	607a      	str	r2, [r7, #4]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	817b      	strh	r3, [r7, #10]
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ce8:	f7fe fb48 	bl	800837c <HAL_GetTick>
 8009cec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	2b20      	cmp	r3, #32
 8009cf8:	f040 820b 	bne.w	800a112 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfe:	9300      	str	r3, [sp, #0]
 8009d00:	2319      	movs	r3, #25
 8009d02:	2201      	movs	r2, #1
 8009d04:	497c      	ldr	r1, [pc, #496]	; (8009ef8 <HAL_I2C_Master_Receive+0x224>)
 8009d06:	68f8      	ldr	r0, [r7, #12]
 8009d08:	f001 f926 	bl	800af58 <I2C_WaitOnFlagUntilTimeout>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8009d12:	2302      	movs	r3, #2
 8009d14:	e1fe      	b.n	800a114 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d101      	bne.n	8009d24 <HAL_I2C_Master_Receive+0x50>
 8009d20:	2302      	movs	r3, #2
 8009d22:	e1f7      	b.n	800a114 <HAL_I2C_Master_Receive+0x440>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f003 0301 	and.w	r3, r3, #1
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d007      	beq.n	8009d4a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f042 0201 	orr.w	r2, r2, #1
 8009d48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2222      	movs	r2, #34	; 0x22
 8009d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2210      	movs	r2, #16
 8009d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	893a      	ldrh	r2, [r7, #8]
 8009d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	4a5c      	ldr	r2, [pc, #368]	; (8009efc <HAL_I2C_Master_Receive+0x228>)
 8009d8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009d8c:	8979      	ldrh	r1, [r7, #10]
 8009d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f000 fe94 	bl	800aac0 <I2C_MasterRequestRead>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d001      	beq.n	8009da2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e1b8      	b.n	800a114 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d113      	bne.n	8009dd2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009daa:	2300      	movs	r3, #0
 8009dac:	623b      	str	r3, [r7, #32]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	695b      	ldr	r3, [r3, #20]
 8009db4:	623b      	str	r3, [r7, #32]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	699b      	ldr	r3, [r3, #24]
 8009dbc:	623b      	str	r3, [r7, #32]
 8009dbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dce:	601a      	str	r2, [r3, #0]
 8009dd0:	e18c      	b.n	800a0ec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d11b      	bne.n	8009e12 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009de8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009dea:	2300      	movs	r3, #0
 8009dec:	61fb      	str	r3, [r7, #28]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	61fb      	str	r3, [r7, #28]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	699b      	ldr	r3, [r3, #24]
 8009dfc:	61fb      	str	r3, [r7, #28]
 8009dfe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e0e:	601a      	str	r2, [r3, #0]
 8009e10:	e16c      	b.n	800a0ec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d11b      	bne.n	8009e52 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	61bb      	str	r3, [r7, #24]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	695b      	ldr	r3, [r3, #20]
 8009e44:	61bb      	str	r3, [r7, #24]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	699b      	ldr	r3, [r3, #24]
 8009e4c:	61bb      	str	r3, [r7, #24]
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	e14c      	b.n	800a0ec <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009e60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e62:	2300      	movs	r3, #0
 8009e64:	617b      	str	r3, [r7, #20]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	695b      	ldr	r3, [r3, #20]
 8009e6c:	617b      	str	r3, [r7, #20]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	699b      	ldr	r3, [r3, #24]
 8009e74:	617b      	str	r3, [r7, #20]
 8009e76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009e78:	e138      	b.n	800a0ec <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e7e:	2b03      	cmp	r3, #3
 8009e80:	f200 80f1 	bhi.w	800a066 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d123      	bne.n	8009ed4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f001 f9b9 	bl	800b208 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e139      	b.n	800a114 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	691a      	ldr	r2, [r3, #16]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eaa:	b2d2      	uxtb	r2, r2
 8009eac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb2:	1c5a      	adds	r2, r3, #1
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ed2:	e10b      	b.n	800a0ec <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d14e      	bne.n	8009f7a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	4906      	ldr	r1, [pc, #24]	; (8009f00 <HAL_I2C_Master_Receive+0x22c>)
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f001 f836 	bl	800af58 <I2C_WaitOnFlagUntilTimeout>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d008      	beq.n	8009f04 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e10e      	b.n	800a114 <HAL_I2C_Master_Receive+0x440>
 8009ef6:	bf00      	nop
 8009ef8:	00100002 	.word	0x00100002
 8009efc:	ffff0000 	.word	0xffff0000
 8009f00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	691a      	ldr	r2, [r3, #16]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1e:	b2d2      	uxtb	r2, r2
 8009f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f26:	1c5a      	adds	r2, r3, #1
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f30:	3b01      	subs	r3, #1
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	b29a      	uxth	r2, r3
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	691a      	ldr	r2, [r3, #16]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f50:	b2d2      	uxtb	r2, r2
 8009f52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f58:	1c5a      	adds	r2, r3, #1
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f62:	3b01      	subs	r3, #1
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	3b01      	subs	r3, #1
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f78:	e0b8      	b.n	800a0ec <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	9300      	str	r3, [sp, #0]
 8009f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f80:	2200      	movs	r2, #0
 8009f82:	4966      	ldr	r1, [pc, #408]	; (800a11c <HAL_I2C_Master_Receive+0x448>)
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f000 ffe7 	bl	800af58 <I2C_WaitOnFlagUntilTimeout>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d001      	beq.n	8009f94 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	e0bf      	b.n	800a114 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	691a      	ldr	r2, [r3, #16]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fae:	b2d2      	uxtb	r2, r2
 8009fb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb6:	1c5a      	adds	r2, r3, #1
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd8:	9300      	str	r3, [sp, #0]
 8009fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fdc:	2200      	movs	r2, #0
 8009fde:	494f      	ldr	r1, [pc, #316]	; (800a11c <HAL_I2C_Master_Receive+0x448>)
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f000 ffb9 	bl	800af58 <I2C_WaitOnFlagUntilTimeout>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d001      	beq.n	8009ff0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	e091      	b.n	800a114 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ffe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	691a      	ldr	r2, [r3, #16]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00a:	b2d2      	uxtb	r2, r2
 800a00c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a012:	1c5a      	adds	r2, r3, #1
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a01c:	3b01      	subs	r3, #1
 800a01e:	b29a      	uxth	r2, r3
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a028:	b29b      	uxth	r3, r3
 800a02a:	3b01      	subs	r3, #1
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	691a      	ldr	r2, [r3, #16]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03c:	b2d2      	uxtb	r2, r2
 800a03e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a044:	1c5a      	adds	r2, r3, #1
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a04e:	3b01      	subs	r3, #1
 800a050:	b29a      	uxth	r2, r3
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	3b01      	subs	r3, #1
 800a05e:	b29a      	uxth	r2, r3
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a064:	e042      	b.n	800a0ec <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a068:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f001 f8cc 	bl	800b208 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d001      	beq.n	800a07a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	e04c      	b.n	800a114 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	691a      	ldr	r2, [r3, #16]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a084:	b2d2      	uxtb	r2, r2
 800a086:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08c:	1c5a      	adds	r2, r3, #1
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a096:	3b01      	subs	r3, #1
 800a098:	b29a      	uxth	r2, r3
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	b29a      	uxth	r2, r3
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	695b      	ldr	r3, [r3, #20]
 800a0b2:	f003 0304 	and.w	r3, r3, #4
 800a0b6:	2b04      	cmp	r3, #4
 800a0b8:	d118      	bne.n	800a0ec <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	691a      	ldr	r2, [r3, #16]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c4:	b2d2      	uxtb	r2, r2
 800a0c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0cc:	1c5a      	adds	r2, r3, #1
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	b29a      	uxth	r2, r3
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	b29a      	uxth	r2, r3
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f47f aec2 	bne.w	8009e7a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2220      	movs	r2, #32
 800a0fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2200      	movs	r2, #0
 800a102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2200      	movs	r2, #0
 800a10a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a10e:	2300      	movs	r3, #0
 800a110:	e000      	b.n	800a114 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a112:	2302      	movs	r3, #2
  }
}
 800a114:	4618      	mov	r0, r3
 800a116:	3728      	adds	r7, #40	; 0x28
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	00010004 	.word	0x00010004

0800a120 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b088      	sub	sp, #32
 800a124:	af02      	add	r7, sp, #8
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	4608      	mov	r0, r1
 800a12a:	4611      	mov	r1, r2
 800a12c:	461a      	mov	r2, r3
 800a12e:	4603      	mov	r3, r0
 800a130:	817b      	strh	r3, [r7, #10]
 800a132:	460b      	mov	r3, r1
 800a134:	813b      	strh	r3, [r7, #8]
 800a136:	4613      	mov	r3, r2
 800a138:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a13a:	f7fe f91f 	bl	800837c <HAL_GetTick>
 800a13e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a146:	b2db      	uxtb	r3, r3
 800a148:	2b20      	cmp	r3, #32
 800a14a:	f040 80d9 	bne.w	800a300 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	2319      	movs	r3, #25
 800a154:	2201      	movs	r2, #1
 800a156:	496d      	ldr	r1, [pc, #436]	; (800a30c <HAL_I2C_Mem_Write+0x1ec>)
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f000 fefd 	bl	800af58 <I2C_WaitOnFlagUntilTimeout>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d001      	beq.n	800a168 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a164:	2302      	movs	r3, #2
 800a166:	e0cc      	b.n	800a302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d101      	bne.n	800a176 <HAL_I2C_Mem_Write+0x56>
 800a172:	2302      	movs	r3, #2
 800a174:	e0c5      	b.n	800a302 <HAL_I2C_Mem_Write+0x1e2>
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2201      	movs	r2, #1
 800a17a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f003 0301 	and.w	r3, r3, #1
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d007      	beq.n	800a19c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f042 0201 	orr.w	r2, r2, #1
 800a19a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a1aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2221      	movs	r2, #33	; 0x21
 800a1b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2240      	movs	r2, #64	; 0x40
 800a1b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6a3a      	ldr	r2, [r7, #32]
 800a1c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a1cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	4a4d      	ldr	r2, [pc, #308]	; (800a310 <HAL_I2C_Mem_Write+0x1f0>)
 800a1dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a1de:	88f8      	ldrh	r0, [r7, #6]
 800a1e0:	893a      	ldrh	r2, [r7, #8]
 800a1e2:	8979      	ldrh	r1, [r7, #10]
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	9301      	str	r3, [sp, #4]
 800a1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ea:	9300      	str	r3, [sp, #0]
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f000 fd34 	bl	800ac5c <I2C_RequestMemoryWrite>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d052      	beq.n	800a2a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e081      	b.n	800a302 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f000 ff7e 	bl	800b104 <I2C_WaitOnTXEFlagUntilTimeout>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00d      	beq.n	800a22a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a212:	2b04      	cmp	r3, #4
 800a214:	d107      	bne.n	800a226 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a224:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e06b      	b.n	800a302 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22e:	781a      	ldrb	r2, [r3, #0]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23a:	1c5a      	adds	r2, r3, #1
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a244:	3b01      	subs	r3, #1
 800a246:	b29a      	uxth	r2, r3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a250:	b29b      	uxth	r3, r3
 800a252:	3b01      	subs	r3, #1
 800a254:	b29a      	uxth	r2, r3
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	695b      	ldr	r3, [r3, #20]
 800a260:	f003 0304 	and.w	r3, r3, #4
 800a264:	2b04      	cmp	r3, #4
 800a266:	d11b      	bne.n	800a2a0 <HAL_I2C_Mem_Write+0x180>
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d017      	beq.n	800a2a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a274:	781a      	ldrb	r2, [r3, #0]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a280:	1c5a      	adds	r2, r3, #1
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a28a:	3b01      	subs	r3, #1
 800a28c:	b29a      	uxth	r2, r3
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a296:	b29b      	uxth	r3, r3
 800a298:	3b01      	subs	r3, #1
 800a29a:	b29a      	uxth	r2, r3
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d1aa      	bne.n	800a1fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2a8:	697a      	ldr	r2, [r7, #20]
 800a2aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f000 ff6a 	bl	800b186 <I2C_WaitOnBTFFlagUntilTimeout>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00d      	beq.n	800a2d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2bc:	2b04      	cmp	r3, #4
 800a2be:	d107      	bne.n	800a2d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e016      	b.n	800a302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2220      	movs	r2, #32
 800a2e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	e000      	b.n	800a302 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a300:	2302      	movs	r3, #2
  }
}
 800a302:	4618      	mov	r0, r3
 800a304:	3718      	adds	r7, #24
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	00100002 	.word	0x00100002
 800a310:	ffff0000 	.word	0xffff0000

0800a314 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b08c      	sub	sp, #48	; 0x30
 800a318:	af02      	add	r7, sp, #8
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	4608      	mov	r0, r1
 800a31e:	4611      	mov	r1, r2
 800a320:	461a      	mov	r2, r3
 800a322:	4603      	mov	r3, r0
 800a324:	817b      	strh	r3, [r7, #10]
 800a326:	460b      	mov	r3, r1
 800a328:	813b      	strh	r3, [r7, #8]
 800a32a:	4613      	mov	r3, r2
 800a32c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a32e:	f7fe f825 	bl	800837c <HAL_GetTick>
 800a332:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	2b20      	cmp	r3, #32
 800a33e:	f040 8208 	bne.w	800a752 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a344:	9300      	str	r3, [sp, #0]
 800a346:	2319      	movs	r3, #25
 800a348:	2201      	movs	r2, #1
 800a34a:	497b      	ldr	r1, [pc, #492]	; (800a538 <HAL_I2C_Mem_Read+0x224>)
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f000 fe03 	bl	800af58 <I2C_WaitOnFlagUntilTimeout>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d001      	beq.n	800a35c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a358:	2302      	movs	r3, #2
 800a35a:	e1fb      	b.n	800a754 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a362:	2b01      	cmp	r3, #1
 800a364:	d101      	bne.n	800a36a <HAL_I2C_Mem_Read+0x56>
 800a366:	2302      	movs	r3, #2
 800a368:	e1f4      	b.n	800a754 <HAL_I2C_Mem_Read+0x440>
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2201      	movs	r2, #1
 800a36e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f003 0301 	and.w	r3, r3, #1
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d007      	beq.n	800a390 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f042 0201 	orr.w	r2, r2, #1
 800a38e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a39e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2222      	movs	r2, #34	; 0x22
 800a3a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2240      	movs	r2, #64	; 0x40
 800a3ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a3c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	4a5b      	ldr	r2, [pc, #364]	; (800a53c <HAL_I2C_Mem_Read+0x228>)
 800a3d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a3d2:	88f8      	ldrh	r0, [r7, #6]
 800a3d4:	893a      	ldrh	r2, [r7, #8]
 800a3d6:	8979      	ldrh	r1, [r7, #10]
 800a3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3da:	9301      	str	r3, [sp, #4]
 800a3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3de:	9300      	str	r3, [sp, #0]
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f000 fcd0 	bl	800ad88 <I2C_RequestMemoryRead>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d001      	beq.n	800a3f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e1b0      	b.n	800a754 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d113      	bne.n	800a422 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	623b      	str	r3, [r7, #32]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	695b      	ldr	r3, [r3, #20]
 800a404:	623b      	str	r3, [r7, #32]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	699b      	ldr	r3, [r3, #24]
 800a40c:	623b      	str	r3, [r7, #32]
 800a40e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a41e:	601a      	str	r2, [r3, #0]
 800a420:	e184      	b.n	800a72c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a426:	2b01      	cmp	r3, #1
 800a428:	d11b      	bne.n	800a462 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a438:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a43a:	2300      	movs	r3, #0
 800a43c:	61fb      	str	r3, [r7, #28]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	695b      	ldr	r3, [r3, #20]
 800a444:	61fb      	str	r3, [r7, #28]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	699b      	ldr	r3, [r3, #24]
 800a44c:	61fb      	str	r3, [r7, #28]
 800a44e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a45e:	601a      	str	r2, [r3, #0]
 800a460:	e164      	b.n	800a72c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a466:	2b02      	cmp	r3, #2
 800a468:	d11b      	bne.n	800a4a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a478:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a488:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a48a:	2300      	movs	r3, #0
 800a48c:	61bb      	str	r3, [r7, #24]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	695b      	ldr	r3, [r3, #20]
 800a494:	61bb      	str	r3, [r7, #24]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	61bb      	str	r3, [r7, #24]
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	e144      	b.n	800a72c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	617b      	str	r3, [r7, #20]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	695b      	ldr	r3, [r3, #20]
 800a4ac:	617b      	str	r3, [r7, #20]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	699b      	ldr	r3, [r3, #24]
 800a4b4:	617b      	str	r3, [r7, #20]
 800a4b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a4b8:	e138      	b.n	800a72c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4be:	2b03      	cmp	r3, #3
 800a4c0:	f200 80f1 	bhi.w	800a6a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d123      	bne.n	800a514 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f000 fe99 	bl	800b208 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d001      	beq.n	800a4e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e139      	b.n	800a754 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	691a      	ldr	r2, [r3, #16]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ea:	b2d2      	uxtb	r2, r2
 800a4ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f2:	1c5a      	adds	r2, r3, #1
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a508:	b29b      	uxth	r3, r3
 800a50a:	3b01      	subs	r3, #1
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a512:	e10b      	b.n	800a72c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a518:	2b02      	cmp	r3, #2
 800a51a:	d14e      	bne.n	800a5ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a522:	2200      	movs	r2, #0
 800a524:	4906      	ldr	r1, [pc, #24]	; (800a540 <HAL_I2C_Mem_Read+0x22c>)
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f000 fd16 	bl	800af58 <I2C_WaitOnFlagUntilTimeout>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d008      	beq.n	800a544 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	e10e      	b.n	800a754 <HAL_I2C_Mem_Read+0x440>
 800a536:	bf00      	nop
 800a538:	00100002 	.word	0x00100002
 800a53c:	ffff0000 	.word	0xffff0000
 800a540:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a552:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	691a      	ldr	r2, [r3, #16]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55e:	b2d2      	uxtb	r2, r2
 800a560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a566:	1c5a      	adds	r2, r3, #1
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a570:	3b01      	subs	r3, #1
 800a572:	b29a      	uxth	r2, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	3b01      	subs	r3, #1
 800a580:	b29a      	uxth	r2, r3
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	691a      	ldr	r2, [r3, #16]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a590:	b2d2      	uxtb	r2, r2
 800a592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a598:	1c5a      	adds	r2, r3, #1
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	b29a      	uxth	r2, r3
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a5b8:	e0b8      	b.n	800a72c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	4966      	ldr	r1, [pc, #408]	; (800a75c <HAL_I2C_Mem_Read+0x448>)
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f000 fcc7 	bl	800af58 <I2C_WaitOnFlagUntilTimeout>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d001      	beq.n	800a5d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e0bf      	b.n	800a754 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	691a      	ldr	r2, [r3, #16]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ee:	b2d2      	uxtb	r2, r2
 800a5f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f6:	1c5a      	adds	r2, r3, #1
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a600:	3b01      	subs	r3, #1
 800a602:	b29a      	uxth	r2, r3
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	3b01      	subs	r3, #1
 800a610:	b29a      	uxth	r2, r3
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61c:	2200      	movs	r2, #0
 800a61e:	494f      	ldr	r1, [pc, #316]	; (800a75c <HAL_I2C_Mem_Read+0x448>)
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f000 fc99 	bl	800af58 <I2C_WaitOnFlagUntilTimeout>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d001      	beq.n	800a630 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	e091      	b.n	800a754 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a63e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	691a      	ldr	r2, [r3, #16]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64a:	b2d2      	uxtb	r2, r2
 800a64c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a652:	1c5a      	adds	r2, r3, #1
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a65c:	3b01      	subs	r3, #1
 800a65e:	b29a      	uxth	r2, r3
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a668:	b29b      	uxth	r3, r3
 800a66a:	3b01      	subs	r3, #1
 800a66c:	b29a      	uxth	r2, r3
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	691a      	ldr	r2, [r3, #16]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67c:	b2d2      	uxtb	r2, r2
 800a67e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a684:	1c5a      	adds	r2, r3, #1
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a68e:	3b01      	subs	r3, #1
 800a690:	b29a      	uxth	r2, r3
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	3b01      	subs	r3, #1
 800a69e:	b29a      	uxth	r2, r3
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a6a4:	e042      	b.n	800a72c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a6a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a6aa:	68f8      	ldr	r0, [r7, #12]
 800a6ac:	f000 fdac 	bl	800b208 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e04c      	b.n	800a754 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	691a      	ldr	r2, [r3, #16]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c4:	b2d2      	uxtb	r2, r2
 800a6c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6cc:	1c5a      	adds	r2, r3, #1
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	b29a      	uxth	r2, r3
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	b29a      	uxth	r2, r3
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	695b      	ldr	r3, [r3, #20]
 800a6f2:	f003 0304 	and.w	r3, r3, #4
 800a6f6:	2b04      	cmp	r3, #4
 800a6f8:	d118      	bne.n	800a72c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	691a      	ldr	r2, [r3, #16]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a704:	b2d2      	uxtb	r2, r2
 800a706:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70c:	1c5a      	adds	r2, r3, #1
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a716:	3b01      	subs	r3, #1
 800a718:	b29a      	uxth	r2, r3
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a722:	b29b      	uxth	r3, r3
 800a724:	3b01      	subs	r3, #1
 800a726:	b29a      	uxth	r2, r3
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a730:	2b00      	cmp	r3, #0
 800a732:	f47f aec2 	bne.w	800a4ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2220      	movs	r2, #32
 800a73a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2200      	movs	r2, #0
 800a742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2200      	movs	r2, #0
 800a74a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a74e:	2300      	movs	r3, #0
 800a750:	e000      	b.n	800a754 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a752:	2302      	movs	r3, #2
  }
}
 800a754:	4618      	mov	r0, r3
 800a756:	3728      	adds	r7, #40	; 0x28
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	00010004 	.word	0x00010004

0800a760 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b08a      	sub	sp, #40	; 0x28
 800a764:	af02      	add	r7, sp, #8
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	607a      	str	r2, [r7, #4]
 800a76a:	603b      	str	r3, [r7, #0]
 800a76c:	460b      	mov	r3, r1
 800a76e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800a770:	f7fd fe04 	bl	800837c <HAL_GetTick>
 800a774:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800a776:	2301      	movs	r3, #1
 800a778:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b20      	cmp	r3, #32
 800a784:	f040 8111 	bne.w	800a9aa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	9300      	str	r3, [sp, #0]
 800a78c:	2319      	movs	r3, #25
 800a78e:	2201      	movs	r2, #1
 800a790:	4988      	ldr	r1, [pc, #544]	; (800a9b4 <HAL_I2C_IsDeviceReady+0x254>)
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	f000 fbe0 	bl	800af58 <I2C_WaitOnFlagUntilTimeout>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800a79e:	2302      	movs	r3, #2
 800a7a0:	e104      	b.n	800a9ac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d101      	bne.n	800a7b0 <HAL_I2C_IsDeviceReady+0x50>
 800a7ac:	2302      	movs	r3, #2
 800a7ae:	e0fd      	b.n	800a9ac <HAL_I2C_IsDeviceReady+0x24c>
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f003 0301 	and.w	r3, r3, #1
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d007      	beq.n	800a7d6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f042 0201 	orr.w	r2, r2, #1
 800a7d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a7e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2224      	movs	r2, #36	; 0x24
 800a7ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	4a70      	ldr	r2, [pc, #448]	; (800a9b8 <HAL_I2C_IsDeviceReady+0x258>)
 800a7f8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a808:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	9300      	str	r3, [sp, #0]
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	2200      	movs	r2, #0
 800a812:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f000 fb9e 	bl	800af58 <I2C_WaitOnFlagUntilTimeout>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00d      	beq.n	800a83e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a82c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a830:	d103      	bne.n	800a83a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a838:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800a83a:	2303      	movs	r3, #3
 800a83c:	e0b6      	b.n	800a9ac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a83e:	897b      	ldrh	r3, [r7, #10]
 800a840:	b2db      	uxtb	r3, r3
 800a842:	461a      	mov	r2, r3
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a84c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800a84e:	f7fd fd95 	bl	800837c <HAL_GetTick>
 800a852:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	695b      	ldr	r3, [r3, #20]
 800a85a:	f003 0302 	and.w	r3, r3, #2
 800a85e:	2b02      	cmp	r3, #2
 800a860:	bf0c      	ite	eq
 800a862:	2301      	moveq	r3, #1
 800a864:	2300      	movne	r3, #0
 800a866:	b2db      	uxtb	r3, r3
 800a868:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	695b      	ldr	r3, [r3, #20]
 800a870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a878:	bf0c      	ite	eq
 800a87a:	2301      	moveq	r3, #1
 800a87c:	2300      	movne	r3, #0
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a882:	e025      	b.n	800a8d0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a884:	f7fd fd7a 	bl	800837c <HAL_GetTick>
 800a888:	4602      	mov	r2, r0
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	1ad3      	subs	r3, r2, r3
 800a88e:	683a      	ldr	r2, [r7, #0]
 800a890:	429a      	cmp	r2, r3
 800a892:	d302      	bcc.n	800a89a <HAL_I2C_IsDeviceReady+0x13a>
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d103      	bne.n	800a8a2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	22a0      	movs	r2, #160	; 0xa0
 800a89e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	695b      	ldr	r3, [r3, #20]
 800a8a8:	f003 0302 	and.w	r3, r3, #2
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	bf0c      	ite	eq
 800a8b0:	2301      	moveq	r3, #1
 800a8b2:	2300      	movne	r3, #0
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	695b      	ldr	r3, [r3, #20]
 800a8be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8c6:	bf0c      	ite	eq
 800a8c8:	2301      	moveq	r3, #1
 800a8ca:	2300      	movne	r3, #0
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	2ba0      	cmp	r3, #160	; 0xa0
 800a8da:	d005      	beq.n	800a8e8 <HAL_I2C_IsDeviceReady+0x188>
 800a8dc:	7dfb      	ldrb	r3, [r7, #23]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d102      	bne.n	800a8e8 <HAL_I2C_IsDeviceReady+0x188>
 800a8e2:	7dbb      	ldrb	r3, [r7, #22]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d0cd      	beq.n	800a884 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2220      	movs	r2, #32
 800a8ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	f003 0302 	and.w	r3, r3, #2
 800a8fa:	2b02      	cmp	r3, #2
 800a8fc:	d129      	bne.n	800a952 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a90c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a90e:	2300      	movs	r3, #0
 800a910:	613b      	str	r3, [r7, #16]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	695b      	ldr	r3, [r3, #20]
 800a918:	613b      	str	r3, [r7, #16]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	699b      	ldr	r3, [r3, #24]
 800a920:	613b      	str	r3, [r7, #16]
 800a922:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	9300      	str	r3, [sp, #0]
 800a928:	2319      	movs	r3, #25
 800a92a:	2201      	movs	r2, #1
 800a92c:	4921      	ldr	r1, [pc, #132]	; (800a9b4 <HAL_I2C_IsDeviceReady+0x254>)
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f000 fb12 	bl	800af58 <I2C_WaitOnFlagUntilTimeout>
 800a934:	4603      	mov	r3, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d001      	beq.n	800a93e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	e036      	b.n	800a9ac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2220      	movs	r2, #32
 800a942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800a94e:	2300      	movs	r3, #0
 800a950:	e02c      	b.n	800a9ac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a960:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a96a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	2319      	movs	r3, #25
 800a972:	2201      	movs	r2, #1
 800a974:	490f      	ldr	r1, [pc, #60]	; (800a9b4 <HAL_I2C_IsDeviceReady+0x254>)
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	f000 faee 	bl	800af58 <I2C_WaitOnFlagUntilTimeout>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d001      	beq.n	800a986 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	e012      	b.n	800a9ac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	3301      	adds	r3, #1
 800a98a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800a98c:	69ba      	ldr	r2, [r7, #24]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	429a      	cmp	r2, r3
 800a992:	f4ff af32 	bcc.w	800a7fa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2220      	movs	r2, #32
 800a99a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e000      	b.n	800a9ac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800a9aa:	2302      	movs	r3, #2
  }
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3720      	adds	r7, #32
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	00100002 	.word	0x00100002
 800a9b8:	ffff0000 	.word	0xffff0000

0800a9bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b088      	sub	sp, #32
 800a9c0:	af02      	add	r7, sp, #8
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	607a      	str	r2, [r7, #4]
 800a9c6:	603b      	str	r3, [r7, #0]
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	2b08      	cmp	r3, #8
 800a9d6:	d006      	beq.n	800a9e6 <I2C_MasterRequestWrite+0x2a>
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d003      	beq.n	800a9e6 <I2C_MasterRequestWrite+0x2a>
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a9e4:	d108      	bne.n	800a9f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9f4:	601a      	str	r2, [r3, #0]
 800a9f6:	e00b      	b.n	800aa10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9fc:	2b12      	cmp	r3, #18
 800a9fe:	d107      	bne.n	800aa10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	9300      	str	r3, [sp, #0]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f000 fa9b 	bl	800af58 <I2C_WaitOnFlagUntilTimeout>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00d      	beq.n	800aa44 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa36:	d103      	bne.n	800aa40 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aa40:	2303      	movs	r3, #3
 800aa42:	e035      	b.n	800aab0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa4c:	d108      	bne.n	800aa60 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800aa4e:	897b      	ldrh	r3, [r7, #10]
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	461a      	mov	r2, r3
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800aa5c:	611a      	str	r2, [r3, #16]
 800aa5e:	e01b      	b.n	800aa98 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800aa60:	897b      	ldrh	r3, [r7, #10]
 800aa62:	11db      	asrs	r3, r3, #7
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	f003 0306 	and.w	r3, r3, #6
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	f063 030f 	orn	r3, r3, #15
 800aa70:	b2da      	uxtb	r2, r3
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	490e      	ldr	r1, [pc, #56]	; (800aab8 <I2C_MasterRequestWrite+0xfc>)
 800aa7e:	68f8      	ldr	r0, [r7, #12]
 800aa80:	f000 fac1 	bl	800b006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d001      	beq.n	800aa8e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e010      	b.n	800aab0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800aa8e:	897b      	ldrh	r3, [r7, #10]
 800aa90:	b2da      	uxtb	r2, r3
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	4907      	ldr	r1, [pc, #28]	; (800aabc <I2C_MasterRequestWrite+0x100>)
 800aa9e:	68f8      	ldr	r0, [r7, #12]
 800aaa0:	f000 fab1 	bl	800b006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d001      	beq.n	800aaae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e000      	b.n	800aab0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3718      	adds	r7, #24
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}
 800aab8:	00010008 	.word	0x00010008
 800aabc:	00010002 	.word	0x00010002

0800aac0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b088      	sub	sp, #32
 800aac4:	af02      	add	r7, sp, #8
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	607a      	str	r2, [r7, #4]
 800aaca:	603b      	str	r3, [r7, #0]
 800aacc:	460b      	mov	r3, r1
 800aace:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aae4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	2b08      	cmp	r3, #8
 800aaea:	d006      	beq.n	800aafa <I2C_MasterRequestRead+0x3a>
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d003      	beq.n	800aafa <I2C_MasterRequestRead+0x3a>
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800aaf8:	d108      	bne.n	800ab0c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab08:	601a      	str	r2, [r3, #0]
 800ab0a:	e00b      	b.n	800ab24 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab10:	2b11      	cmp	r3, #17
 800ab12:	d107      	bne.n	800ab24 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	9300      	str	r3, [sp, #0]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f000 fa11 	bl	800af58 <I2C_WaitOnFlagUntilTimeout>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00d      	beq.n	800ab58 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab4a:	d103      	bne.n	800ab54 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ab54:	2303      	movs	r3, #3
 800ab56:	e079      	b.n	800ac4c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	691b      	ldr	r3, [r3, #16]
 800ab5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab60:	d108      	bne.n	800ab74 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ab62:	897b      	ldrh	r3, [r7, #10]
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	f043 0301 	orr.w	r3, r3, #1
 800ab6a:	b2da      	uxtb	r2, r3
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	611a      	str	r2, [r3, #16]
 800ab72:	e05f      	b.n	800ac34 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ab74:	897b      	ldrh	r3, [r7, #10]
 800ab76:	11db      	asrs	r3, r3, #7
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	f003 0306 	and.w	r3, r3, #6
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	f063 030f 	orn	r3, r3, #15
 800ab84:	b2da      	uxtb	r2, r3
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	4930      	ldr	r1, [pc, #192]	; (800ac54 <I2C_MasterRequestRead+0x194>)
 800ab92:	68f8      	ldr	r0, [r7, #12]
 800ab94:	f000 fa37 	bl	800b006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d001      	beq.n	800aba2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e054      	b.n	800ac4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800aba2:	897b      	ldrh	r3, [r7, #10]
 800aba4:	b2da      	uxtb	r2, r3
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	4929      	ldr	r1, [pc, #164]	; (800ac58 <I2C_MasterRequestRead+0x198>)
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f000 fa27 	bl	800b006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d001      	beq.n	800abc2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	e044      	b.n	800ac4c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800abc2:	2300      	movs	r3, #0
 800abc4:	613b      	str	r3, [r7, #16]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	695b      	ldr	r3, [r3, #20]
 800abcc:	613b      	str	r3, [r7, #16]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	699b      	ldr	r3, [r3, #24]
 800abd4:	613b      	str	r3, [r7, #16]
 800abd6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abe6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	9300      	str	r3, [sp, #0]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2200      	movs	r2, #0
 800abf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f000 f9af 	bl	800af58 <I2C_WaitOnFlagUntilTimeout>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00d      	beq.n	800ac1c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac0e:	d103      	bne.n	800ac18 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac16:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800ac18:	2303      	movs	r3, #3
 800ac1a:	e017      	b.n	800ac4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800ac1c:	897b      	ldrh	r3, [r7, #10]
 800ac1e:	11db      	asrs	r3, r3, #7
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	f003 0306 	and.w	r3, r3, #6
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	f063 030e 	orn	r3, r3, #14
 800ac2c:	b2da      	uxtb	r2, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	4907      	ldr	r1, [pc, #28]	; (800ac58 <I2C_MasterRequestRead+0x198>)
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f000 f9e3 	bl	800b006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	e000      	b.n	800ac4c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3718      	adds	r7, #24
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	00010008 	.word	0x00010008
 800ac58:	00010002 	.word	0x00010002

0800ac5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b088      	sub	sp, #32
 800ac60:	af02      	add	r7, sp, #8
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	4608      	mov	r0, r1
 800ac66:	4611      	mov	r1, r2
 800ac68:	461a      	mov	r2, r3
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	817b      	strh	r3, [r7, #10]
 800ac6e:	460b      	mov	r3, r1
 800ac70:	813b      	strh	r3, [r7, #8]
 800ac72:	4613      	mov	r3, r2
 800ac74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	6a3b      	ldr	r3, [r7, #32]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f000 f960 	bl	800af58 <I2C_WaitOnFlagUntilTimeout>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00d      	beq.n	800acba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acac:	d103      	bne.n	800acb6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800acb6:	2303      	movs	r3, #3
 800acb8:	e05f      	b.n	800ad7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800acba:	897b      	ldrh	r3, [r7, #10]
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	461a      	mov	r2, r3
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800acc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800acca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800accc:	6a3a      	ldr	r2, [r7, #32]
 800acce:	492d      	ldr	r1, [pc, #180]	; (800ad84 <I2C_RequestMemoryWrite+0x128>)
 800acd0:	68f8      	ldr	r0, [r7, #12]
 800acd2:	f000 f998 	bl	800b006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d001      	beq.n	800ace0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800acdc:	2301      	movs	r3, #1
 800acde:	e04c      	b.n	800ad7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ace0:	2300      	movs	r3, #0
 800ace2:	617b      	str	r3, [r7, #20]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	695b      	ldr	r3, [r3, #20]
 800acea:	617b      	str	r3, [r7, #20]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	699b      	ldr	r3, [r3, #24]
 800acf2:	617b      	str	r3, [r7, #20]
 800acf4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800acf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acf8:	6a39      	ldr	r1, [r7, #32]
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f000 fa02 	bl	800b104 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00d      	beq.n	800ad22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad0a:	2b04      	cmp	r3, #4
 800ad0c:	d107      	bne.n	800ad1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e02b      	b.n	800ad7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ad22:	88fb      	ldrh	r3, [r7, #6]
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d105      	bne.n	800ad34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ad28:	893b      	ldrh	r3, [r7, #8]
 800ad2a:	b2da      	uxtb	r2, r3
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	611a      	str	r2, [r3, #16]
 800ad32:	e021      	b.n	800ad78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ad34:	893b      	ldrh	r3, [r7, #8]
 800ad36:	0a1b      	lsrs	r3, r3, #8
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	b2da      	uxtb	r2, r3
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad44:	6a39      	ldr	r1, [r7, #32]
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f000 f9dc 	bl	800b104 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00d      	beq.n	800ad6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad56:	2b04      	cmp	r3, #4
 800ad58:	d107      	bne.n	800ad6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e005      	b.n	800ad7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ad6e:	893b      	ldrh	r3, [r7, #8]
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3718      	adds	r7, #24
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	00010002 	.word	0x00010002

0800ad88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b088      	sub	sp, #32
 800ad8c:	af02      	add	r7, sp, #8
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	4608      	mov	r0, r1
 800ad92:	4611      	mov	r1, r2
 800ad94:	461a      	mov	r2, r3
 800ad96:	4603      	mov	r3, r0
 800ad98:	817b      	strh	r3, [r7, #10]
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	813b      	strh	r3, [r7, #8]
 800ad9e:	4613      	mov	r3, r2
 800ada0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800adb0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800adc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800adc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc4:	9300      	str	r3, [sp, #0]
 800adc6:	6a3b      	ldr	r3, [r7, #32]
 800adc8:	2200      	movs	r2, #0
 800adca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800adce:	68f8      	ldr	r0, [r7, #12]
 800add0:	f000 f8c2 	bl	800af58 <I2C_WaitOnFlagUntilTimeout>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00d      	beq.n	800adf6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ade4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ade8:	d103      	bne.n	800adf2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800adf0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800adf2:	2303      	movs	r3, #3
 800adf4:	e0aa      	b.n	800af4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800adf6:	897b      	ldrh	r3, [r7, #10]
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	461a      	mov	r2, r3
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ae04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ae06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae08:	6a3a      	ldr	r2, [r7, #32]
 800ae0a:	4952      	ldr	r1, [pc, #328]	; (800af54 <I2C_RequestMemoryRead+0x1cc>)
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f000 f8fa 	bl	800b006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d001      	beq.n	800ae1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e097      	b.n	800af4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	617b      	str	r3, [r7, #20]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	695b      	ldr	r3, [r3, #20]
 800ae26:	617b      	str	r3, [r7, #20]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	699b      	ldr	r3, [r3, #24]
 800ae2e:	617b      	str	r3, [r7, #20]
 800ae30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae34:	6a39      	ldr	r1, [r7, #32]
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f000 f964 	bl	800b104 <I2C_WaitOnTXEFlagUntilTimeout>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00d      	beq.n	800ae5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae46:	2b04      	cmp	r3, #4
 800ae48:	d107      	bne.n	800ae5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e076      	b.n	800af4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ae5e:	88fb      	ldrh	r3, [r7, #6]
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d105      	bne.n	800ae70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ae64:	893b      	ldrh	r3, [r7, #8]
 800ae66:	b2da      	uxtb	r2, r3
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	611a      	str	r2, [r3, #16]
 800ae6e:	e021      	b.n	800aeb4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ae70:	893b      	ldrh	r3, [r7, #8]
 800ae72:	0a1b      	lsrs	r3, r3, #8
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	b2da      	uxtb	r2, r3
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae80:	6a39      	ldr	r1, [r7, #32]
 800ae82:	68f8      	ldr	r0, [r7, #12]
 800ae84:	f000 f93e 	bl	800b104 <I2C_WaitOnTXEFlagUntilTimeout>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00d      	beq.n	800aeaa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae92:	2b04      	cmp	r3, #4
 800ae94:	d107      	bne.n	800aea6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aea4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aea6:	2301      	movs	r3, #1
 800aea8:	e050      	b.n	800af4c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aeaa:	893b      	ldrh	r3, [r7, #8]
 800aeac:	b2da      	uxtb	r2, r3
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aeb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeb6:	6a39      	ldr	r1, [r7, #32]
 800aeb8:	68f8      	ldr	r0, [r7, #12]
 800aeba:	f000 f923 	bl	800b104 <I2C_WaitOnTXEFlagUntilTimeout>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d00d      	beq.n	800aee0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec8:	2b04      	cmp	r3, #4
 800aeca:	d107      	bne.n	800aedc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aeda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aedc:	2301      	movs	r3, #1
 800aede:	e035      	b.n	800af4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aeee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef2:	9300      	str	r3, [sp, #0]
 800aef4:	6a3b      	ldr	r3, [r7, #32]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	f000 f82b 	bl	800af58 <I2C_WaitOnFlagUntilTimeout>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00d      	beq.n	800af24 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af16:	d103      	bne.n	800af20 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800af20:	2303      	movs	r3, #3
 800af22:	e013      	b.n	800af4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800af24:	897b      	ldrh	r3, [r7, #10]
 800af26:	b2db      	uxtb	r3, r3
 800af28:	f043 0301 	orr.w	r3, r3, #1
 800af2c:	b2da      	uxtb	r2, r3
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800af34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af36:	6a3a      	ldr	r2, [r7, #32]
 800af38:	4906      	ldr	r1, [pc, #24]	; (800af54 <I2C_RequestMemoryRead+0x1cc>)
 800af3a:	68f8      	ldr	r0, [r7, #12]
 800af3c:	f000 f863 	bl	800b006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	d001      	beq.n	800af4a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800af46:	2301      	movs	r3, #1
 800af48:	e000      	b.n	800af4c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3718      	adds	r7, #24
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	00010002 	.word	0x00010002

0800af58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	603b      	str	r3, [r7, #0]
 800af64:	4613      	mov	r3, r2
 800af66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af68:	e025      	b.n	800afb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af70:	d021      	beq.n	800afb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af72:	f7fd fa03 	bl	800837c <HAL_GetTick>
 800af76:	4602      	mov	r2, r0
 800af78:	69bb      	ldr	r3, [r7, #24]
 800af7a:	1ad3      	subs	r3, r2, r3
 800af7c:	683a      	ldr	r2, [r7, #0]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d302      	bcc.n	800af88 <I2C_WaitOnFlagUntilTimeout+0x30>
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d116      	bne.n	800afb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2200      	movs	r2, #0
 800af8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2220      	movs	r2, #32
 800af92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2200      	movs	r2, #0
 800af9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa2:	f043 0220 	orr.w	r2, r3, #32
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2200      	movs	r2, #0
 800afae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	e023      	b.n	800affe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	0c1b      	lsrs	r3, r3, #16
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d10d      	bne.n	800afdc <I2C_WaitOnFlagUntilTimeout+0x84>
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	695b      	ldr	r3, [r3, #20]
 800afc6:	43da      	mvns	r2, r3
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	4013      	ands	r3, r2
 800afcc:	b29b      	uxth	r3, r3
 800afce:	2b00      	cmp	r3, #0
 800afd0:	bf0c      	ite	eq
 800afd2:	2301      	moveq	r3, #1
 800afd4:	2300      	movne	r3, #0
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	461a      	mov	r2, r3
 800afda:	e00c      	b.n	800aff6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	699b      	ldr	r3, [r3, #24]
 800afe2:	43da      	mvns	r2, r3
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	4013      	ands	r3, r2
 800afe8:	b29b      	uxth	r3, r3
 800afea:	2b00      	cmp	r3, #0
 800afec:	bf0c      	ite	eq
 800afee:	2301      	moveq	r3, #1
 800aff0:	2300      	movne	r3, #0
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	461a      	mov	r2, r3
 800aff6:	79fb      	ldrb	r3, [r7, #7]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d0b6      	beq.n	800af6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	3710      	adds	r7, #16
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b084      	sub	sp, #16
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	60f8      	str	r0, [r7, #12]
 800b00e:	60b9      	str	r1, [r7, #8]
 800b010:	607a      	str	r2, [r7, #4]
 800b012:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b014:	e051      	b.n	800b0ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	695b      	ldr	r3, [r3, #20]
 800b01c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b024:	d123      	bne.n	800b06e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b034:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b03e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2200      	movs	r2, #0
 800b044:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2220      	movs	r2, #32
 800b04a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2200      	movs	r2, #0
 800b052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b05a:	f043 0204 	orr.w	r2, r3, #4
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2200      	movs	r2, #0
 800b066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b06a:	2301      	movs	r3, #1
 800b06c:	e046      	b.n	800b0fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b074:	d021      	beq.n	800b0ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b076:	f7fd f981 	bl	800837c <HAL_GetTick>
 800b07a:	4602      	mov	r2, r0
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	1ad3      	subs	r3, r2, r3
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	429a      	cmp	r2, r3
 800b084:	d302      	bcc.n	800b08c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d116      	bne.n	800b0ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2200      	movs	r2, #0
 800b090:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2220      	movs	r2, #32
 800b096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a6:	f043 0220 	orr.w	r2, r3, #32
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e020      	b.n	800b0fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	0c1b      	lsrs	r3, r3, #16
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d10c      	bne.n	800b0de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	695b      	ldr	r3, [r3, #20]
 800b0ca:	43da      	mvns	r2, r3
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	4013      	ands	r3, r2
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	bf14      	ite	ne
 800b0d6:	2301      	movne	r3, #1
 800b0d8:	2300      	moveq	r3, #0
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	e00b      	b.n	800b0f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	699b      	ldr	r3, [r3, #24]
 800b0e4:	43da      	mvns	r2, r3
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	bf14      	ite	ne
 800b0f0:	2301      	movne	r3, #1
 800b0f2:	2300      	moveq	r3, #0
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d18d      	bne.n	800b016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b0fa:	2300      	movs	r3, #0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3710      	adds	r7, #16
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b110:	e02d      	b.n	800b16e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b112:	68f8      	ldr	r0, [r7, #12]
 800b114:	f000 f8ce 	bl	800b2b4 <I2C_IsAcknowledgeFailed>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d001      	beq.n	800b122 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e02d      	b.n	800b17e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b128:	d021      	beq.n	800b16e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b12a:	f7fd f927 	bl	800837c <HAL_GetTick>
 800b12e:	4602      	mov	r2, r0
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	1ad3      	subs	r3, r2, r3
 800b134:	68ba      	ldr	r2, [r7, #8]
 800b136:	429a      	cmp	r2, r3
 800b138:	d302      	bcc.n	800b140 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d116      	bne.n	800b16e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2200      	movs	r2, #0
 800b144:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2220      	movs	r2, #32
 800b14a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2200      	movs	r2, #0
 800b152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b15a:	f043 0220 	orr.w	r2, r3, #32
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2200      	movs	r2, #0
 800b166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	e007      	b.n	800b17e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	695b      	ldr	r3, [r3, #20]
 800b174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b178:	2b80      	cmp	r3, #128	; 0x80
 800b17a:	d1ca      	bne.n	800b112 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b084      	sub	sp, #16
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	60f8      	str	r0, [r7, #12]
 800b18e:	60b9      	str	r1, [r7, #8]
 800b190:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b192:	e02d      	b.n	800b1f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	f000 f88d 	bl	800b2b4 <I2C_IsAcknowledgeFailed>
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d001      	beq.n	800b1a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e02d      	b.n	800b200 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1aa:	d021      	beq.n	800b1f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1ac:	f7fd f8e6 	bl	800837c <HAL_GetTick>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	1ad3      	subs	r3, r2, r3
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d302      	bcc.n	800b1c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d116      	bne.n	800b1f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2220      	movs	r2, #32
 800b1cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1dc:	f043 0220 	orr.w	r2, r3, #32
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	e007      	b.n	800b200 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	695b      	ldr	r3, [r3, #20]
 800b1f6:	f003 0304 	and.w	r3, r3, #4
 800b1fa:	2b04      	cmp	r3, #4
 800b1fc:	d1ca      	bne.n	800b194 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b1fe:	2300      	movs	r3, #0
}
 800b200:	4618      	mov	r0, r3
 800b202:	3710      	adds	r7, #16
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b214:	e042      	b.n	800b29c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	695b      	ldr	r3, [r3, #20]
 800b21c:	f003 0310 	and.w	r3, r3, #16
 800b220:	2b10      	cmp	r3, #16
 800b222:	d119      	bne.n	800b258 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f06f 0210 	mvn.w	r2, #16
 800b22c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2200      	movs	r2, #0
 800b232:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2220      	movs	r2, #32
 800b238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2200      	movs	r2, #0
 800b240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2200      	movs	r2, #0
 800b250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b254:	2301      	movs	r3, #1
 800b256:	e029      	b.n	800b2ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b258:	f7fd f890 	bl	800837c <HAL_GetTick>
 800b25c:	4602      	mov	r2, r0
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	1ad3      	subs	r3, r2, r3
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	429a      	cmp	r2, r3
 800b266:	d302      	bcc.n	800b26e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d116      	bne.n	800b29c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2200      	movs	r2, #0
 800b272:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2220      	movs	r2, #32
 800b278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2200      	movs	r2, #0
 800b280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b288:	f043 0220 	orr.w	r2, r3, #32
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2200      	movs	r2, #0
 800b294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b298:	2301      	movs	r3, #1
 800b29a:	e007      	b.n	800b2ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	695b      	ldr	r3, [r3, #20]
 800b2a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2a6:	2b40      	cmp	r3, #64	; 0x40
 800b2a8:	d1b5      	bne.n	800b216 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b2aa:	2300      	movs	r3, #0
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	695b      	ldr	r3, [r3, #20]
 800b2c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2ca:	d11b      	bne.n	800b304 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b2d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2220      	movs	r2, #32
 800b2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2f0:	f043 0204 	orr.w	r2, r3, #4
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b300:	2301      	movs	r3, #1
 800b302:	e000      	b.n	800b306 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b304:	2300      	movs	r3, #0
}
 800b306:	4618      	mov	r0, r3
 800b308:	370c      	adds	r7, #12
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr
	...

0800b314 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b086      	sub	sp, #24
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d101      	bne.n	800b326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b322:	2301      	movs	r3, #1
 800b324:	e25b      	b.n	800b7de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f003 0301 	and.w	r3, r3, #1
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d075      	beq.n	800b41e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b332:	4ba3      	ldr	r3, [pc, #652]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	f003 030c 	and.w	r3, r3, #12
 800b33a:	2b04      	cmp	r3, #4
 800b33c:	d00c      	beq.n	800b358 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b33e:	4ba0      	ldr	r3, [pc, #640]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b346:	2b08      	cmp	r3, #8
 800b348:	d112      	bne.n	800b370 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b34a:	4b9d      	ldr	r3, [pc, #628]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b356:	d10b      	bne.n	800b370 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b358:	4b99      	ldr	r3, [pc, #612]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b360:	2b00      	cmp	r3, #0
 800b362:	d05b      	beq.n	800b41c <HAL_RCC_OscConfig+0x108>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d157      	bne.n	800b41c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b36c:	2301      	movs	r3, #1
 800b36e:	e236      	b.n	800b7de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b378:	d106      	bne.n	800b388 <HAL_RCC_OscConfig+0x74>
 800b37a:	4b91      	ldr	r3, [pc, #580]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4a90      	ldr	r2, [pc, #576]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b384:	6013      	str	r3, [r2, #0]
 800b386:	e01d      	b.n	800b3c4 <HAL_RCC_OscConfig+0xb0>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b390:	d10c      	bne.n	800b3ac <HAL_RCC_OscConfig+0x98>
 800b392:	4b8b      	ldr	r3, [pc, #556]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a8a      	ldr	r2, [pc, #552]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b39c:	6013      	str	r3, [r2, #0]
 800b39e:	4b88      	ldr	r3, [pc, #544]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a87      	ldr	r2, [pc, #540]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b3a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b3a8:	6013      	str	r3, [r2, #0]
 800b3aa:	e00b      	b.n	800b3c4 <HAL_RCC_OscConfig+0xb0>
 800b3ac:	4b84      	ldr	r3, [pc, #528]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a83      	ldr	r2, [pc, #524]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b3b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3b6:	6013      	str	r3, [r2, #0]
 800b3b8:	4b81      	ldr	r3, [pc, #516]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a80      	ldr	r2, [pc, #512]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b3be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b3c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d013      	beq.n	800b3f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b3cc:	f7fc ffd6 	bl	800837c <HAL_GetTick>
 800b3d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b3d2:	e008      	b.n	800b3e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b3d4:	f7fc ffd2 	bl	800837c <HAL_GetTick>
 800b3d8:	4602      	mov	r2, r0
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	1ad3      	subs	r3, r2, r3
 800b3de:	2b64      	cmp	r3, #100	; 0x64
 800b3e0:	d901      	bls.n	800b3e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b3e2:	2303      	movs	r3, #3
 800b3e4:	e1fb      	b.n	800b7de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b3e6:	4b76      	ldr	r3, [pc, #472]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d0f0      	beq.n	800b3d4 <HAL_RCC_OscConfig+0xc0>
 800b3f2:	e014      	b.n	800b41e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b3f4:	f7fc ffc2 	bl	800837c <HAL_GetTick>
 800b3f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b3fa:	e008      	b.n	800b40e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b3fc:	f7fc ffbe 	bl	800837c <HAL_GetTick>
 800b400:	4602      	mov	r2, r0
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	1ad3      	subs	r3, r2, r3
 800b406:	2b64      	cmp	r3, #100	; 0x64
 800b408:	d901      	bls.n	800b40e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b40a:	2303      	movs	r3, #3
 800b40c:	e1e7      	b.n	800b7de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b40e:	4b6c      	ldr	r3, [pc, #432]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1f0      	bne.n	800b3fc <HAL_RCC_OscConfig+0xe8>
 800b41a:	e000      	b.n	800b41e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b41c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f003 0302 	and.w	r3, r3, #2
 800b426:	2b00      	cmp	r3, #0
 800b428:	d063      	beq.n	800b4f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b42a:	4b65      	ldr	r3, [pc, #404]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	f003 030c 	and.w	r3, r3, #12
 800b432:	2b00      	cmp	r3, #0
 800b434:	d00b      	beq.n	800b44e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b436:	4b62      	ldr	r3, [pc, #392]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b43e:	2b08      	cmp	r3, #8
 800b440:	d11c      	bne.n	800b47c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b442:	4b5f      	ldr	r3, [pc, #380]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d116      	bne.n	800b47c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b44e:	4b5c      	ldr	r3, [pc, #368]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f003 0302 	and.w	r3, r3, #2
 800b456:	2b00      	cmp	r3, #0
 800b458:	d005      	beq.n	800b466 <HAL_RCC_OscConfig+0x152>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d001      	beq.n	800b466 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b462:	2301      	movs	r3, #1
 800b464:	e1bb      	b.n	800b7de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b466:	4b56      	ldr	r3, [pc, #344]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	00db      	lsls	r3, r3, #3
 800b474:	4952      	ldr	r1, [pc, #328]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b476:	4313      	orrs	r3, r2
 800b478:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b47a:	e03a      	b.n	800b4f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d020      	beq.n	800b4c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b484:	4b4f      	ldr	r3, [pc, #316]	; (800b5c4 <HAL_RCC_OscConfig+0x2b0>)
 800b486:	2201      	movs	r2, #1
 800b488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b48a:	f7fc ff77 	bl	800837c <HAL_GetTick>
 800b48e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b490:	e008      	b.n	800b4a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b492:	f7fc ff73 	bl	800837c <HAL_GetTick>
 800b496:	4602      	mov	r2, r0
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	1ad3      	subs	r3, r2, r3
 800b49c:	2b02      	cmp	r3, #2
 800b49e:	d901      	bls.n	800b4a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b4a0:	2303      	movs	r3, #3
 800b4a2:	e19c      	b.n	800b7de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b4a4:	4b46      	ldr	r3, [pc, #280]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f003 0302 	and.w	r3, r3, #2
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d0f0      	beq.n	800b492 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4b0:	4b43      	ldr	r3, [pc, #268]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	00db      	lsls	r3, r3, #3
 800b4be:	4940      	ldr	r1, [pc, #256]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	600b      	str	r3, [r1, #0]
 800b4c4:	e015      	b.n	800b4f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b4c6:	4b3f      	ldr	r3, [pc, #252]	; (800b5c4 <HAL_RCC_OscConfig+0x2b0>)
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4cc:	f7fc ff56 	bl	800837c <HAL_GetTick>
 800b4d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b4d2:	e008      	b.n	800b4e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b4d4:	f7fc ff52 	bl	800837c <HAL_GetTick>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	1ad3      	subs	r3, r2, r3
 800b4de:	2b02      	cmp	r3, #2
 800b4e0:	d901      	bls.n	800b4e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b4e2:	2303      	movs	r3, #3
 800b4e4:	e17b      	b.n	800b7de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b4e6:	4b36      	ldr	r3, [pc, #216]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f003 0302 	and.w	r3, r3, #2
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d1f0      	bne.n	800b4d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f003 0308 	and.w	r3, r3, #8
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d030      	beq.n	800b560 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	695b      	ldr	r3, [r3, #20]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d016      	beq.n	800b534 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b506:	4b30      	ldr	r3, [pc, #192]	; (800b5c8 <HAL_RCC_OscConfig+0x2b4>)
 800b508:	2201      	movs	r2, #1
 800b50a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b50c:	f7fc ff36 	bl	800837c <HAL_GetTick>
 800b510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b512:	e008      	b.n	800b526 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b514:	f7fc ff32 	bl	800837c <HAL_GetTick>
 800b518:	4602      	mov	r2, r0
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	1ad3      	subs	r3, r2, r3
 800b51e:	2b02      	cmp	r3, #2
 800b520:	d901      	bls.n	800b526 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b522:	2303      	movs	r3, #3
 800b524:	e15b      	b.n	800b7de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b526:	4b26      	ldr	r3, [pc, #152]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b52a:	f003 0302 	and.w	r3, r3, #2
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d0f0      	beq.n	800b514 <HAL_RCC_OscConfig+0x200>
 800b532:	e015      	b.n	800b560 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b534:	4b24      	ldr	r3, [pc, #144]	; (800b5c8 <HAL_RCC_OscConfig+0x2b4>)
 800b536:	2200      	movs	r2, #0
 800b538:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b53a:	f7fc ff1f 	bl	800837c <HAL_GetTick>
 800b53e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b540:	e008      	b.n	800b554 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b542:	f7fc ff1b 	bl	800837c <HAL_GetTick>
 800b546:	4602      	mov	r2, r0
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	1ad3      	subs	r3, r2, r3
 800b54c:	2b02      	cmp	r3, #2
 800b54e:	d901      	bls.n	800b554 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b550:	2303      	movs	r3, #3
 800b552:	e144      	b.n	800b7de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b554:	4b1a      	ldr	r3, [pc, #104]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b558:	f003 0302 	and.w	r3, r3, #2
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1f0      	bne.n	800b542 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f003 0304 	and.w	r3, r3, #4
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f000 80a0 	beq.w	800b6ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b56e:	2300      	movs	r3, #0
 800b570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b572:	4b13      	ldr	r3, [pc, #76]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d10f      	bne.n	800b59e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b57e:	2300      	movs	r3, #0
 800b580:	60bb      	str	r3, [r7, #8]
 800b582:	4b0f      	ldr	r3, [pc, #60]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b586:	4a0e      	ldr	r2, [pc, #56]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b58c:	6413      	str	r3, [r2, #64]	; 0x40
 800b58e:	4b0c      	ldr	r3, [pc, #48]	; (800b5c0 <HAL_RCC_OscConfig+0x2ac>)
 800b590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b596:	60bb      	str	r3, [r7, #8]
 800b598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b59a:	2301      	movs	r3, #1
 800b59c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b59e:	4b0b      	ldr	r3, [pc, #44]	; (800b5cc <HAL_RCC_OscConfig+0x2b8>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d121      	bne.n	800b5ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b5aa:	4b08      	ldr	r3, [pc, #32]	; (800b5cc <HAL_RCC_OscConfig+0x2b8>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4a07      	ldr	r2, [pc, #28]	; (800b5cc <HAL_RCC_OscConfig+0x2b8>)
 800b5b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b5b6:	f7fc fee1 	bl	800837c <HAL_GetTick>
 800b5ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b5bc:	e011      	b.n	800b5e2 <HAL_RCC_OscConfig+0x2ce>
 800b5be:	bf00      	nop
 800b5c0:	40023800 	.word	0x40023800
 800b5c4:	42470000 	.word	0x42470000
 800b5c8:	42470e80 	.word	0x42470e80
 800b5cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b5d0:	f7fc fed4 	bl	800837c <HAL_GetTick>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	1ad3      	subs	r3, r2, r3
 800b5da:	2b02      	cmp	r3, #2
 800b5dc:	d901      	bls.n	800b5e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b5de:	2303      	movs	r3, #3
 800b5e0:	e0fd      	b.n	800b7de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b5e2:	4b81      	ldr	r3, [pc, #516]	; (800b7e8 <HAL_RCC_OscConfig+0x4d4>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d0f0      	beq.n	800b5d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d106      	bne.n	800b604 <HAL_RCC_OscConfig+0x2f0>
 800b5f6:	4b7d      	ldr	r3, [pc, #500]	; (800b7ec <HAL_RCC_OscConfig+0x4d8>)
 800b5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5fa:	4a7c      	ldr	r2, [pc, #496]	; (800b7ec <HAL_RCC_OscConfig+0x4d8>)
 800b5fc:	f043 0301 	orr.w	r3, r3, #1
 800b600:	6713      	str	r3, [r2, #112]	; 0x70
 800b602:	e01c      	b.n	800b63e <HAL_RCC_OscConfig+0x32a>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	2b05      	cmp	r3, #5
 800b60a:	d10c      	bne.n	800b626 <HAL_RCC_OscConfig+0x312>
 800b60c:	4b77      	ldr	r3, [pc, #476]	; (800b7ec <HAL_RCC_OscConfig+0x4d8>)
 800b60e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b610:	4a76      	ldr	r2, [pc, #472]	; (800b7ec <HAL_RCC_OscConfig+0x4d8>)
 800b612:	f043 0304 	orr.w	r3, r3, #4
 800b616:	6713      	str	r3, [r2, #112]	; 0x70
 800b618:	4b74      	ldr	r3, [pc, #464]	; (800b7ec <HAL_RCC_OscConfig+0x4d8>)
 800b61a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b61c:	4a73      	ldr	r2, [pc, #460]	; (800b7ec <HAL_RCC_OscConfig+0x4d8>)
 800b61e:	f043 0301 	orr.w	r3, r3, #1
 800b622:	6713      	str	r3, [r2, #112]	; 0x70
 800b624:	e00b      	b.n	800b63e <HAL_RCC_OscConfig+0x32a>
 800b626:	4b71      	ldr	r3, [pc, #452]	; (800b7ec <HAL_RCC_OscConfig+0x4d8>)
 800b628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b62a:	4a70      	ldr	r2, [pc, #448]	; (800b7ec <HAL_RCC_OscConfig+0x4d8>)
 800b62c:	f023 0301 	bic.w	r3, r3, #1
 800b630:	6713      	str	r3, [r2, #112]	; 0x70
 800b632:	4b6e      	ldr	r3, [pc, #440]	; (800b7ec <HAL_RCC_OscConfig+0x4d8>)
 800b634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b636:	4a6d      	ldr	r2, [pc, #436]	; (800b7ec <HAL_RCC_OscConfig+0x4d8>)
 800b638:	f023 0304 	bic.w	r3, r3, #4
 800b63c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d015      	beq.n	800b672 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b646:	f7fc fe99 	bl	800837c <HAL_GetTick>
 800b64a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b64c:	e00a      	b.n	800b664 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b64e:	f7fc fe95 	bl	800837c <HAL_GetTick>
 800b652:	4602      	mov	r2, r0
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	1ad3      	subs	r3, r2, r3
 800b658:	f241 3288 	movw	r2, #5000	; 0x1388
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d901      	bls.n	800b664 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b660:	2303      	movs	r3, #3
 800b662:	e0bc      	b.n	800b7de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b664:	4b61      	ldr	r3, [pc, #388]	; (800b7ec <HAL_RCC_OscConfig+0x4d8>)
 800b666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b668:	f003 0302 	and.w	r3, r3, #2
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d0ee      	beq.n	800b64e <HAL_RCC_OscConfig+0x33a>
 800b670:	e014      	b.n	800b69c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b672:	f7fc fe83 	bl	800837c <HAL_GetTick>
 800b676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b678:	e00a      	b.n	800b690 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b67a:	f7fc fe7f 	bl	800837c <HAL_GetTick>
 800b67e:	4602      	mov	r2, r0
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	f241 3288 	movw	r2, #5000	; 0x1388
 800b688:	4293      	cmp	r3, r2
 800b68a:	d901      	bls.n	800b690 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b68c:	2303      	movs	r3, #3
 800b68e:	e0a6      	b.n	800b7de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b690:	4b56      	ldr	r3, [pc, #344]	; (800b7ec <HAL_RCC_OscConfig+0x4d8>)
 800b692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b694:	f003 0302 	and.w	r3, r3, #2
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d1ee      	bne.n	800b67a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b69c:	7dfb      	ldrb	r3, [r7, #23]
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d105      	bne.n	800b6ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b6a2:	4b52      	ldr	r3, [pc, #328]	; (800b7ec <HAL_RCC_OscConfig+0x4d8>)
 800b6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a6:	4a51      	ldr	r2, [pc, #324]	; (800b7ec <HAL_RCC_OscConfig+0x4d8>)
 800b6a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b6ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	699b      	ldr	r3, [r3, #24]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f000 8092 	beq.w	800b7dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b6b8:	4b4c      	ldr	r3, [pc, #304]	; (800b7ec <HAL_RCC_OscConfig+0x4d8>)
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	f003 030c 	and.w	r3, r3, #12
 800b6c0:	2b08      	cmp	r3, #8
 800b6c2:	d05c      	beq.n	800b77e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	699b      	ldr	r3, [r3, #24]
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d141      	bne.n	800b750 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b6cc:	4b48      	ldr	r3, [pc, #288]	; (800b7f0 <HAL_RCC_OscConfig+0x4dc>)
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b6d2:	f7fc fe53 	bl	800837c <HAL_GetTick>
 800b6d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b6d8:	e008      	b.n	800b6ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b6da:	f7fc fe4f 	bl	800837c <HAL_GetTick>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	1ad3      	subs	r3, r2, r3
 800b6e4:	2b02      	cmp	r3, #2
 800b6e6:	d901      	bls.n	800b6ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	e078      	b.n	800b7de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b6ec:	4b3f      	ldr	r3, [pc, #252]	; (800b7ec <HAL_RCC_OscConfig+0x4d8>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d1f0      	bne.n	800b6da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	69da      	ldr	r2, [r3, #28]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6a1b      	ldr	r3, [r3, #32]
 800b700:	431a      	orrs	r2, r3
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b706:	019b      	lsls	r3, r3, #6
 800b708:	431a      	orrs	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b70e:	085b      	lsrs	r3, r3, #1
 800b710:	3b01      	subs	r3, #1
 800b712:	041b      	lsls	r3, r3, #16
 800b714:	431a      	orrs	r2, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b71a:	061b      	lsls	r3, r3, #24
 800b71c:	4933      	ldr	r1, [pc, #204]	; (800b7ec <HAL_RCC_OscConfig+0x4d8>)
 800b71e:	4313      	orrs	r3, r2
 800b720:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b722:	4b33      	ldr	r3, [pc, #204]	; (800b7f0 <HAL_RCC_OscConfig+0x4dc>)
 800b724:	2201      	movs	r2, #1
 800b726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b728:	f7fc fe28 	bl	800837c <HAL_GetTick>
 800b72c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b72e:	e008      	b.n	800b742 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b730:	f7fc fe24 	bl	800837c <HAL_GetTick>
 800b734:	4602      	mov	r2, r0
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	1ad3      	subs	r3, r2, r3
 800b73a:	2b02      	cmp	r3, #2
 800b73c:	d901      	bls.n	800b742 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b73e:	2303      	movs	r3, #3
 800b740:	e04d      	b.n	800b7de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b742:	4b2a      	ldr	r3, [pc, #168]	; (800b7ec <HAL_RCC_OscConfig+0x4d8>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d0f0      	beq.n	800b730 <HAL_RCC_OscConfig+0x41c>
 800b74e:	e045      	b.n	800b7dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b750:	4b27      	ldr	r3, [pc, #156]	; (800b7f0 <HAL_RCC_OscConfig+0x4dc>)
 800b752:	2200      	movs	r2, #0
 800b754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b756:	f7fc fe11 	bl	800837c <HAL_GetTick>
 800b75a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b75c:	e008      	b.n	800b770 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b75e:	f7fc fe0d 	bl	800837c <HAL_GetTick>
 800b762:	4602      	mov	r2, r0
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	1ad3      	subs	r3, r2, r3
 800b768:	2b02      	cmp	r3, #2
 800b76a:	d901      	bls.n	800b770 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b76c:	2303      	movs	r3, #3
 800b76e:	e036      	b.n	800b7de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b770:	4b1e      	ldr	r3, [pc, #120]	; (800b7ec <HAL_RCC_OscConfig+0x4d8>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d1f0      	bne.n	800b75e <HAL_RCC_OscConfig+0x44a>
 800b77c:	e02e      	b.n	800b7dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	699b      	ldr	r3, [r3, #24]
 800b782:	2b01      	cmp	r3, #1
 800b784:	d101      	bne.n	800b78a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e029      	b.n	800b7de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b78a:	4b18      	ldr	r3, [pc, #96]	; (800b7ec <HAL_RCC_OscConfig+0x4d8>)
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	69db      	ldr	r3, [r3, #28]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d11c      	bne.n	800b7d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d115      	bne.n	800b7d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b7b2:	4013      	ands	r3, r2
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d10d      	bne.n	800b7d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d106      	bne.n	800b7d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d001      	beq.n	800b7dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	e000      	b.n	800b7de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800b7dc:	2300      	movs	r3, #0
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3718      	adds	r7, #24
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	40007000 	.word	0x40007000
 800b7ec:	40023800 	.word	0x40023800
 800b7f0:	42470060 	.word	0x42470060

0800b7f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d101      	bne.n	800b808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b804:	2301      	movs	r3, #1
 800b806:	e0cc      	b.n	800b9a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b808:	4b68      	ldr	r3, [pc, #416]	; (800b9ac <HAL_RCC_ClockConfig+0x1b8>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f003 030f 	and.w	r3, r3, #15
 800b810:	683a      	ldr	r2, [r7, #0]
 800b812:	429a      	cmp	r2, r3
 800b814:	d90c      	bls.n	800b830 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b816:	4b65      	ldr	r3, [pc, #404]	; (800b9ac <HAL_RCC_ClockConfig+0x1b8>)
 800b818:	683a      	ldr	r2, [r7, #0]
 800b81a:	b2d2      	uxtb	r2, r2
 800b81c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b81e:	4b63      	ldr	r3, [pc, #396]	; (800b9ac <HAL_RCC_ClockConfig+0x1b8>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f003 030f 	and.w	r3, r3, #15
 800b826:	683a      	ldr	r2, [r7, #0]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d001      	beq.n	800b830 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b82c:	2301      	movs	r3, #1
 800b82e:	e0b8      	b.n	800b9a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f003 0302 	and.w	r3, r3, #2
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d020      	beq.n	800b87e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f003 0304 	and.w	r3, r3, #4
 800b844:	2b00      	cmp	r3, #0
 800b846:	d005      	beq.n	800b854 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b848:	4b59      	ldr	r3, [pc, #356]	; (800b9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	4a58      	ldr	r2, [pc, #352]	; (800b9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800b84e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b852:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f003 0308 	and.w	r3, r3, #8
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d005      	beq.n	800b86c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b860:	4b53      	ldr	r3, [pc, #332]	; (800b9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800b862:	689b      	ldr	r3, [r3, #8]
 800b864:	4a52      	ldr	r2, [pc, #328]	; (800b9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800b866:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b86a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b86c:	4b50      	ldr	r3, [pc, #320]	; (800b9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	494d      	ldr	r1, [pc, #308]	; (800b9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800b87a:	4313      	orrs	r3, r2
 800b87c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f003 0301 	and.w	r3, r3, #1
 800b886:	2b00      	cmp	r3, #0
 800b888:	d044      	beq.n	800b914 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d107      	bne.n	800b8a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b892:	4b47      	ldr	r3, [pc, #284]	; (800b9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d119      	bne.n	800b8d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e07f      	b.n	800b9a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	2b02      	cmp	r3, #2
 800b8a8:	d003      	beq.n	800b8b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b8ae:	2b03      	cmp	r3, #3
 800b8b0:	d107      	bne.n	800b8c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b8b2:	4b3f      	ldr	r3, [pc, #252]	; (800b9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d109      	bne.n	800b8d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	e06f      	b.n	800b9a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b8c2:	4b3b      	ldr	r3, [pc, #236]	; (800b9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f003 0302 	and.w	r3, r3, #2
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d101      	bne.n	800b8d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e067      	b.n	800b9a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b8d2:	4b37      	ldr	r3, [pc, #220]	; (800b9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	f023 0203 	bic.w	r2, r3, #3
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	4934      	ldr	r1, [pc, #208]	; (800b9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b8e4:	f7fc fd4a 	bl	800837c <HAL_GetTick>
 800b8e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8ea:	e00a      	b.n	800b902 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b8ec:	f7fc fd46 	bl	800837c <HAL_GetTick>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	1ad3      	subs	r3, r2, r3
 800b8f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d901      	bls.n	800b902 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b8fe:	2303      	movs	r3, #3
 800b900:	e04f      	b.n	800b9a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b902:	4b2b      	ldr	r3, [pc, #172]	; (800b9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800b904:	689b      	ldr	r3, [r3, #8]
 800b906:	f003 020c 	and.w	r2, r3, #12
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	009b      	lsls	r3, r3, #2
 800b910:	429a      	cmp	r2, r3
 800b912:	d1eb      	bne.n	800b8ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b914:	4b25      	ldr	r3, [pc, #148]	; (800b9ac <HAL_RCC_ClockConfig+0x1b8>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f003 030f 	and.w	r3, r3, #15
 800b91c:	683a      	ldr	r2, [r7, #0]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d20c      	bcs.n	800b93c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b922:	4b22      	ldr	r3, [pc, #136]	; (800b9ac <HAL_RCC_ClockConfig+0x1b8>)
 800b924:	683a      	ldr	r2, [r7, #0]
 800b926:	b2d2      	uxtb	r2, r2
 800b928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b92a:	4b20      	ldr	r3, [pc, #128]	; (800b9ac <HAL_RCC_ClockConfig+0x1b8>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f003 030f 	and.w	r3, r3, #15
 800b932:	683a      	ldr	r2, [r7, #0]
 800b934:	429a      	cmp	r2, r3
 800b936:	d001      	beq.n	800b93c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b938:	2301      	movs	r3, #1
 800b93a:	e032      	b.n	800b9a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f003 0304 	and.w	r3, r3, #4
 800b944:	2b00      	cmp	r3, #0
 800b946:	d008      	beq.n	800b95a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b948:	4b19      	ldr	r3, [pc, #100]	; (800b9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	4916      	ldr	r1, [pc, #88]	; (800b9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800b956:	4313      	orrs	r3, r2
 800b958:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f003 0308 	and.w	r3, r3, #8
 800b962:	2b00      	cmp	r3, #0
 800b964:	d009      	beq.n	800b97a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b966:	4b12      	ldr	r3, [pc, #72]	; (800b9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800b968:	689b      	ldr	r3, [r3, #8]
 800b96a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	691b      	ldr	r3, [r3, #16]
 800b972:	00db      	lsls	r3, r3, #3
 800b974:	490e      	ldr	r1, [pc, #56]	; (800b9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800b976:	4313      	orrs	r3, r2
 800b978:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b97a:	f000 f821 	bl	800b9c0 <HAL_RCC_GetSysClockFreq>
 800b97e:	4601      	mov	r1, r0
 800b980:	4b0b      	ldr	r3, [pc, #44]	; (800b9b0 <HAL_RCC_ClockConfig+0x1bc>)
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	091b      	lsrs	r3, r3, #4
 800b986:	f003 030f 	and.w	r3, r3, #15
 800b98a:	4a0a      	ldr	r2, [pc, #40]	; (800b9b4 <HAL_RCC_ClockConfig+0x1c0>)
 800b98c:	5cd3      	ldrb	r3, [r2, r3]
 800b98e:	fa21 f303 	lsr.w	r3, r1, r3
 800b992:	4a09      	ldr	r2, [pc, #36]	; (800b9b8 <HAL_RCC_ClockConfig+0x1c4>)
 800b994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b996:	4b09      	ldr	r3, [pc, #36]	; (800b9bc <HAL_RCC_ClockConfig+0x1c8>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fc fcaa 	bl	80082f4 <HAL_InitTick>

  return HAL_OK;
 800b9a0:	2300      	movs	r3, #0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop
 800b9ac:	40023c00 	.word	0x40023c00
 800b9b0:	40023800 	.word	0x40023800
 800b9b4:	08010ca0 	.word	0x08010ca0
 800b9b8:	2000000c 	.word	0x2000000c
 800b9bc:	20000010 	.word	0x20000010

0800b9c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	607b      	str	r3, [r7, #4]
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	60fb      	str	r3, [r7, #12]
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b9d6:	4b63      	ldr	r3, [pc, #396]	; (800bb64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	f003 030c 	and.w	r3, r3, #12
 800b9de:	2b04      	cmp	r3, #4
 800b9e0:	d007      	beq.n	800b9f2 <HAL_RCC_GetSysClockFreq+0x32>
 800b9e2:	2b08      	cmp	r3, #8
 800b9e4:	d008      	beq.n	800b9f8 <HAL_RCC_GetSysClockFreq+0x38>
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f040 80b4 	bne.w	800bb54 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b9ec:	4b5e      	ldr	r3, [pc, #376]	; (800bb68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b9ee:	60bb      	str	r3, [r7, #8]
       break;
 800b9f0:	e0b3      	b.n	800bb5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b9f2:	4b5e      	ldr	r3, [pc, #376]	; (800bb6c <HAL_RCC_GetSysClockFreq+0x1ac>)
 800b9f4:	60bb      	str	r3, [r7, #8]
      break;
 800b9f6:	e0b0      	b.n	800bb5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b9f8:	4b5a      	ldr	r3, [pc, #360]	; (800bb64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ba02:	4b58      	ldr	r3, [pc, #352]	; (800bb64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d04a      	beq.n	800baa4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ba0e:	4b55      	ldr	r3, [pc, #340]	; (800bb64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	099b      	lsrs	r3, r3, #6
 800ba14:	f04f 0400 	mov.w	r4, #0
 800ba18:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ba1c:	f04f 0200 	mov.w	r2, #0
 800ba20:	ea03 0501 	and.w	r5, r3, r1
 800ba24:	ea04 0602 	and.w	r6, r4, r2
 800ba28:	4629      	mov	r1, r5
 800ba2a:	4632      	mov	r2, r6
 800ba2c:	f04f 0300 	mov.w	r3, #0
 800ba30:	f04f 0400 	mov.w	r4, #0
 800ba34:	0154      	lsls	r4, r2, #5
 800ba36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ba3a:	014b      	lsls	r3, r1, #5
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	4622      	mov	r2, r4
 800ba40:	1b49      	subs	r1, r1, r5
 800ba42:	eb62 0206 	sbc.w	r2, r2, r6
 800ba46:	f04f 0300 	mov.w	r3, #0
 800ba4a:	f04f 0400 	mov.w	r4, #0
 800ba4e:	0194      	lsls	r4, r2, #6
 800ba50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800ba54:	018b      	lsls	r3, r1, #6
 800ba56:	1a5b      	subs	r3, r3, r1
 800ba58:	eb64 0402 	sbc.w	r4, r4, r2
 800ba5c:	f04f 0100 	mov.w	r1, #0
 800ba60:	f04f 0200 	mov.w	r2, #0
 800ba64:	00e2      	lsls	r2, r4, #3
 800ba66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800ba6a:	00d9      	lsls	r1, r3, #3
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	4614      	mov	r4, r2
 800ba70:	195b      	adds	r3, r3, r5
 800ba72:	eb44 0406 	adc.w	r4, r4, r6
 800ba76:	f04f 0100 	mov.w	r1, #0
 800ba7a:	f04f 0200 	mov.w	r2, #0
 800ba7e:	0262      	lsls	r2, r4, #9
 800ba80:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800ba84:	0259      	lsls	r1, r3, #9
 800ba86:	460b      	mov	r3, r1
 800ba88:	4614      	mov	r4, r2
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	4621      	mov	r1, r4
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f04f 0400 	mov.w	r4, #0
 800ba94:	461a      	mov	r2, r3
 800ba96:	4623      	mov	r3, r4
 800ba98:	f7f5 f89a 	bl	8000bd0 <__aeabi_uldivmod>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	460c      	mov	r4, r1
 800baa0:	60fb      	str	r3, [r7, #12]
 800baa2:	e049      	b.n	800bb38 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800baa4:	4b2f      	ldr	r3, [pc, #188]	; (800bb64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	099b      	lsrs	r3, r3, #6
 800baaa:	f04f 0400 	mov.w	r4, #0
 800baae:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bab2:	f04f 0200 	mov.w	r2, #0
 800bab6:	ea03 0501 	and.w	r5, r3, r1
 800baba:	ea04 0602 	and.w	r6, r4, r2
 800babe:	4629      	mov	r1, r5
 800bac0:	4632      	mov	r2, r6
 800bac2:	f04f 0300 	mov.w	r3, #0
 800bac6:	f04f 0400 	mov.w	r4, #0
 800baca:	0154      	lsls	r4, r2, #5
 800bacc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bad0:	014b      	lsls	r3, r1, #5
 800bad2:	4619      	mov	r1, r3
 800bad4:	4622      	mov	r2, r4
 800bad6:	1b49      	subs	r1, r1, r5
 800bad8:	eb62 0206 	sbc.w	r2, r2, r6
 800badc:	f04f 0300 	mov.w	r3, #0
 800bae0:	f04f 0400 	mov.w	r4, #0
 800bae4:	0194      	lsls	r4, r2, #6
 800bae6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800baea:	018b      	lsls	r3, r1, #6
 800baec:	1a5b      	subs	r3, r3, r1
 800baee:	eb64 0402 	sbc.w	r4, r4, r2
 800baf2:	f04f 0100 	mov.w	r1, #0
 800baf6:	f04f 0200 	mov.w	r2, #0
 800bafa:	00e2      	lsls	r2, r4, #3
 800bafc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bb00:	00d9      	lsls	r1, r3, #3
 800bb02:	460b      	mov	r3, r1
 800bb04:	4614      	mov	r4, r2
 800bb06:	195b      	adds	r3, r3, r5
 800bb08:	eb44 0406 	adc.w	r4, r4, r6
 800bb0c:	f04f 0100 	mov.w	r1, #0
 800bb10:	f04f 0200 	mov.w	r2, #0
 800bb14:	02a2      	lsls	r2, r4, #10
 800bb16:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bb1a:	0299      	lsls	r1, r3, #10
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	4614      	mov	r4, r2
 800bb20:	4618      	mov	r0, r3
 800bb22:	4621      	mov	r1, r4
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f04f 0400 	mov.w	r4, #0
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	4623      	mov	r3, r4
 800bb2e:	f7f5 f84f 	bl	8000bd0 <__aeabi_uldivmod>
 800bb32:	4603      	mov	r3, r0
 800bb34:	460c      	mov	r4, r1
 800bb36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bb38:	4b0a      	ldr	r3, [pc, #40]	; (800bb64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	0c1b      	lsrs	r3, r3, #16
 800bb3e:	f003 0303 	and.w	r3, r3, #3
 800bb42:	3301      	adds	r3, #1
 800bb44:	005b      	lsls	r3, r3, #1
 800bb46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb50:	60bb      	str	r3, [r7, #8]
      break;
 800bb52:	e002      	b.n	800bb5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bb54:	4b04      	ldr	r3, [pc, #16]	; (800bb68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bb56:	60bb      	str	r3, [r7, #8]
      break;
 800bb58:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bb5a:	68bb      	ldr	r3, [r7, #8]
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3714      	adds	r7, #20
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb64:	40023800 	.word	0x40023800
 800bb68:	00f42400 	.word	0x00f42400
 800bb6c:	007a1200 	.word	0x007a1200

0800bb70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bb70:	b480      	push	{r7}
 800bb72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bb74:	4b03      	ldr	r3, [pc, #12]	; (800bb84 <HAL_RCC_GetHCLKFreq+0x14>)
 800bb76:	681b      	ldr	r3, [r3, #0]
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop
 800bb84:	2000000c 	.word	0x2000000c

0800bb88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800bb8c:	f7ff fff0 	bl	800bb70 <HAL_RCC_GetHCLKFreq>
 800bb90:	4601      	mov	r1, r0
 800bb92:	4b05      	ldr	r3, [pc, #20]	; (800bba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bb94:	689b      	ldr	r3, [r3, #8]
 800bb96:	0a9b      	lsrs	r3, r3, #10
 800bb98:	f003 0307 	and.w	r3, r3, #7
 800bb9c:	4a03      	ldr	r2, [pc, #12]	; (800bbac <HAL_RCC_GetPCLK1Freq+0x24>)
 800bb9e:	5cd3      	ldrb	r3, [r2, r3]
 800bba0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	40023800 	.word	0x40023800
 800bbac:	08010cb0 	.word	0x08010cb0

0800bbb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800bbb4:	f7ff ffdc 	bl	800bb70 <HAL_RCC_GetHCLKFreq>
 800bbb8:	4601      	mov	r1, r0
 800bbba:	4b05      	ldr	r3, [pc, #20]	; (800bbd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bbbc:	689b      	ldr	r3, [r3, #8]
 800bbbe:	0b5b      	lsrs	r3, r3, #13
 800bbc0:	f003 0307 	and.w	r3, r3, #7
 800bbc4:	4a03      	ldr	r2, [pc, #12]	; (800bbd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bbc6:	5cd3      	ldrb	r3, [r2, r3]
 800bbc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	40023800 	.word	0x40023800
 800bbd4:	08010cb0 	.word	0x08010cb0

0800bbd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d101      	bne.n	800bbea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e056      	b.n	800bc98 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d106      	bne.n	800bc0a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f7fc f905 	bl	8007e14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2202      	movs	r2, #2
 800bc0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc20:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	685a      	ldr	r2, [r3, #4]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	431a      	orrs	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	431a      	orrs	r2, r3
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	431a      	orrs	r2, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	695b      	ldr	r3, [r3, #20]
 800bc3c:	431a      	orrs	r2, r3
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	699b      	ldr	r3, [r3, #24]
 800bc42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc46:	431a      	orrs	r2, r3
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	69db      	ldr	r3, [r3, #28]
 800bc4c:	431a      	orrs	r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6a1b      	ldr	r3, [r3, #32]
 800bc52:	ea42 0103 	orr.w	r1, r2, r3
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	430a      	orrs	r2, r1
 800bc60:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	699b      	ldr	r3, [r3, #24]
 800bc66:	0c1b      	lsrs	r3, r3, #16
 800bc68:	f003 0104 	and.w	r1, r3, #4
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	430a      	orrs	r2, r1
 800bc76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	69da      	ldr	r2, [r3, #28]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bc86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2201      	movs	r2, #1
 800bc92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bc96:	2300      	movs	r3, #0
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3708      	adds	r7, #8
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b088      	sub	sp, #32
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	603b      	str	r3, [r7, #0]
 800bcac:	4613      	mov	r3, r2
 800bcae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	d101      	bne.n	800bcc2 <HAL_SPI_Transmit+0x22>
 800bcbe:	2302      	movs	r3, #2
 800bcc0:	e11e      	b.n	800bf00 <HAL_SPI_Transmit+0x260>
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bcca:	f7fc fb57 	bl	800837c <HAL_GetTick>
 800bcce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bcd0:	88fb      	ldrh	r3, [r7, #6]
 800bcd2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d002      	beq.n	800bce6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bce0:	2302      	movs	r3, #2
 800bce2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bce4:	e103      	b.n	800beee <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d002      	beq.n	800bcf2 <HAL_SPI_Transmit+0x52>
 800bcec:	88fb      	ldrh	r3, [r7, #6]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d102      	bne.n	800bcf8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bcf6:	e0fa      	b.n	800beee <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2203      	movs	r2, #3
 800bcfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	2200      	movs	r2, #0
 800bd04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	68ba      	ldr	r2, [r7, #8]
 800bd0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	88fa      	ldrh	r2, [r7, #6]
 800bd10:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	88fa      	ldrh	r2, [r7, #6]
 800bd16:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2200      	movs	r2, #0
 800bd22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2200      	movs	r2, #0
 800bd28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2200      	movs	r2, #0
 800bd34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd3e:	d107      	bne.n	800bd50 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd5a:	2b40      	cmp	r3, #64	; 0x40
 800bd5c:	d007      	beq.n	800bd6e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	68db      	ldr	r3, [r3, #12]
 800bd72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd76:	d14b      	bne.n	800be10 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d002      	beq.n	800bd86 <HAL_SPI_Transmit+0xe6>
 800bd80:	8afb      	ldrh	r3, [r7, #22]
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d13e      	bne.n	800be04 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd8a:	881a      	ldrh	r2, [r3, #0]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd96:	1c9a      	adds	r2, r3, #2
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	3b01      	subs	r3, #1
 800bda4:	b29a      	uxth	r2, r3
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bdaa:	e02b      	b.n	800be04 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	f003 0302 	and.w	r3, r3, #2
 800bdb6:	2b02      	cmp	r3, #2
 800bdb8:	d112      	bne.n	800bde0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdbe:	881a      	ldrh	r2, [r3, #0]
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdca:	1c9a      	adds	r2, r3, #2
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	3b01      	subs	r3, #1
 800bdd8:	b29a      	uxth	r2, r3
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	86da      	strh	r2, [r3, #54]	; 0x36
 800bdde:	e011      	b.n	800be04 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bde0:	f7fc facc 	bl	800837c <HAL_GetTick>
 800bde4:	4602      	mov	r2, r0
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	1ad3      	subs	r3, r2, r3
 800bdea:	683a      	ldr	r2, [r7, #0]
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d803      	bhi.n	800bdf8 <HAL_SPI_Transmit+0x158>
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf6:	d102      	bne.n	800bdfe <HAL_SPI_Transmit+0x15e>
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d102      	bne.n	800be04 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800bdfe:	2303      	movs	r3, #3
 800be00:	77fb      	strb	r3, [r7, #31]
          goto error;
 800be02:	e074      	b.n	800beee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be08:	b29b      	uxth	r3, r3
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d1ce      	bne.n	800bdac <HAL_SPI_Transmit+0x10c>
 800be0e:	e04c      	b.n	800beaa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d002      	beq.n	800be1e <HAL_SPI_Transmit+0x17e>
 800be18:	8afb      	ldrh	r3, [r7, #22]
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d140      	bne.n	800bea0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	330c      	adds	r3, #12
 800be28:	7812      	ldrb	r2, [r2, #0]
 800be2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be30:	1c5a      	adds	r2, r3, #1
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	3b01      	subs	r3, #1
 800be3e:	b29a      	uxth	r2, r3
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800be44:	e02c      	b.n	800bea0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	689b      	ldr	r3, [r3, #8]
 800be4c:	f003 0302 	and.w	r3, r3, #2
 800be50:	2b02      	cmp	r3, #2
 800be52:	d113      	bne.n	800be7c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	330c      	adds	r3, #12
 800be5e:	7812      	ldrb	r2, [r2, #0]
 800be60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be66:	1c5a      	adds	r2, r3, #1
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be70:	b29b      	uxth	r3, r3
 800be72:	3b01      	subs	r3, #1
 800be74:	b29a      	uxth	r2, r3
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	86da      	strh	r2, [r3, #54]	; 0x36
 800be7a:	e011      	b.n	800bea0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be7c:	f7fc fa7e 	bl	800837c <HAL_GetTick>
 800be80:	4602      	mov	r2, r0
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	1ad3      	subs	r3, r2, r3
 800be86:	683a      	ldr	r2, [r7, #0]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d803      	bhi.n	800be94 <HAL_SPI_Transmit+0x1f4>
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be92:	d102      	bne.n	800be9a <HAL_SPI_Transmit+0x1fa>
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d102      	bne.n	800bea0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800be9a:	2303      	movs	r3, #3
 800be9c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800be9e:	e026      	b.n	800beee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d1cd      	bne.n	800be46 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800beaa:	69ba      	ldr	r2, [r7, #24]
 800beac:	6839      	ldr	r1, [r7, #0]
 800beae:	68f8      	ldr	r0, [r7, #12]
 800beb0:	f000 fcc4 	bl	800c83c <SPI_EndRxTxTransaction>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d002      	beq.n	800bec0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2220      	movs	r2, #32
 800bebe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d10a      	bne.n	800bede <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bec8:	2300      	movs	r3, #0
 800beca:	613b      	str	r3, [r7, #16]
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	613b      	str	r3, [r7, #16]
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	689b      	ldr	r3, [r3, #8]
 800beda:	613b      	str	r3, [r7, #16]
 800bedc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d002      	beq.n	800beec <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800bee6:	2301      	movs	r3, #1
 800bee8:	77fb      	strb	r3, [r7, #31]
 800beea:	e000      	b.n	800beee <HAL_SPI_Transmit+0x24e>
  }

error:
 800beec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2201      	movs	r2, #1
 800bef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2200      	movs	r2, #0
 800befa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800befe:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3720      	adds	r7, #32
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b088      	sub	sp, #32
 800bf0c:	af02      	add	r7, sp, #8
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	603b      	str	r3, [r7, #0]
 800bf14:	4613      	mov	r3, r2
 800bf16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf24:	d112      	bne.n	800bf4c <HAL_SPI_Receive+0x44>
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d10e      	bne.n	800bf4c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2204      	movs	r2, #4
 800bf32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bf36:	88fa      	ldrh	r2, [r7, #6]
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	9300      	str	r3, [sp, #0]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	68ba      	ldr	r2, [r7, #8]
 800bf40:	68b9      	ldr	r1, [r7, #8]
 800bf42:	68f8      	ldr	r0, [r7, #12]
 800bf44:	f000 f8e9 	bl	800c11a <HAL_SPI_TransmitReceive>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	e0e2      	b.n	800c112 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d101      	bne.n	800bf5a <HAL_SPI_Receive+0x52>
 800bf56:	2302      	movs	r3, #2
 800bf58:	e0db      	b.n	800c112 <HAL_SPI_Receive+0x20a>
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bf62:	f7fc fa0b 	bl	800837c <HAL_GetTick>
 800bf66:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d002      	beq.n	800bf7a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800bf74:	2302      	movs	r3, #2
 800bf76:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bf78:	e0c2      	b.n	800c100 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d002      	beq.n	800bf86 <HAL_SPI_Receive+0x7e>
 800bf80:	88fb      	ldrh	r3, [r7, #6]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d102      	bne.n	800bf8c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800bf86:	2301      	movs	r3, #1
 800bf88:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bf8a:	e0b9      	b.n	800c100 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2204      	movs	r2, #4
 800bf90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2200      	movs	r2, #0
 800bf98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	68ba      	ldr	r2, [r7, #8]
 800bf9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	88fa      	ldrh	r2, [r7, #6]
 800bfa4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	88fa      	ldrh	r2, [r7, #6]
 800bfaa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfd2:	d107      	bne.n	800bfe4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bfe2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfee:	2b40      	cmp	r3, #64	; 0x40
 800bff0:	d007      	beq.n	800c002 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c000:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d162      	bne.n	800c0d0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c00a:	e02e      	b.n	800c06a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	f003 0301 	and.w	r3, r3, #1
 800c016:	2b01      	cmp	r3, #1
 800c018:	d115      	bne.n	800c046 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f103 020c 	add.w	r2, r3, #12
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c026:	7812      	ldrb	r2, [r2, #0]
 800c028:	b2d2      	uxtb	r2, r2
 800c02a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c030:	1c5a      	adds	r2, r3, #1
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	3b01      	subs	r3, #1
 800c03e:	b29a      	uxth	r2, r3
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c044:	e011      	b.n	800c06a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c046:	f7fc f999 	bl	800837c <HAL_GetTick>
 800c04a:	4602      	mov	r2, r0
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	1ad3      	subs	r3, r2, r3
 800c050:	683a      	ldr	r2, [r7, #0]
 800c052:	429a      	cmp	r2, r3
 800c054:	d803      	bhi.n	800c05e <HAL_SPI_Receive+0x156>
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c05c:	d102      	bne.n	800c064 <HAL_SPI_Receive+0x15c>
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d102      	bne.n	800c06a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800c064:	2303      	movs	r3, #3
 800c066:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c068:	e04a      	b.n	800c100 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c06e:	b29b      	uxth	r3, r3
 800c070:	2b00      	cmp	r3, #0
 800c072:	d1cb      	bne.n	800c00c <HAL_SPI_Receive+0x104>
 800c074:	e031      	b.n	800c0da <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	f003 0301 	and.w	r3, r3, #1
 800c080:	2b01      	cmp	r3, #1
 800c082:	d113      	bne.n	800c0ac <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	68da      	ldr	r2, [r3, #12]
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c08e:	b292      	uxth	r2, r2
 800c090:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c096:	1c9a      	adds	r2, r3, #2
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c0aa:	e011      	b.n	800c0d0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0ac:	f7fc f966 	bl	800837c <HAL_GetTick>
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	1ad3      	subs	r3, r2, r3
 800c0b6:	683a      	ldr	r2, [r7, #0]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d803      	bhi.n	800c0c4 <HAL_SPI_Receive+0x1bc>
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c2:	d102      	bne.n	800c0ca <HAL_SPI_Receive+0x1c2>
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d102      	bne.n	800c0d0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800c0ca:	2303      	movs	r3, #3
 800c0cc:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c0ce:	e017      	b.n	800c100 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1cd      	bne.n	800c076 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c0da:	693a      	ldr	r2, [r7, #16]
 800c0dc:	6839      	ldr	r1, [r7, #0]
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	f000 fb46 	bl	800c770 <SPI_EndRxTransaction>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d002      	beq.n	800c0f0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2220      	movs	r2, #32
 800c0ee:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d002      	beq.n	800c0fe <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	75fb      	strb	r3, [r7, #23]
 800c0fc:	e000      	b.n	800c100 <HAL_SPI_Receive+0x1f8>
  }

error :
 800c0fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2201      	movs	r2, #1
 800c104:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2200      	movs	r2, #0
 800c10c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c110:	7dfb      	ldrb	r3, [r7, #23]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3718      	adds	r7, #24
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}

0800c11a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b08c      	sub	sp, #48	; 0x30
 800c11e:	af00      	add	r7, sp, #0
 800c120:	60f8      	str	r0, [r7, #12]
 800c122:	60b9      	str	r1, [r7, #8]
 800c124:	607a      	str	r2, [r7, #4]
 800c126:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c128:	2301      	movs	r3, #1
 800c12a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c12c:	2300      	movs	r3, #0
 800c12e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d101      	bne.n	800c140 <HAL_SPI_TransmitReceive+0x26>
 800c13c:	2302      	movs	r3, #2
 800c13e:	e18a      	b.n	800c456 <HAL_SPI_TransmitReceive+0x33c>
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2201      	movs	r2, #1
 800c144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c148:	f7fc f918 	bl	800837c <HAL_GetTick>
 800c14c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c15e:	887b      	ldrh	r3, [r7, #2]
 800c160:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c162:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c166:	2b01      	cmp	r3, #1
 800c168:	d00f      	beq.n	800c18a <HAL_SPI_TransmitReceive+0x70>
 800c16a:	69fb      	ldr	r3, [r7, #28]
 800c16c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c170:	d107      	bne.n	800c182 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d103      	bne.n	800c182 <HAL_SPI_TransmitReceive+0x68>
 800c17a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c17e:	2b04      	cmp	r3, #4
 800c180:	d003      	beq.n	800c18a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c182:	2302      	movs	r3, #2
 800c184:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c188:	e15b      	b.n	800c442 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d005      	beq.n	800c19c <HAL_SPI_TransmitReceive+0x82>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d002      	beq.n	800c19c <HAL_SPI_TransmitReceive+0x82>
 800c196:	887b      	ldrh	r3, [r7, #2]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d103      	bne.n	800c1a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c19c:	2301      	movs	r3, #1
 800c19e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c1a2:	e14e      	b.n	800c442 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	2b04      	cmp	r3, #4
 800c1ae:	d003      	beq.n	800c1b8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2205      	movs	r2, #5
 800c1b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	887a      	ldrh	r2, [r7, #2]
 800c1c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	887a      	ldrh	r2, [r7, #2]
 800c1ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	68ba      	ldr	r2, [r7, #8]
 800c1d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	887a      	ldrh	r2, [r7, #2]
 800c1da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	887a      	ldrh	r2, [r7, #2]
 800c1e0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1f8:	2b40      	cmp	r3, #64	; 0x40
 800c1fa:	d007      	beq.n	800c20c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c20a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c214:	d178      	bne.n	800c308 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d002      	beq.n	800c224 <HAL_SPI_TransmitReceive+0x10a>
 800c21e:	8b7b      	ldrh	r3, [r7, #26]
 800c220:	2b01      	cmp	r3, #1
 800c222:	d166      	bne.n	800c2f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c228:	881a      	ldrh	r2, [r3, #0]
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c234:	1c9a      	adds	r2, r3, #2
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c23e:	b29b      	uxth	r3, r3
 800c240:	3b01      	subs	r3, #1
 800c242:	b29a      	uxth	r2, r3
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c248:	e053      	b.n	800c2f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	689b      	ldr	r3, [r3, #8]
 800c250:	f003 0302 	and.w	r3, r3, #2
 800c254:	2b02      	cmp	r3, #2
 800c256:	d11b      	bne.n	800c290 <HAL_SPI_TransmitReceive+0x176>
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d016      	beq.n	800c290 <HAL_SPI_TransmitReceive+0x176>
 800c262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c264:	2b01      	cmp	r3, #1
 800c266:	d113      	bne.n	800c290 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c26c:	881a      	ldrh	r2, [r3, #0]
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c278:	1c9a      	adds	r2, r3, #2
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c282:	b29b      	uxth	r3, r3
 800c284:	3b01      	subs	r3, #1
 800c286:	b29a      	uxth	r2, r3
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c28c:	2300      	movs	r3, #0
 800c28e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	689b      	ldr	r3, [r3, #8]
 800c296:	f003 0301 	and.w	r3, r3, #1
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d119      	bne.n	800c2d2 <HAL_SPI_TransmitReceive+0x1b8>
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d014      	beq.n	800c2d2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	68da      	ldr	r2, [r3, #12]
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2b2:	b292      	uxth	r2, r2
 800c2b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ba:	1c9a      	adds	r2, r3, #2
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	b29a      	uxth	r2, r3
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c2d2:	f7fc f853 	bl	800837c <HAL_GetTick>
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2da:	1ad3      	subs	r3, r2, r3
 800c2dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d807      	bhi.n	800c2f2 <HAL_SPI_TransmitReceive+0x1d8>
 800c2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2e8:	d003      	beq.n	800c2f2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c2ea:	2303      	movs	r3, #3
 800c2ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c2f0:	e0a7      	b.n	800c442 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d1a6      	bne.n	800c24a <HAL_SPI_TransmitReceive+0x130>
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c300:	b29b      	uxth	r3, r3
 800c302:	2b00      	cmp	r3, #0
 800c304:	d1a1      	bne.n	800c24a <HAL_SPI_TransmitReceive+0x130>
 800c306:	e07c      	b.n	800c402 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d002      	beq.n	800c316 <HAL_SPI_TransmitReceive+0x1fc>
 800c310:	8b7b      	ldrh	r3, [r7, #26]
 800c312:	2b01      	cmp	r3, #1
 800c314:	d16b      	bne.n	800c3ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	330c      	adds	r3, #12
 800c320:	7812      	ldrb	r2, [r2, #0]
 800c322:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c328:	1c5a      	adds	r2, r3, #1
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c332:	b29b      	uxth	r3, r3
 800c334:	3b01      	subs	r3, #1
 800c336:	b29a      	uxth	r2, r3
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c33c:	e057      	b.n	800c3ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	689b      	ldr	r3, [r3, #8]
 800c344:	f003 0302 	and.w	r3, r3, #2
 800c348:	2b02      	cmp	r3, #2
 800c34a:	d11c      	bne.n	800c386 <HAL_SPI_TransmitReceive+0x26c>
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c350:	b29b      	uxth	r3, r3
 800c352:	2b00      	cmp	r3, #0
 800c354:	d017      	beq.n	800c386 <HAL_SPI_TransmitReceive+0x26c>
 800c356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d114      	bne.n	800c386 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	330c      	adds	r3, #12
 800c366:	7812      	ldrb	r2, [r2, #0]
 800c368:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c36e:	1c5a      	adds	r2, r3, #1
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c378:	b29b      	uxth	r3, r3
 800c37a:	3b01      	subs	r3, #1
 800c37c:	b29a      	uxth	r2, r3
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c382:	2300      	movs	r3, #0
 800c384:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	689b      	ldr	r3, [r3, #8]
 800c38c:	f003 0301 	and.w	r3, r3, #1
 800c390:	2b01      	cmp	r3, #1
 800c392:	d119      	bne.n	800c3c8 <HAL_SPI_TransmitReceive+0x2ae>
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c398:	b29b      	uxth	r3, r3
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d014      	beq.n	800c3c8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	68da      	ldr	r2, [r3, #12]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3a8:	b2d2      	uxtb	r2, r2
 800c3aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b0:	1c5a      	adds	r2, r3, #1
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	b29a      	uxth	r2, r3
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c3c4:	2301      	movs	r3, #1
 800c3c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c3c8:	f7fb ffd8 	bl	800837c <HAL_GetTick>
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d0:	1ad3      	subs	r3, r2, r3
 800c3d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d803      	bhi.n	800c3e0 <HAL_SPI_TransmitReceive+0x2c6>
 800c3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3de:	d102      	bne.n	800c3e6 <HAL_SPI_TransmitReceive+0x2cc>
 800c3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d103      	bne.n	800c3ee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c3e6:	2303      	movs	r3, #3
 800c3e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c3ec:	e029      	b.n	800c442 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d1a2      	bne.n	800c33e <HAL_SPI_TransmitReceive+0x224>
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d19d      	bne.n	800c33e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c404:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c406:	68f8      	ldr	r0, [r7, #12]
 800c408:	f000 fa18 	bl	800c83c <SPI_EndRxTxTransaction>
 800c40c:	4603      	mov	r3, r0
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d006      	beq.n	800c420 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c412:	2301      	movs	r3, #1
 800c414:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2220      	movs	r2, #32
 800c41c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c41e:	e010      	b.n	800c442 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	689b      	ldr	r3, [r3, #8]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d10b      	bne.n	800c440 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c428:	2300      	movs	r3, #0
 800c42a:	617b      	str	r3, [r7, #20]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	617b      	str	r3, [r7, #20]
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	689b      	ldr	r3, [r3, #8]
 800c43a:	617b      	str	r3, [r7, #20]
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	e000      	b.n	800c442 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c440:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	2201      	movs	r2, #1
 800c446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2200      	movs	r2, #0
 800c44e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c452:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c456:	4618      	mov	r0, r3
 800c458:	3730      	adds	r7, #48	; 0x30
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
	...

0800c460 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b088      	sub	sp, #32
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	689b      	ldr	r3, [r3, #8]
 800c476:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	099b      	lsrs	r3, r3, #6
 800c47c:	f003 0301 	and.w	r3, r3, #1
 800c480:	2b00      	cmp	r3, #0
 800c482:	d10f      	bne.n	800c4a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d00a      	beq.n	800c4a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	099b      	lsrs	r3, r3, #6
 800c492:	f003 0301 	and.w	r3, r3, #1
 800c496:	2b00      	cmp	r3, #0
 800c498:	d004      	beq.n	800c4a4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	4798      	blx	r3
    return;
 800c4a2:	e0d8      	b.n	800c656 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	085b      	lsrs	r3, r3, #1
 800c4a8:	f003 0301 	and.w	r3, r3, #1
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d00a      	beq.n	800c4c6 <HAL_SPI_IRQHandler+0x66>
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	09db      	lsrs	r3, r3, #7
 800c4b4:	f003 0301 	and.w	r3, r3, #1
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d004      	beq.n	800c4c6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	4798      	blx	r3
    return;
 800c4c4:	e0c7      	b.n	800c656 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	095b      	lsrs	r3, r3, #5
 800c4ca:	f003 0301 	and.w	r3, r3, #1
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d10c      	bne.n	800c4ec <HAL_SPI_IRQHandler+0x8c>
 800c4d2:	69bb      	ldr	r3, [r7, #24]
 800c4d4:	099b      	lsrs	r3, r3, #6
 800c4d6:	f003 0301 	and.w	r3, r3, #1
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d106      	bne.n	800c4ec <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c4de:	69bb      	ldr	r3, [r7, #24]
 800c4e0:	0a1b      	lsrs	r3, r3, #8
 800c4e2:	f003 0301 	and.w	r3, r3, #1
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f000 80b5 	beq.w	800c656 <HAL_SPI_IRQHandler+0x1f6>
 800c4ec:	69fb      	ldr	r3, [r7, #28]
 800c4ee:	095b      	lsrs	r3, r3, #5
 800c4f0:	f003 0301 	and.w	r3, r3, #1
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	f000 80ae 	beq.w	800c656 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c4fa:	69bb      	ldr	r3, [r7, #24]
 800c4fc:	099b      	lsrs	r3, r3, #6
 800c4fe:	f003 0301 	and.w	r3, r3, #1
 800c502:	2b00      	cmp	r3, #0
 800c504:	d023      	beq.n	800c54e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	2b03      	cmp	r3, #3
 800c510:	d011      	beq.n	800c536 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c516:	f043 0204 	orr.w	r2, r3, #4
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c51e:	2300      	movs	r3, #0
 800c520:	617b      	str	r3, [r7, #20]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	68db      	ldr	r3, [r3, #12]
 800c528:	617b      	str	r3, [r7, #20]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	689b      	ldr	r3, [r3, #8]
 800c530:	617b      	str	r3, [r7, #20]
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	e00b      	b.n	800c54e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c536:	2300      	movs	r3, #0
 800c538:	613b      	str	r3, [r7, #16]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	68db      	ldr	r3, [r3, #12]
 800c540:	613b      	str	r3, [r7, #16]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	689b      	ldr	r3, [r3, #8]
 800c548:	613b      	str	r3, [r7, #16]
 800c54a:	693b      	ldr	r3, [r7, #16]
        return;
 800c54c:	e083      	b.n	800c656 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	095b      	lsrs	r3, r3, #5
 800c552:	f003 0301 	and.w	r3, r3, #1
 800c556:	2b00      	cmp	r3, #0
 800c558:	d014      	beq.n	800c584 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c55e:	f043 0201 	orr.w	r2, r3, #1
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c566:	2300      	movs	r3, #0
 800c568:	60fb      	str	r3, [r7, #12]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	689b      	ldr	r3, [r3, #8]
 800c570:	60fb      	str	r3, [r7, #12]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	681a      	ldr	r2, [r3, #0]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c580:	601a      	str	r2, [r3, #0]
 800c582:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	0a1b      	lsrs	r3, r3, #8
 800c588:	f003 0301 	and.w	r3, r3, #1
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d00c      	beq.n	800c5aa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c594:	f043 0208 	orr.w	r2, r3, #8
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c59c:	2300      	movs	r3, #0
 800c59e:	60bb      	str	r3, [r7, #8]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	60bb      	str	r3, [r7, #8]
 800c5a8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d050      	beq.n	800c654 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	685a      	ldr	r2, [r3, #4]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c5c0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	f003 0302 	and.w	r3, r3, #2
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d104      	bne.n	800c5de <HAL_SPI_IRQHandler+0x17e>
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	f003 0301 	and.w	r3, r3, #1
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d034      	beq.n	800c648 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	685a      	ldr	r2, [r3, #4]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f022 0203 	bic.w	r2, r2, #3
 800c5ec:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d011      	beq.n	800c61a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5fa:	4a18      	ldr	r2, [pc, #96]	; (800c65c <HAL_SPI_IRQHandler+0x1fc>)
 800c5fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c602:	4618      	mov	r0, r3
 800c604:	f7fc fb0a 	bl	8008c1c <HAL_DMA_Abort_IT>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d005      	beq.n	800c61a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c612:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d016      	beq.n	800c650 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c626:	4a0d      	ldr	r2, [pc, #52]	; (800c65c <HAL_SPI_IRQHandler+0x1fc>)
 800c628:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c62e:	4618      	mov	r0, r3
 800c630:	f7fc faf4 	bl	8008c1c <HAL_DMA_Abort_IT>
 800c634:	4603      	mov	r3, r0
 800c636:	2b00      	cmp	r3, #0
 800c638:	d00a      	beq.n	800c650 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c63e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800c646:	e003      	b.n	800c650 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 f809 	bl	800c660 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c64e:	e000      	b.n	800c652 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800c650:	bf00      	nop
    return;
 800c652:	bf00      	nop
 800c654:	bf00      	nop
  }
}
 800c656:	3720      	adds	r7, #32
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	0800c675 	.word	0x0800c675

0800c660 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c660:	b480      	push	{r7}
 800c662:	b083      	sub	sp, #12
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c668:	bf00      	nop
 800c66a:	370c      	adds	r7, #12
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr

0800c674 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c680:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2200      	movs	r2, #0
 800c686:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2200      	movs	r2, #0
 800c68c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c68e:	68f8      	ldr	r0, [r7, #12]
 800c690:	f7ff ffe6 	bl	800c660 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c694:	bf00      	nop
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	603b      	str	r3, [r7, #0]
 800c6a8:	4613      	mov	r3, r2
 800c6aa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c6ac:	e04c      	b.n	800c748 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6b4:	d048      	beq.n	800c748 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c6b6:	f7fb fe61 	bl	800837c <HAL_GetTick>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	69bb      	ldr	r3, [r7, #24]
 800c6be:	1ad3      	subs	r3, r2, r3
 800c6c0:	683a      	ldr	r2, [r7, #0]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d902      	bls.n	800c6cc <SPI_WaitFlagStateUntilTimeout+0x30>
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d13d      	bne.n	800c748 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	685a      	ldr	r2, [r3, #4]
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c6da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c6e4:	d111      	bne.n	800c70a <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6ee:	d004      	beq.n	800c6fa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	689b      	ldr	r3, [r3, #8]
 800c6f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6f8:	d107      	bne.n	800c70a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c708:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c70e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c712:	d10f      	bne.n	800c734 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	681a      	ldr	r2, [r3, #0]
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c722:	601a      	str	r2, [r3, #0]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c732:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2201      	movs	r2, #1
 800c738:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	2200      	movs	r2, #0
 800c740:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c744:	2303      	movs	r3, #3
 800c746:	e00f      	b.n	800c768 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	689a      	ldr	r2, [r3, #8]
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	4013      	ands	r3, r2
 800c752:	68ba      	ldr	r2, [r7, #8]
 800c754:	429a      	cmp	r2, r3
 800c756:	bf0c      	ite	eq
 800c758:	2301      	moveq	r3, #1
 800c75a:	2300      	movne	r3, #0
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	461a      	mov	r2, r3
 800c760:	79fb      	ldrb	r3, [r7, #7]
 800c762:	429a      	cmp	r2, r3
 800c764:	d1a3      	bne.n	800c6ae <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c766:	2300      	movs	r3, #0
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3710      	adds	r7, #16
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b086      	sub	sp, #24
 800c774:	af02      	add	r7, sp, #8
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c784:	d111      	bne.n	800c7aa <SPI_EndRxTransaction+0x3a>
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	689b      	ldr	r3, [r3, #8]
 800c78a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c78e:	d004      	beq.n	800c79a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	689b      	ldr	r3, [r3, #8]
 800c794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c798:	d107      	bne.n	800c7aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	681a      	ldr	r2, [r3, #0]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c7b2:	d12a      	bne.n	800c80a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7bc:	d012      	beq.n	800c7e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	9300      	str	r3, [sp, #0]
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	2180      	movs	r1, #128	; 0x80
 800c7c8:	68f8      	ldr	r0, [r7, #12]
 800c7ca:	f7ff ff67 	bl	800c69c <SPI_WaitFlagStateUntilTimeout>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d02d      	beq.n	800c830 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7d8:	f043 0220 	orr.w	r2, r3, #32
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c7e0:	2303      	movs	r3, #3
 800c7e2:	e026      	b.n	800c832 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	9300      	str	r3, [sp, #0]
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	2101      	movs	r1, #1
 800c7ee:	68f8      	ldr	r0, [r7, #12]
 800c7f0:	f7ff ff54 	bl	800c69c <SPI_WaitFlagStateUntilTimeout>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d01a      	beq.n	800c830 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7fe:	f043 0220 	orr.w	r2, r3, #32
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c806:	2303      	movs	r3, #3
 800c808:	e013      	b.n	800c832 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	9300      	str	r3, [sp, #0]
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	2200      	movs	r2, #0
 800c812:	2101      	movs	r1, #1
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	f7ff ff41 	bl	800c69c <SPI_WaitFlagStateUntilTimeout>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d007      	beq.n	800c830 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c824:	f043 0220 	orr.w	r2, r3, #32
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c82c:	2303      	movs	r3, #3
 800c82e:	e000      	b.n	800c832 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c830:	2300      	movs	r3, #0
}
 800c832:	4618      	mov	r0, r3
 800c834:	3710      	adds	r7, #16
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
	...

0800c83c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b088      	sub	sp, #32
 800c840:	af02      	add	r7, sp, #8
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c848:	4b1b      	ldr	r3, [pc, #108]	; (800c8b8 <SPI_EndRxTxTransaction+0x7c>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a1b      	ldr	r2, [pc, #108]	; (800c8bc <SPI_EndRxTxTransaction+0x80>)
 800c84e:	fba2 2303 	umull	r2, r3, r2, r3
 800c852:	0d5b      	lsrs	r3, r3, #21
 800c854:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c858:	fb02 f303 	mul.w	r3, r2, r3
 800c85c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	685b      	ldr	r3, [r3, #4]
 800c862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c866:	d112      	bne.n	800c88e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	9300      	str	r3, [sp, #0]
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	2200      	movs	r2, #0
 800c870:	2180      	movs	r1, #128	; 0x80
 800c872:	68f8      	ldr	r0, [r7, #12]
 800c874:	f7ff ff12 	bl	800c69c <SPI_WaitFlagStateUntilTimeout>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d016      	beq.n	800c8ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c882:	f043 0220 	orr.w	r2, r3, #32
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c88a:	2303      	movs	r3, #3
 800c88c:	e00f      	b.n	800c8ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d00a      	beq.n	800c8aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	3b01      	subs	r3, #1
 800c898:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8a4:	2b80      	cmp	r3, #128	; 0x80
 800c8a6:	d0f2      	beq.n	800c88e <SPI_EndRxTxTransaction+0x52>
 800c8a8:	e000      	b.n	800c8ac <SPI_EndRxTxTransaction+0x70>
        break;
 800c8aa:	bf00      	nop
  }

  return HAL_OK;
 800c8ac:	2300      	movs	r3, #0
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3718      	adds	r7, #24
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	2000000c 	.word	0x2000000c
 800c8bc:	165e9f81 	.word	0x165e9f81

0800c8c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d101      	bne.n	800c8d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	e01d      	b.n	800c90e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8d8:	b2db      	uxtb	r3, r3
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d106      	bne.n	800c8ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f7fb fae4 	bl	8007eb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2202      	movs	r2, #2
 800c8f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	3304      	adds	r3, #4
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	4610      	mov	r0, r2
 800c900:	f000 fb34 	bl	800cf6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2201      	movs	r2, #1
 800c908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c90c:	2300      	movs	r3, #0
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3708      	adds	r7, #8
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}

0800c916 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b082      	sub	sp, #8
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d101      	bne.n	800c928 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c924:	2301      	movs	r3, #1
 800c926:	e01d      	b.n	800c964 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c92e:	b2db      	uxtb	r3, r3
 800c930:	2b00      	cmp	r3, #0
 800c932:	d106      	bne.n	800c942 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2200      	movs	r2, #0
 800c938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 f815 	bl	800c96c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2202      	movs	r2, #2
 800c946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681a      	ldr	r2, [r3, #0]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	3304      	adds	r3, #4
 800c952:	4619      	mov	r1, r3
 800c954:	4610      	mov	r0, r2
 800c956:	f000 fb09 	bl	800cf6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2201      	movs	r2, #1
 800c95e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c962:	2300      	movs	r3, #0
}
 800c964:	4618      	mov	r0, r3
 800c966:	3708      	adds	r7, #8
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b083      	sub	sp, #12
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c974:	bf00      	nop
 800c976:	370c      	adds	r7, #12
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr

0800c980 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2201      	movs	r2, #1
 800c990:	6839      	ldr	r1, [r7, #0]
 800c992:	4618      	mov	r0, r3
 800c994:	f000 fdd4 	bl	800d540 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a15      	ldr	r2, [pc, #84]	; (800c9f4 <HAL_TIM_PWM_Start+0x74>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d004      	beq.n	800c9ac <HAL_TIM_PWM_Start+0x2c>
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4a14      	ldr	r2, [pc, #80]	; (800c9f8 <HAL_TIM_PWM_Start+0x78>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d101      	bne.n	800c9b0 <HAL_TIM_PWM_Start+0x30>
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	e000      	b.n	800c9b2 <HAL_TIM_PWM_Start+0x32>
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d007      	beq.n	800c9c6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c9c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	689b      	ldr	r3, [r3, #8]
 800c9cc:	f003 0307 	and.w	r3, r3, #7
 800c9d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2b06      	cmp	r3, #6
 800c9d6:	d007      	beq.n	800c9e8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f042 0201 	orr.w	r2, r2, #1
 800c9e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c9e8:	2300      	movs	r3, #0
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3710      	adds	r7, #16
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	40010000 	.word	0x40010000
 800c9f8:	40010400 	.word	0x40010400

0800c9fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	691b      	ldr	r3, [r3, #16]
 800ca0a:	f003 0302 	and.w	r3, r3, #2
 800ca0e:	2b02      	cmp	r3, #2
 800ca10:	d122      	bne.n	800ca58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	68db      	ldr	r3, [r3, #12]
 800ca18:	f003 0302 	and.w	r3, r3, #2
 800ca1c:	2b02      	cmp	r3, #2
 800ca1e:	d11b      	bne.n	800ca58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f06f 0202 	mvn.w	r2, #2
 800ca28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	699b      	ldr	r3, [r3, #24]
 800ca36:	f003 0303 	and.w	r3, r3, #3
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d003      	beq.n	800ca46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 fa75 	bl	800cf2e <HAL_TIM_IC_CaptureCallback>
 800ca44:	e005      	b.n	800ca52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f000 fa67 	bl	800cf1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f000 fa78 	bl	800cf42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	691b      	ldr	r3, [r3, #16]
 800ca5e:	f003 0304 	and.w	r3, r3, #4
 800ca62:	2b04      	cmp	r3, #4
 800ca64:	d122      	bne.n	800caac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	f003 0304 	and.w	r3, r3, #4
 800ca70:	2b04      	cmp	r3, #4
 800ca72:	d11b      	bne.n	800caac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f06f 0204 	mvn.w	r2, #4
 800ca7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2202      	movs	r2, #2
 800ca82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	699b      	ldr	r3, [r3, #24]
 800ca8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d003      	beq.n	800ca9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 fa4b 	bl	800cf2e <HAL_TIM_IC_CaptureCallback>
 800ca98:	e005      	b.n	800caa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 fa3d 	bl	800cf1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f000 fa4e 	bl	800cf42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2200      	movs	r2, #0
 800caaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	691b      	ldr	r3, [r3, #16]
 800cab2:	f003 0308 	and.w	r3, r3, #8
 800cab6:	2b08      	cmp	r3, #8
 800cab8:	d122      	bne.n	800cb00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	f003 0308 	and.w	r3, r3, #8
 800cac4:	2b08      	cmp	r3, #8
 800cac6:	d11b      	bne.n	800cb00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f06f 0208 	mvn.w	r2, #8
 800cad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2204      	movs	r2, #4
 800cad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	69db      	ldr	r3, [r3, #28]
 800cade:	f003 0303 	and.w	r3, r3, #3
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d003      	beq.n	800caee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 fa21 	bl	800cf2e <HAL_TIM_IC_CaptureCallback>
 800caec:	e005      	b.n	800cafa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f000 fa13 	bl	800cf1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 fa24 	bl	800cf42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2200      	movs	r2, #0
 800cafe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	691b      	ldr	r3, [r3, #16]
 800cb06:	f003 0310 	and.w	r3, r3, #16
 800cb0a:	2b10      	cmp	r3, #16
 800cb0c:	d122      	bne.n	800cb54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	68db      	ldr	r3, [r3, #12]
 800cb14:	f003 0310 	and.w	r3, r3, #16
 800cb18:	2b10      	cmp	r3, #16
 800cb1a:	d11b      	bne.n	800cb54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f06f 0210 	mvn.w	r2, #16
 800cb24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2208      	movs	r2, #8
 800cb2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	69db      	ldr	r3, [r3, #28]
 800cb32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d003      	beq.n	800cb42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 f9f7 	bl	800cf2e <HAL_TIM_IC_CaptureCallback>
 800cb40:	e005      	b.n	800cb4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 f9e9 	bl	800cf1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 f9fa 	bl	800cf42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2200      	movs	r2, #0
 800cb52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	691b      	ldr	r3, [r3, #16]
 800cb5a:	f003 0301 	and.w	r3, r3, #1
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d10e      	bne.n	800cb80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	f003 0301 	and.w	r3, r3, #1
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	d107      	bne.n	800cb80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f06f 0201 	mvn.w	r2, #1
 800cb78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f000 f9c3 	bl	800cf06 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	691b      	ldr	r3, [r3, #16]
 800cb86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb8a:	2b80      	cmp	r3, #128	; 0x80
 800cb8c:	d10e      	bne.n	800cbac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb98:	2b80      	cmp	r3, #128	; 0x80
 800cb9a:	d107      	bne.n	800cbac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f000 fd76 	bl	800d698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	691b      	ldr	r3, [r3, #16]
 800cbb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbb6:	2b40      	cmp	r3, #64	; 0x40
 800cbb8:	d10e      	bne.n	800cbd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbc4:	2b40      	cmp	r3, #64	; 0x40
 800cbc6:	d107      	bne.n	800cbd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cbd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f000 f9bf 	bl	800cf56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	691b      	ldr	r3, [r3, #16]
 800cbde:	f003 0320 	and.w	r3, r3, #32
 800cbe2:	2b20      	cmp	r3, #32
 800cbe4:	d10e      	bne.n	800cc04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	68db      	ldr	r3, [r3, #12]
 800cbec:	f003 0320 	and.w	r3, r3, #32
 800cbf0:	2b20      	cmp	r3, #32
 800cbf2:	d107      	bne.n	800cc04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f06f 0220 	mvn.w	r2, #32
 800cbfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 fd40 	bl	800d684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cc04:	bf00      	nop
 800cc06:	3708      	adds	r7, #8
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d101      	bne.n	800cc26 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800cc22:	2302      	movs	r3, #2
 800cc24:	e0b4      	b.n	800cd90 <HAL_TIM_PWM_ConfigChannel+0x184>
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2201      	movs	r2, #1
 800cc2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2202      	movs	r2, #2
 800cc32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2b0c      	cmp	r3, #12
 800cc3a:	f200 809f 	bhi.w	800cd7c <HAL_TIM_PWM_ConfigChannel+0x170>
 800cc3e:	a201      	add	r2, pc, #4	; (adr r2, 800cc44 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800cc40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc44:	0800cc79 	.word	0x0800cc79
 800cc48:	0800cd7d 	.word	0x0800cd7d
 800cc4c:	0800cd7d 	.word	0x0800cd7d
 800cc50:	0800cd7d 	.word	0x0800cd7d
 800cc54:	0800ccb9 	.word	0x0800ccb9
 800cc58:	0800cd7d 	.word	0x0800cd7d
 800cc5c:	0800cd7d 	.word	0x0800cd7d
 800cc60:	0800cd7d 	.word	0x0800cd7d
 800cc64:	0800ccfb 	.word	0x0800ccfb
 800cc68:	0800cd7d 	.word	0x0800cd7d
 800cc6c:	0800cd7d 	.word	0x0800cd7d
 800cc70:	0800cd7d 	.word	0x0800cd7d
 800cc74:	0800cd3b 	.word	0x0800cd3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	68b9      	ldr	r1, [r7, #8]
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f000 fa14 	bl	800d0ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	699a      	ldr	r2, [r3, #24]
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f042 0208 	orr.w	r2, r2, #8
 800cc92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	699a      	ldr	r2, [r3, #24]
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f022 0204 	bic.w	r2, r2, #4
 800cca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	6999      	ldr	r1, [r3, #24]
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	691a      	ldr	r2, [r3, #16]
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	430a      	orrs	r2, r1
 800ccb4:	619a      	str	r2, [r3, #24]
      break;
 800ccb6:	e062      	b.n	800cd7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	68b9      	ldr	r1, [r7, #8]
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f000 fa64 	bl	800d18c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	699a      	ldr	r2, [r3, #24]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	699a      	ldr	r2, [r3, #24]
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	6999      	ldr	r1, [r3, #24]
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	691b      	ldr	r3, [r3, #16]
 800ccee:	021a      	lsls	r2, r3, #8
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	430a      	orrs	r2, r1
 800ccf6:	619a      	str	r2, [r3, #24]
      break;
 800ccf8:	e041      	b.n	800cd7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	68b9      	ldr	r1, [r7, #8]
 800cd00:	4618      	mov	r0, r3
 800cd02:	f000 fab9 	bl	800d278 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	69da      	ldr	r2, [r3, #28]
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f042 0208 	orr.w	r2, r2, #8
 800cd14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	69da      	ldr	r2, [r3, #28]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f022 0204 	bic.w	r2, r2, #4
 800cd24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	69d9      	ldr	r1, [r3, #28]
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	691a      	ldr	r2, [r3, #16]
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	430a      	orrs	r2, r1
 800cd36:	61da      	str	r2, [r3, #28]
      break;
 800cd38:	e021      	b.n	800cd7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	68b9      	ldr	r1, [r7, #8]
 800cd40:	4618      	mov	r0, r3
 800cd42:	f000 fb0d 	bl	800d360 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	69da      	ldr	r2, [r3, #28]
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	69da      	ldr	r2, [r3, #28]
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	69d9      	ldr	r1, [r3, #28]
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	691b      	ldr	r3, [r3, #16]
 800cd70:	021a      	lsls	r2, r3, #8
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	430a      	orrs	r2, r1
 800cd78:	61da      	str	r2, [r3, #28]
      break;
 800cd7a:	e000      	b.n	800cd7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800cd7c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2201      	movs	r2, #1
 800cd82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cd8e:	2300      	movs	r3, #0
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3710      	adds	r7, #16
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d101      	bne.n	800cdb0 <HAL_TIM_ConfigClockSource+0x18>
 800cdac:	2302      	movs	r3, #2
 800cdae:	e0a6      	b.n	800cefe <HAL_TIM_ConfigClockSource+0x166>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2202      	movs	r2, #2
 800cdbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	689b      	ldr	r3, [r3, #8]
 800cdc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cdce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cdd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	68fa      	ldr	r2, [r7, #12]
 800cdde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2b40      	cmp	r3, #64	; 0x40
 800cde6:	d067      	beq.n	800ceb8 <HAL_TIM_ConfigClockSource+0x120>
 800cde8:	2b40      	cmp	r3, #64	; 0x40
 800cdea:	d80b      	bhi.n	800ce04 <HAL_TIM_ConfigClockSource+0x6c>
 800cdec:	2b10      	cmp	r3, #16
 800cdee:	d073      	beq.n	800ced8 <HAL_TIM_ConfigClockSource+0x140>
 800cdf0:	2b10      	cmp	r3, #16
 800cdf2:	d802      	bhi.n	800cdfa <HAL_TIM_ConfigClockSource+0x62>
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d06f      	beq.n	800ced8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800cdf8:	e078      	b.n	800ceec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800cdfa:	2b20      	cmp	r3, #32
 800cdfc:	d06c      	beq.n	800ced8 <HAL_TIM_ConfigClockSource+0x140>
 800cdfe:	2b30      	cmp	r3, #48	; 0x30
 800ce00:	d06a      	beq.n	800ced8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800ce02:	e073      	b.n	800ceec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ce04:	2b70      	cmp	r3, #112	; 0x70
 800ce06:	d00d      	beq.n	800ce24 <HAL_TIM_ConfigClockSource+0x8c>
 800ce08:	2b70      	cmp	r3, #112	; 0x70
 800ce0a:	d804      	bhi.n	800ce16 <HAL_TIM_ConfigClockSource+0x7e>
 800ce0c:	2b50      	cmp	r3, #80	; 0x50
 800ce0e:	d033      	beq.n	800ce78 <HAL_TIM_ConfigClockSource+0xe0>
 800ce10:	2b60      	cmp	r3, #96	; 0x60
 800ce12:	d041      	beq.n	800ce98 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800ce14:	e06a      	b.n	800ceec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ce16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce1a:	d066      	beq.n	800ceea <HAL_TIM_ConfigClockSource+0x152>
 800ce1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce20:	d017      	beq.n	800ce52 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800ce22:	e063      	b.n	800ceec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6818      	ldr	r0, [r3, #0]
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	6899      	ldr	r1, [r3, #8]
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	685a      	ldr	r2, [r3, #4]
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	68db      	ldr	r3, [r3, #12]
 800ce34:	f000 fb64 	bl	800d500 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ce46:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	68fa      	ldr	r2, [r7, #12]
 800ce4e:	609a      	str	r2, [r3, #8]
      break;
 800ce50:	e04c      	b.n	800ceec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6818      	ldr	r0, [r3, #0]
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	6899      	ldr	r1, [r3, #8]
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	685a      	ldr	r2, [r3, #4]
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	68db      	ldr	r3, [r3, #12]
 800ce62:	f000 fb4d 	bl	800d500 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	689a      	ldr	r2, [r3, #8]
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ce74:	609a      	str	r2, [r3, #8]
      break;
 800ce76:	e039      	b.n	800ceec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6818      	ldr	r0, [r3, #0]
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	6859      	ldr	r1, [r3, #4]
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	68db      	ldr	r3, [r3, #12]
 800ce84:	461a      	mov	r2, r3
 800ce86:	f000 fac1 	bl	800d40c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2150      	movs	r1, #80	; 0x50
 800ce90:	4618      	mov	r0, r3
 800ce92:	f000 fb1a 	bl	800d4ca <TIM_ITRx_SetConfig>
      break;
 800ce96:	e029      	b.n	800ceec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6818      	ldr	r0, [r3, #0]
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	6859      	ldr	r1, [r3, #4]
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	68db      	ldr	r3, [r3, #12]
 800cea4:	461a      	mov	r2, r3
 800cea6:	f000 fae0 	bl	800d46a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	2160      	movs	r1, #96	; 0x60
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f000 fb0a 	bl	800d4ca <TIM_ITRx_SetConfig>
      break;
 800ceb6:	e019      	b.n	800ceec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6818      	ldr	r0, [r3, #0]
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	6859      	ldr	r1, [r3, #4]
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	68db      	ldr	r3, [r3, #12]
 800cec4:	461a      	mov	r2, r3
 800cec6:	f000 faa1 	bl	800d40c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	2140      	movs	r1, #64	; 0x40
 800ced0:	4618      	mov	r0, r3
 800ced2:	f000 fafa 	bl	800d4ca <TIM_ITRx_SetConfig>
      break;
 800ced6:	e009      	b.n	800ceec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681a      	ldr	r2, [r3, #0]
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4619      	mov	r1, r3
 800cee2:	4610      	mov	r0, r2
 800cee4:	f000 faf1 	bl	800d4ca <TIM_ITRx_SetConfig>
      break;
 800cee8:	e000      	b.n	800ceec <HAL_TIM_ConfigClockSource+0x154>
      break;
 800ceea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2201      	movs	r2, #1
 800cef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2200      	movs	r2, #0
 800cef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cefc:	2300      	movs	r3, #0
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3710      	adds	r7, #16
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}

0800cf06 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf06:	b480      	push	{r7}
 800cf08:	b083      	sub	sp, #12
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cf0e:	bf00      	nop
 800cf10:	370c      	adds	r7, #12
 800cf12:	46bd      	mov	sp, r7
 800cf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf18:	4770      	bx	lr

0800cf1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf1a:	b480      	push	{r7}
 800cf1c:	b083      	sub	sp, #12
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cf22:	bf00      	nop
 800cf24:	370c      	adds	r7, #12
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr

0800cf2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cf2e:	b480      	push	{r7}
 800cf30:	b083      	sub	sp, #12
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cf36:	bf00      	nop
 800cf38:	370c      	adds	r7, #12
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr

0800cf42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cf42:	b480      	push	{r7}
 800cf44:	b083      	sub	sp, #12
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cf4a:	bf00      	nop
 800cf4c:	370c      	adds	r7, #12
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf54:	4770      	bx	lr

0800cf56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cf56:	b480      	push	{r7}
 800cf58:	b083      	sub	sp, #12
 800cf5a:	af00      	add	r7, sp, #0
 800cf5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cf5e:	bf00      	nop
 800cf60:	370c      	adds	r7, #12
 800cf62:	46bd      	mov	sp, r7
 800cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf68:	4770      	bx	lr
	...

0800cf6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b085      	sub	sp, #20
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	4a40      	ldr	r2, [pc, #256]	; (800d080 <TIM_Base_SetConfig+0x114>)
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d013      	beq.n	800cfac <TIM_Base_SetConfig+0x40>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf8a:	d00f      	beq.n	800cfac <TIM_Base_SetConfig+0x40>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	4a3d      	ldr	r2, [pc, #244]	; (800d084 <TIM_Base_SetConfig+0x118>)
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d00b      	beq.n	800cfac <TIM_Base_SetConfig+0x40>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	4a3c      	ldr	r2, [pc, #240]	; (800d088 <TIM_Base_SetConfig+0x11c>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d007      	beq.n	800cfac <TIM_Base_SetConfig+0x40>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	4a3b      	ldr	r2, [pc, #236]	; (800d08c <TIM_Base_SetConfig+0x120>)
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d003      	beq.n	800cfac <TIM_Base_SetConfig+0x40>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	4a3a      	ldr	r2, [pc, #232]	; (800d090 <TIM_Base_SetConfig+0x124>)
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	d108      	bne.n	800cfbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	68fa      	ldr	r2, [r7, #12]
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	4a2f      	ldr	r2, [pc, #188]	; (800d080 <TIM_Base_SetConfig+0x114>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d02b      	beq.n	800d01e <TIM_Base_SetConfig+0xb2>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfcc:	d027      	beq.n	800d01e <TIM_Base_SetConfig+0xb2>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	4a2c      	ldr	r2, [pc, #176]	; (800d084 <TIM_Base_SetConfig+0x118>)
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d023      	beq.n	800d01e <TIM_Base_SetConfig+0xb2>
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	4a2b      	ldr	r2, [pc, #172]	; (800d088 <TIM_Base_SetConfig+0x11c>)
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	d01f      	beq.n	800d01e <TIM_Base_SetConfig+0xb2>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	4a2a      	ldr	r2, [pc, #168]	; (800d08c <TIM_Base_SetConfig+0x120>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d01b      	beq.n	800d01e <TIM_Base_SetConfig+0xb2>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	4a29      	ldr	r2, [pc, #164]	; (800d090 <TIM_Base_SetConfig+0x124>)
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d017      	beq.n	800d01e <TIM_Base_SetConfig+0xb2>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	4a28      	ldr	r2, [pc, #160]	; (800d094 <TIM_Base_SetConfig+0x128>)
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d013      	beq.n	800d01e <TIM_Base_SetConfig+0xb2>
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	4a27      	ldr	r2, [pc, #156]	; (800d098 <TIM_Base_SetConfig+0x12c>)
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d00f      	beq.n	800d01e <TIM_Base_SetConfig+0xb2>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	4a26      	ldr	r2, [pc, #152]	; (800d09c <TIM_Base_SetConfig+0x130>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d00b      	beq.n	800d01e <TIM_Base_SetConfig+0xb2>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	4a25      	ldr	r2, [pc, #148]	; (800d0a0 <TIM_Base_SetConfig+0x134>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d007      	beq.n	800d01e <TIM_Base_SetConfig+0xb2>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	4a24      	ldr	r2, [pc, #144]	; (800d0a4 <TIM_Base_SetConfig+0x138>)
 800d012:	4293      	cmp	r3, r2
 800d014:	d003      	beq.n	800d01e <TIM_Base_SetConfig+0xb2>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	4a23      	ldr	r2, [pc, #140]	; (800d0a8 <TIM_Base_SetConfig+0x13c>)
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d108      	bne.n	800d030 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	68db      	ldr	r3, [r3, #12]
 800d02a:	68fa      	ldr	r2, [r7, #12]
 800d02c:	4313      	orrs	r3, r2
 800d02e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	695b      	ldr	r3, [r3, #20]
 800d03a:	4313      	orrs	r3, r2
 800d03c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	68fa      	ldr	r2, [r7, #12]
 800d042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	689a      	ldr	r2, [r3, #8]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	681a      	ldr	r2, [r3, #0]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	4a0a      	ldr	r2, [pc, #40]	; (800d080 <TIM_Base_SetConfig+0x114>)
 800d058:	4293      	cmp	r3, r2
 800d05a:	d003      	beq.n	800d064 <TIM_Base_SetConfig+0xf8>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	4a0c      	ldr	r2, [pc, #48]	; (800d090 <TIM_Base_SetConfig+0x124>)
 800d060:	4293      	cmp	r3, r2
 800d062:	d103      	bne.n	800d06c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	691a      	ldr	r2, [r3, #16]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2201      	movs	r2, #1
 800d070:	615a      	str	r2, [r3, #20]
}
 800d072:	bf00      	nop
 800d074:	3714      	adds	r7, #20
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	40010000 	.word	0x40010000
 800d084:	40000400 	.word	0x40000400
 800d088:	40000800 	.word	0x40000800
 800d08c:	40000c00 	.word	0x40000c00
 800d090:	40010400 	.word	0x40010400
 800d094:	40014000 	.word	0x40014000
 800d098:	40014400 	.word	0x40014400
 800d09c:	40014800 	.word	0x40014800
 800d0a0:	40001800 	.word	0x40001800
 800d0a4:	40001c00 	.word	0x40001c00
 800d0a8:	40002000 	.word	0x40002000

0800d0ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b087      	sub	sp, #28
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6a1b      	ldr	r3, [r3, #32]
 800d0ba:	f023 0201 	bic.w	r2, r3, #1
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6a1b      	ldr	r3, [r3, #32]
 800d0c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	699b      	ldr	r3, [r3, #24]
 800d0d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f023 0303 	bic.w	r3, r3, #3
 800d0e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	f023 0302 	bic.w	r3, r3, #2
 800d0f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	689b      	ldr	r3, [r3, #8]
 800d0fa:	697a      	ldr	r2, [r7, #20]
 800d0fc:	4313      	orrs	r3, r2
 800d0fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	4a20      	ldr	r2, [pc, #128]	; (800d184 <TIM_OC1_SetConfig+0xd8>)
 800d104:	4293      	cmp	r3, r2
 800d106:	d003      	beq.n	800d110 <TIM_OC1_SetConfig+0x64>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	4a1f      	ldr	r2, [pc, #124]	; (800d188 <TIM_OC1_SetConfig+0xdc>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d10c      	bne.n	800d12a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	f023 0308 	bic.w	r3, r3, #8
 800d116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	68db      	ldr	r3, [r3, #12]
 800d11c:	697a      	ldr	r2, [r7, #20]
 800d11e:	4313      	orrs	r3, r2
 800d120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	f023 0304 	bic.w	r3, r3, #4
 800d128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4a15      	ldr	r2, [pc, #84]	; (800d184 <TIM_OC1_SetConfig+0xd8>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d003      	beq.n	800d13a <TIM_OC1_SetConfig+0x8e>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	4a14      	ldr	r2, [pc, #80]	; (800d188 <TIM_OC1_SetConfig+0xdc>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d111      	bne.n	800d15e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	695b      	ldr	r3, [r3, #20]
 800d14e:	693a      	ldr	r2, [r7, #16]
 800d150:	4313      	orrs	r3, r2
 800d152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	699b      	ldr	r3, [r3, #24]
 800d158:	693a      	ldr	r2, [r7, #16]
 800d15a:	4313      	orrs	r3, r2
 800d15c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	693a      	ldr	r2, [r7, #16]
 800d162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	68fa      	ldr	r2, [r7, #12]
 800d168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	685a      	ldr	r2, [r3, #4]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	697a      	ldr	r2, [r7, #20]
 800d176:	621a      	str	r2, [r3, #32]
}
 800d178:	bf00      	nop
 800d17a:	371c      	adds	r7, #28
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr
 800d184:	40010000 	.word	0x40010000
 800d188:	40010400 	.word	0x40010400

0800d18c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b087      	sub	sp, #28
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6a1b      	ldr	r3, [r3, #32]
 800d19a:	f023 0210 	bic.w	r2, r3, #16
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6a1b      	ldr	r3, [r3, #32]
 800d1a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	685b      	ldr	r3, [r3, #4]
 800d1ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	699b      	ldr	r3, [r3, #24]
 800d1b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d1ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	021b      	lsls	r3, r3, #8
 800d1ca:	68fa      	ldr	r2, [r7, #12]
 800d1cc:	4313      	orrs	r3, r2
 800d1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	f023 0320 	bic.w	r3, r3, #32
 800d1d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	689b      	ldr	r3, [r3, #8]
 800d1dc:	011b      	lsls	r3, r3, #4
 800d1de:	697a      	ldr	r2, [r7, #20]
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	4a22      	ldr	r2, [pc, #136]	; (800d270 <TIM_OC2_SetConfig+0xe4>)
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d003      	beq.n	800d1f4 <TIM_OC2_SetConfig+0x68>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	4a21      	ldr	r2, [pc, #132]	; (800d274 <TIM_OC2_SetConfig+0xe8>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d10d      	bne.n	800d210 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	68db      	ldr	r3, [r3, #12]
 800d200:	011b      	lsls	r3, r3, #4
 800d202:	697a      	ldr	r2, [r7, #20]
 800d204:	4313      	orrs	r3, r2
 800d206:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d20e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	4a17      	ldr	r2, [pc, #92]	; (800d270 <TIM_OC2_SetConfig+0xe4>)
 800d214:	4293      	cmp	r3, r2
 800d216:	d003      	beq.n	800d220 <TIM_OC2_SetConfig+0x94>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	4a16      	ldr	r2, [pc, #88]	; (800d274 <TIM_OC2_SetConfig+0xe8>)
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d113      	bne.n	800d248 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d226:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d22e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	695b      	ldr	r3, [r3, #20]
 800d234:	009b      	lsls	r3, r3, #2
 800d236:	693a      	ldr	r2, [r7, #16]
 800d238:	4313      	orrs	r3, r2
 800d23a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	699b      	ldr	r3, [r3, #24]
 800d240:	009b      	lsls	r3, r3, #2
 800d242:	693a      	ldr	r2, [r7, #16]
 800d244:	4313      	orrs	r3, r2
 800d246:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	693a      	ldr	r2, [r7, #16]
 800d24c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	68fa      	ldr	r2, [r7, #12]
 800d252:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	685a      	ldr	r2, [r3, #4]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	697a      	ldr	r2, [r7, #20]
 800d260:	621a      	str	r2, [r3, #32]
}
 800d262:	bf00      	nop
 800d264:	371c      	adds	r7, #28
 800d266:	46bd      	mov	sp, r7
 800d268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26c:	4770      	bx	lr
 800d26e:	bf00      	nop
 800d270:	40010000 	.word	0x40010000
 800d274:	40010400 	.word	0x40010400

0800d278 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d278:	b480      	push	{r7}
 800d27a:	b087      	sub	sp, #28
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6a1b      	ldr	r3, [r3, #32]
 800d286:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6a1b      	ldr	r3, [r3, #32]
 800d292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	69db      	ldr	r3, [r3, #28]
 800d29e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f023 0303 	bic.w	r3, r3, #3
 800d2ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	68fa      	ldr	r2, [r7, #12]
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d2c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	689b      	ldr	r3, [r3, #8]
 800d2c6:	021b      	lsls	r3, r3, #8
 800d2c8:	697a      	ldr	r2, [r7, #20]
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	4a21      	ldr	r2, [pc, #132]	; (800d358 <TIM_OC3_SetConfig+0xe0>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d003      	beq.n	800d2de <TIM_OC3_SetConfig+0x66>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	4a20      	ldr	r2, [pc, #128]	; (800d35c <TIM_OC3_SetConfig+0xe4>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d10d      	bne.n	800d2fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d2e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	68db      	ldr	r3, [r3, #12]
 800d2ea:	021b      	lsls	r3, r3, #8
 800d2ec:	697a      	ldr	r2, [r7, #20]
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d2f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	4a16      	ldr	r2, [pc, #88]	; (800d358 <TIM_OC3_SetConfig+0xe0>)
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d003      	beq.n	800d30a <TIM_OC3_SetConfig+0x92>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	4a15      	ldr	r2, [pc, #84]	; (800d35c <TIM_OC3_SetConfig+0xe4>)
 800d306:	4293      	cmp	r3, r2
 800d308:	d113      	bne.n	800d332 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	695b      	ldr	r3, [r3, #20]
 800d31e:	011b      	lsls	r3, r3, #4
 800d320:	693a      	ldr	r2, [r7, #16]
 800d322:	4313      	orrs	r3, r2
 800d324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	699b      	ldr	r3, [r3, #24]
 800d32a:	011b      	lsls	r3, r3, #4
 800d32c:	693a      	ldr	r2, [r7, #16]
 800d32e:	4313      	orrs	r3, r2
 800d330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	693a      	ldr	r2, [r7, #16]
 800d336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	68fa      	ldr	r2, [r7, #12]
 800d33c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	685a      	ldr	r2, [r3, #4]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	697a      	ldr	r2, [r7, #20]
 800d34a:	621a      	str	r2, [r3, #32]
}
 800d34c:	bf00      	nop
 800d34e:	371c      	adds	r7, #28
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr
 800d358:	40010000 	.word	0x40010000
 800d35c:	40010400 	.word	0x40010400

0800d360 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d360:	b480      	push	{r7}
 800d362:	b087      	sub	sp, #28
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6a1b      	ldr	r3, [r3, #32]
 800d36e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6a1b      	ldr	r3, [r3, #32]
 800d37a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	69db      	ldr	r3, [r3, #28]
 800d386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d38e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	021b      	lsls	r3, r3, #8
 800d39e:	68fa      	ldr	r2, [r7, #12]
 800d3a0:	4313      	orrs	r3, r2
 800d3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d3aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	031b      	lsls	r3, r3, #12
 800d3b2:	693a      	ldr	r2, [r7, #16]
 800d3b4:	4313      	orrs	r3, r2
 800d3b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	4a12      	ldr	r2, [pc, #72]	; (800d404 <TIM_OC4_SetConfig+0xa4>)
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d003      	beq.n	800d3c8 <TIM_OC4_SetConfig+0x68>
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	4a11      	ldr	r2, [pc, #68]	; (800d408 <TIM_OC4_SetConfig+0xa8>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d109      	bne.n	800d3dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d3ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	695b      	ldr	r3, [r3, #20]
 800d3d4:	019b      	lsls	r3, r3, #6
 800d3d6:	697a      	ldr	r2, [r7, #20]
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	697a      	ldr	r2, [r7, #20]
 800d3e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	68fa      	ldr	r2, [r7, #12]
 800d3e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	685a      	ldr	r2, [r3, #4]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	693a      	ldr	r2, [r7, #16]
 800d3f4:	621a      	str	r2, [r3, #32]
}
 800d3f6:	bf00      	nop
 800d3f8:	371c      	adds	r7, #28
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr
 800d402:	bf00      	nop
 800d404:	40010000 	.word	0x40010000
 800d408:	40010400 	.word	0x40010400

0800d40c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b087      	sub	sp, #28
 800d410:	af00      	add	r7, sp, #0
 800d412:	60f8      	str	r0, [r7, #12]
 800d414:	60b9      	str	r1, [r7, #8]
 800d416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6a1b      	ldr	r3, [r3, #32]
 800d41c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	6a1b      	ldr	r3, [r3, #32]
 800d422:	f023 0201 	bic.w	r2, r3, #1
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	699b      	ldr	r3, [r3, #24]
 800d42e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	011b      	lsls	r3, r3, #4
 800d43c:	693a      	ldr	r2, [r7, #16]
 800d43e:	4313      	orrs	r3, r2
 800d440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	f023 030a 	bic.w	r3, r3, #10
 800d448:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d44a:	697a      	ldr	r2, [r7, #20]
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	4313      	orrs	r3, r2
 800d450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	693a      	ldr	r2, [r7, #16]
 800d456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	697a      	ldr	r2, [r7, #20]
 800d45c:	621a      	str	r2, [r3, #32]
}
 800d45e:	bf00      	nop
 800d460:	371c      	adds	r7, #28
 800d462:	46bd      	mov	sp, r7
 800d464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d468:	4770      	bx	lr

0800d46a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d46a:	b480      	push	{r7}
 800d46c:	b087      	sub	sp, #28
 800d46e:	af00      	add	r7, sp, #0
 800d470:	60f8      	str	r0, [r7, #12]
 800d472:	60b9      	str	r1, [r7, #8]
 800d474:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	6a1b      	ldr	r3, [r3, #32]
 800d47a:	f023 0210 	bic.w	r2, r3, #16
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	699b      	ldr	r3, [r3, #24]
 800d486:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	6a1b      	ldr	r3, [r3, #32]
 800d48c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d494:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	031b      	lsls	r3, r3, #12
 800d49a:	697a      	ldr	r2, [r7, #20]
 800d49c:	4313      	orrs	r3, r2
 800d49e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d4a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	011b      	lsls	r3, r3, #4
 800d4ac:	693a      	ldr	r2, [r7, #16]
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	697a      	ldr	r2, [r7, #20]
 800d4b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	693a      	ldr	r2, [r7, #16]
 800d4bc:	621a      	str	r2, [r3, #32]
}
 800d4be:	bf00      	nop
 800d4c0:	371c      	adds	r7, #28
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr

0800d4ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d4ca:	b480      	push	{r7}
 800d4cc:	b085      	sub	sp, #20
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	6078      	str	r0, [r7, #4]
 800d4d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	689b      	ldr	r3, [r3, #8]
 800d4d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d4e2:	683a      	ldr	r2, [r7, #0]
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	f043 0307 	orr.w	r3, r3, #7
 800d4ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	68fa      	ldr	r2, [r7, #12]
 800d4f2:	609a      	str	r2, [r3, #8]
}
 800d4f4:	bf00      	nop
 800d4f6:	3714      	adds	r7, #20
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d500:	b480      	push	{r7}
 800d502:	b087      	sub	sp, #28
 800d504:	af00      	add	r7, sp, #0
 800d506:	60f8      	str	r0, [r7, #12]
 800d508:	60b9      	str	r1, [r7, #8]
 800d50a:	607a      	str	r2, [r7, #4]
 800d50c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	689b      	ldr	r3, [r3, #8]
 800d512:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d51a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	021a      	lsls	r2, r3, #8
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	431a      	orrs	r2, r3
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	4313      	orrs	r3, r2
 800d528:	697a      	ldr	r2, [r7, #20]
 800d52a:	4313      	orrs	r3, r2
 800d52c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	697a      	ldr	r2, [r7, #20]
 800d532:	609a      	str	r2, [r3, #8]
}
 800d534:	bf00      	nop
 800d536:	371c      	adds	r7, #28
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr

0800d540 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d540:	b480      	push	{r7}
 800d542:	b087      	sub	sp, #28
 800d544:	af00      	add	r7, sp, #0
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	f003 031f 	and.w	r3, r3, #31
 800d552:	2201      	movs	r2, #1
 800d554:	fa02 f303 	lsl.w	r3, r2, r3
 800d558:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	6a1a      	ldr	r2, [r3, #32]
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	43db      	mvns	r3, r3
 800d562:	401a      	ands	r2, r3
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	6a1a      	ldr	r2, [r3, #32]
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	f003 031f 	and.w	r3, r3, #31
 800d572:	6879      	ldr	r1, [r7, #4]
 800d574:	fa01 f303 	lsl.w	r3, r1, r3
 800d578:	431a      	orrs	r2, r3
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	621a      	str	r2, [r3, #32]
}
 800d57e:	bf00      	nop
 800d580:	371c      	adds	r7, #28
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr
	...

0800d58c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b085      	sub	sp, #20
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d101      	bne.n	800d5a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d5a0:	2302      	movs	r3, #2
 800d5a2:	e05a      	b.n	800d65a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2202      	movs	r2, #2
 800d5b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	689b      	ldr	r3, [r3, #8]
 800d5c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	68fa      	ldr	r2, [r7, #12]
 800d5d2:	4313      	orrs	r3, r2
 800d5d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	68fa      	ldr	r2, [r7, #12]
 800d5dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	4a21      	ldr	r2, [pc, #132]	; (800d668 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d5e4:	4293      	cmp	r3, r2
 800d5e6:	d022      	beq.n	800d62e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5f0:	d01d      	beq.n	800d62e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	4a1d      	ldr	r2, [pc, #116]	; (800d66c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d018      	beq.n	800d62e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4a1b      	ldr	r2, [pc, #108]	; (800d670 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d602:	4293      	cmp	r3, r2
 800d604:	d013      	beq.n	800d62e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4a1a      	ldr	r2, [pc, #104]	; (800d674 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d00e      	beq.n	800d62e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4a18      	ldr	r2, [pc, #96]	; (800d678 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d616:	4293      	cmp	r3, r2
 800d618:	d009      	beq.n	800d62e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	4a17      	ldr	r2, [pc, #92]	; (800d67c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d004      	beq.n	800d62e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	4a15      	ldr	r2, [pc, #84]	; (800d680 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d10c      	bne.n	800d648 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d634:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	68ba      	ldr	r2, [r7, #8]
 800d63c:	4313      	orrs	r3, r2
 800d63e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	68ba      	ldr	r2, [r7, #8]
 800d646:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2201      	movs	r2, #1
 800d64c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2200      	movs	r2, #0
 800d654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d658:	2300      	movs	r3, #0
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3714      	adds	r7, #20
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr
 800d666:	bf00      	nop
 800d668:	40010000 	.word	0x40010000
 800d66c:	40000400 	.word	0x40000400
 800d670:	40000800 	.word	0x40000800
 800d674:	40000c00 	.word	0x40000c00
 800d678:	40010400 	.word	0x40010400
 800d67c:	40014000 	.word	0x40014000
 800d680:	40001800 	.word	0x40001800

0800d684 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d684:	b480      	push	{r7}
 800d686:	b083      	sub	sp, #12
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d68c:	bf00      	nop
 800d68e:	370c      	adds	r7, #12
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr

0800d698 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d698:	b480      	push	{r7}
 800d69a:	b083      	sub	sp, #12
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d6a0:	bf00      	nop
 800d6a2:	370c      	adds	r7, #12
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d101      	bne.n	800d6be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	e03f      	b.n	800d73e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d106      	bne.n	800d6d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f7fa fc82 	bl	8007fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2224      	movs	r2, #36	; 0x24
 800d6dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	68da      	ldr	r2, [r3, #12]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d6ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f000 fb4b 	bl	800dd8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	691a      	ldr	r2, [r3, #16]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d704:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	695a      	ldr	r2, [r3, #20]
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d714:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	68da      	ldr	r2, [r3, #12]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d724:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2200      	movs	r2, #0
 800d72a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2220      	movs	r2, #32
 800d730:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2220      	movs	r2, #32
 800d738:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d73c:	2300      	movs	r3, #0
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3708      	adds	r7, #8
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}

0800d746 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d746:	b580      	push	{r7, lr}
 800d748:	b088      	sub	sp, #32
 800d74a:	af02      	add	r7, sp, #8
 800d74c:	60f8      	str	r0, [r7, #12]
 800d74e:	60b9      	str	r1, [r7, #8]
 800d750:	603b      	str	r3, [r7, #0]
 800d752:	4613      	mov	r3, r2
 800d754:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800d756:	2300      	movs	r3, #0
 800d758:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d760:	b2db      	uxtb	r3, r3
 800d762:	2b20      	cmp	r3, #32
 800d764:	f040 8083 	bne.w	800d86e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d002      	beq.n	800d774 <HAL_UART_Transmit+0x2e>
 800d76e:	88fb      	ldrh	r3, [r7, #6]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d101      	bne.n	800d778 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800d774:	2301      	movs	r3, #1
 800d776:	e07b      	b.n	800d870 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d101      	bne.n	800d786 <HAL_UART_Transmit+0x40>
 800d782:	2302      	movs	r3, #2
 800d784:	e074      	b.n	800d870 <HAL_UART_Transmit+0x12a>
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2201      	movs	r2, #1
 800d78a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2200      	movs	r2, #0
 800d792:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2221      	movs	r2, #33	; 0x21
 800d798:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800d79c:	f7fa fdee 	bl	800837c <HAL_GetTick>
 800d7a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	88fa      	ldrh	r2, [r7, #6]
 800d7a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	88fa      	ldrh	r2, [r7, #6]
 800d7ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800d7b6:	e042      	b.n	800d83e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	3b01      	subs	r3, #1
 800d7c0:	b29a      	uxth	r2, r3
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	689b      	ldr	r3, [r3, #8]
 800d7ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7ce:	d122      	bne.n	800d816 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	9300      	str	r3, [sp, #0]
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	2180      	movs	r1, #128	; 0x80
 800d7da:	68f8      	ldr	r0, [r7, #12]
 800d7dc:	f000 f96a 	bl	800dab4 <UART_WaitOnFlagUntilTimeout>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d001      	beq.n	800d7ea <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800d7e6:	2303      	movs	r3, #3
 800d7e8:	e042      	b.n	800d870 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	881b      	ldrh	r3, [r3, #0]
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d7fc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	691b      	ldr	r3, [r3, #16]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d103      	bne.n	800d80e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	3302      	adds	r3, #2
 800d80a:	60bb      	str	r3, [r7, #8]
 800d80c:	e017      	b.n	800d83e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	3301      	adds	r3, #1
 800d812:	60bb      	str	r3, [r7, #8]
 800d814:	e013      	b.n	800d83e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	9300      	str	r3, [sp, #0]
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	2200      	movs	r2, #0
 800d81e:	2180      	movs	r1, #128	; 0x80
 800d820:	68f8      	ldr	r0, [r7, #12]
 800d822:	f000 f947 	bl	800dab4 <UART_WaitOnFlagUntilTimeout>
 800d826:	4603      	mov	r3, r0
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d001      	beq.n	800d830 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800d82c:	2303      	movs	r3, #3
 800d82e:	e01f      	b.n	800d870 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	1c5a      	adds	r2, r3, #1
 800d834:	60ba      	str	r2, [r7, #8]
 800d836:	781a      	ldrb	r2, [r3, #0]
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d842:	b29b      	uxth	r3, r3
 800d844:	2b00      	cmp	r3, #0
 800d846:	d1b7      	bne.n	800d7b8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	9300      	str	r3, [sp, #0]
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	2200      	movs	r2, #0
 800d850:	2140      	movs	r1, #64	; 0x40
 800d852:	68f8      	ldr	r0, [r7, #12]
 800d854:	f000 f92e 	bl	800dab4 <UART_WaitOnFlagUntilTimeout>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d001      	beq.n	800d862 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800d85e:	2303      	movs	r3, #3
 800d860:	e006      	b.n	800d870 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2220      	movs	r2, #32
 800d866:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800d86a:	2300      	movs	r3, #0
 800d86c:	e000      	b.n	800d870 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800d86e:	2302      	movs	r3, #2
  }
}
 800d870:	4618      	mov	r0, r3
 800d872:	3718      	adds	r7, #24
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b088      	sub	sp, #32
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	695b      	ldr	r3, [r3, #20]
 800d896:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800d898:	2300      	movs	r3, #0
 800d89a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800d89c:	2300      	movs	r3, #0
 800d89e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d8a0:	69fb      	ldr	r3, [r7, #28]
 800d8a2:	f003 030f 	and.w	r3, r3, #15
 800d8a6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d10d      	bne.n	800d8ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d8ae:	69fb      	ldr	r3, [r7, #28]
 800d8b0:	f003 0320 	and.w	r3, r3, #32
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d008      	beq.n	800d8ca <HAL_UART_IRQHandler+0x52>
 800d8b8:	69bb      	ldr	r3, [r7, #24]
 800d8ba:	f003 0320 	and.w	r3, r3, #32
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d003      	beq.n	800d8ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f000 f9e0 	bl	800dc88 <UART_Receive_IT>
      return;
 800d8c8:	e0d1      	b.n	800da6e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	f000 80b0 	beq.w	800da32 <HAL_UART_IRQHandler+0x1ba>
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	f003 0301 	and.w	r3, r3, #1
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d105      	bne.n	800d8e8 <HAL_UART_IRQHandler+0x70>
 800d8dc:	69bb      	ldr	r3, [r7, #24]
 800d8de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	f000 80a5 	beq.w	800da32 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d8e8:	69fb      	ldr	r3, [r7, #28]
 800d8ea:	f003 0301 	and.w	r3, r3, #1
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d00a      	beq.n	800d908 <HAL_UART_IRQHandler+0x90>
 800d8f2:	69bb      	ldr	r3, [r7, #24]
 800d8f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d005      	beq.n	800d908 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d900:	f043 0201 	orr.w	r2, r3, #1
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	f003 0304 	and.w	r3, r3, #4
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d00a      	beq.n	800d928 <HAL_UART_IRQHandler+0xb0>
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	f003 0301 	and.w	r3, r3, #1
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d005      	beq.n	800d928 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d920:	f043 0202 	orr.w	r2, r3, #2
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d928:	69fb      	ldr	r3, [r7, #28]
 800d92a:	f003 0302 	and.w	r3, r3, #2
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d00a      	beq.n	800d948 <HAL_UART_IRQHandler+0xd0>
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	f003 0301 	and.w	r3, r3, #1
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d005      	beq.n	800d948 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d940:	f043 0204 	orr.w	r2, r3, #4
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800d948:	69fb      	ldr	r3, [r7, #28]
 800d94a:	f003 0308 	and.w	r3, r3, #8
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d00f      	beq.n	800d972 <HAL_UART_IRQHandler+0xfa>
 800d952:	69bb      	ldr	r3, [r7, #24]
 800d954:	f003 0320 	and.w	r3, r3, #32
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d104      	bne.n	800d966 <HAL_UART_IRQHandler+0xee>
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	f003 0301 	and.w	r3, r3, #1
 800d962:	2b00      	cmp	r3, #0
 800d964:	d005      	beq.n	800d972 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d96a:	f043 0208 	orr.w	r2, r3, #8
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d976:	2b00      	cmp	r3, #0
 800d978:	d078      	beq.n	800da6c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d97a:	69fb      	ldr	r3, [r7, #28]
 800d97c:	f003 0320 	and.w	r3, r3, #32
 800d980:	2b00      	cmp	r3, #0
 800d982:	d007      	beq.n	800d994 <HAL_UART_IRQHandler+0x11c>
 800d984:	69bb      	ldr	r3, [r7, #24]
 800d986:	f003 0320 	and.w	r3, r3, #32
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d002      	beq.n	800d994 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f000 f97a 	bl	800dc88 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	695b      	ldr	r3, [r3, #20]
 800d99a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d99e:	2b40      	cmp	r3, #64	; 0x40
 800d9a0:	bf0c      	ite	eq
 800d9a2:	2301      	moveq	r3, #1
 800d9a4:	2300      	movne	r3, #0
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9ae:	f003 0308 	and.w	r3, r3, #8
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d102      	bne.n	800d9bc <HAL_UART_IRQHandler+0x144>
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d031      	beq.n	800da20 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f000 f8c3 	bl	800db48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	695b      	ldr	r3, [r3, #20]
 800d9c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9cc:	2b40      	cmp	r3, #64	; 0x40
 800d9ce:	d123      	bne.n	800da18 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	695a      	ldr	r2, [r3, #20]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d9de:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d013      	beq.n	800da10 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9ec:	4a21      	ldr	r2, [pc, #132]	; (800da74 <HAL_UART_IRQHandler+0x1fc>)
 800d9ee:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7fb f911 	bl	8008c1c <HAL_DMA_Abort_IT>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d016      	beq.n	800da2e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800da0a:	4610      	mov	r0, r2
 800da0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da0e:	e00e      	b.n	800da2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	f000 f845 	bl	800daa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da16:	e00a      	b.n	800da2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f000 f841 	bl	800daa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da1e:	e006      	b.n	800da2e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f000 f83d 	bl	800daa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2200      	movs	r2, #0
 800da2a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800da2c:	e01e      	b.n	800da6c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da2e:	bf00      	nop
    return;
 800da30:	e01c      	b.n	800da6c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800da32:	69fb      	ldr	r3, [r7, #28]
 800da34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d008      	beq.n	800da4e <HAL_UART_IRQHandler+0x1d6>
 800da3c:	69bb      	ldr	r3, [r7, #24]
 800da3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da42:	2b00      	cmp	r3, #0
 800da44:	d003      	beq.n	800da4e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f000 f8b0 	bl	800dbac <UART_Transmit_IT>
    return;
 800da4c:	e00f      	b.n	800da6e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800da4e:	69fb      	ldr	r3, [r7, #28]
 800da50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da54:	2b00      	cmp	r3, #0
 800da56:	d00a      	beq.n	800da6e <HAL_UART_IRQHandler+0x1f6>
 800da58:	69bb      	ldr	r3, [r7, #24]
 800da5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d005      	beq.n	800da6e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f000 f8f8 	bl	800dc58 <UART_EndTransmit_IT>
    return;
 800da68:	bf00      	nop
 800da6a:	e000      	b.n	800da6e <HAL_UART_IRQHandler+0x1f6>
    return;
 800da6c:	bf00      	nop
  }
}
 800da6e:	3720      	adds	r7, #32
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}
 800da74:	0800db85 	.word	0x0800db85

0800da78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800da80:	bf00      	nop
 800da82:	370c      	adds	r7, #12
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr

0800da8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800da8c:	b480      	push	{r7}
 800da8e:	b083      	sub	sp, #12
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800da94:	bf00      	nop
 800da96:	370c      	adds	r7, #12
 800da98:	46bd      	mov	sp, r7
 800da9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9e:	4770      	bx	lr

0800daa0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b083      	sub	sp, #12
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800daa8:	bf00      	nop
 800daaa:	370c      	adds	r7, #12
 800daac:	46bd      	mov	sp, r7
 800daae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab2:	4770      	bx	lr

0800dab4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b084      	sub	sp, #16
 800dab8:	af00      	add	r7, sp, #0
 800daba:	60f8      	str	r0, [r7, #12]
 800dabc:	60b9      	str	r1, [r7, #8]
 800dabe:	603b      	str	r3, [r7, #0]
 800dac0:	4613      	mov	r3, r2
 800dac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dac4:	e02c      	b.n	800db20 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dac6:	69bb      	ldr	r3, [r7, #24]
 800dac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dacc:	d028      	beq.n	800db20 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800dace:	69bb      	ldr	r3, [r7, #24]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d007      	beq.n	800dae4 <UART_WaitOnFlagUntilTimeout+0x30>
 800dad4:	f7fa fc52 	bl	800837c <HAL_GetTick>
 800dad8:	4602      	mov	r2, r0
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	1ad3      	subs	r3, r2, r3
 800dade:	69ba      	ldr	r2, [r7, #24]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d21d      	bcs.n	800db20 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	68da      	ldr	r2, [r3, #12]
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800daf2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	695a      	ldr	r2, [r3, #20]
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f022 0201 	bic.w	r2, r2, #1
 800db02:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2220      	movs	r2, #32
 800db08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2220      	movs	r2, #32
 800db10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	2200      	movs	r2, #0
 800db18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800db1c:	2303      	movs	r3, #3
 800db1e:	e00f      	b.n	800db40 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	681a      	ldr	r2, [r3, #0]
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	4013      	ands	r3, r2
 800db2a:	68ba      	ldr	r2, [r7, #8]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	bf0c      	ite	eq
 800db30:	2301      	moveq	r3, #1
 800db32:	2300      	movne	r3, #0
 800db34:	b2db      	uxtb	r3, r3
 800db36:	461a      	mov	r2, r3
 800db38:	79fb      	ldrb	r3, [r7, #7]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d0c3      	beq.n	800dac6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800db3e:	2300      	movs	r3, #0
}
 800db40:	4618      	mov	r0, r3
 800db42:	3710      	adds	r7, #16
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}

0800db48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	68da      	ldr	r2, [r3, #12]
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800db5e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	695a      	ldr	r2, [r3, #20]
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f022 0201 	bic.w	r2, r2, #1
 800db6e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2220      	movs	r2, #32
 800db74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800db78:	bf00      	nop
 800db7a:	370c      	adds	r7, #12
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr

0800db84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b084      	sub	sp, #16
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2200      	movs	r2, #0
 800db96:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2200      	movs	r2, #0
 800db9c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db9e:	68f8      	ldr	r0, [r7, #12]
 800dba0:	f7ff ff7e 	bl	800daa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dba4:	bf00      	nop
 800dba6:	3710      	adds	r7, #16
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b085      	sub	sp, #20
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dbba:	b2db      	uxtb	r3, r3
 800dbbc:	2b21      	cmp	r3, #33	; 0x21
 800dbbe:	d144      	bne.n	800dc4a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	689b      	ldr	r3, [r3, #8]
 800dbc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbc8:	d11a      	bne.n	800dc00 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6a1b      	ldr	r3, [r3, #32]
 800dbce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	881b      	ldrh	r3, [r3, #0]
 800dbd4:	461a      	mov	r2, r3
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dbde:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	691b      	ldr	r3, [r3, #16]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d105      	bne.n	800dbf4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6a1b      	ldr	r3, [r3, #32]
 800dbec:	1c9a      	adds	r2, r3, #2
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	621a      	str	r2, [r3, #32]
 800dbf2:	e00e      	b.n	800dc12 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6a1b      	ldr	r3, [r3, #32]
 800dbf8:	1c5a      	adds	r2, r3, #1
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	621a      	str	r2, [r3, #32]
 800dbfe:	e008      	b.n	800dc12 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6a1b      	ldr	r3, [r3, #32]
 800dc04:	1c59      	adds	r1, r3, #1
 800dc06:	687a      	ldr	r2, [r7, #4]
 800dc08:	6211      	str	r1, [r2, #32]
 800dc0a:	781a      	ldrb	r2, [r3, #0]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	3b01      	subs	r3, #1
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	687a      	ldr	r2, [r7, #4]
 800dc1e:	4619      	mov	r1, r3
 800dc20:	84d1      	strh	r1, [r2, #38]	; 0x26
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d10f      	bne.n	800dc46 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	68da      	ldr	r2, [r3, #12]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dc34:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	68da      	ldr	r2, [r3, #12]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc44:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dc46:	2300      	movs	r3, #0
 800dc48:	e000      	b.n	800dc4c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800dc4a:	2302      	movs	r3, #2
  }
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3714      	adds	r7, #20
 800dc50:	46bd      	mov	sp, r7
 800dc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc56:	4770      	bx	lr

0800dc58 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	68da      	ldr	r2, [r3, #12]
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc6e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2220      	movs	r2, #32
 800dc74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f7ff fefd 	bl	800da78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800dc7e:	2300      	movs	r3, #0
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3708      	adds	r7, #8
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	2b22      	cmp	r3, #34	; 0x22
 800dc9a:	d171      	bne.n	800dd80 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	689b      	ldr	r3, [r3, #8]
 800dca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dca4:	d123      	bne.n	800dcee <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcaa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	691b      	ldr	r3, [r3, #16]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d10e      	bne.n	800dcd2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcc0:	b29a      	uxth	r2, r3
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcca:	1c9a      	adds	r2, r3, #2
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	629a      	str	r2, [r3, #40]	; 0x28
 800dcd0:	e029      	b.n	800dd26 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	685b      	ldr	r3, [r3, #4]
 800dcd8:	b29b      	uxth	r3, r3
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	b29a      	uxth	r2, r3
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dce6:	1c5a      	adds	r2, r3, #1
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	629a      	str	r2, [r3, #40]	; 0x28
 800dcec:	e01b      	b.n	800dd26 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	691b      	ldr	r3, [r3, #16]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d10a      	bne.n	800dd0c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	6858      	ldr	r0, [r3, #4]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd00:	1c59      	adds	r1, r3, #1
 800dd02:	687a      	ldr	r2, [r7, #4]
 800dd04:	6291      	str	r1, [r2, #40]	; 0x28
 800dd06:	b2c2      	uxtb	r2, r0
 800dd08:	701a      	strb	r2, [r3, #0]
 800dd0a:	e00c      	b.n	800dd26 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	b2da      	uxtb	r2, r3
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd18:	1c58      	adds	r0, r3, #1
 800dd1a:	6879      	ldr	r1, [r7, #4]
 800dd1c:	6288      	str	r0, [r1, #40]	; 0x28
 800dd1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dd22:	b2d2      	uxtb	r2, r2
 800dd24:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	3b01      	subs	r3, #1
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	4619      	mov	r1, r3
 800dd34:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d120      	bne.n	800dd7c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	68da      	ldr	r2, [r3, #12]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f022 0220 	bic.w	r2, r2, #32
 800dd48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	68da      	ldr	r2, [r3, #12]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dd58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	695a      	ldr	r2, [r3, #20]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f022 0201 	bic.w	r2, r2, #1
 800dd68:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2220      	movs	r2, #32
 800dd6e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f7ff fe8a 	bl	800da8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	e002      	b.n	800dd82 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	e000      	b.n	800dd82 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800dd80:	2302      	movs	r3, #2
  }
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3710      	adds	r7, #16
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}
	...

0800dd8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd90:	b085      	sub	sp, #20
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	691b      	ldr	r3, [r3, #16]
 800dd9c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	68da      	ldr	r2, [r3, #12]
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	430a      	orrs	r2, r1
 800ddaa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	689a      	ldr	r2, [r3, #8]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	691b      	ldr	r3, [r3, #16]
 800ddb4:	431a      	orrs	r2, r3
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	695b      	ldr	r3, [r3, #20]
 800ddba:	431a      	orrs	r2, r3
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	69db      	ldr	r3, [r3, #28]
 800ddc0:	4313      	orrs	r3, r2
 800ddc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	68db      	ldr	r3, [r3, #12]
 800ddca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ddce:	f023 030c 	bic.w	r3, r3, #12
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	6812      	ldr	r2, [r2, #0]
 800ddd6:	68f9      	ldr	r1, [r7, #12]
 800ddd8:	430b      	orrs	r3, r1
 800ddda:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	695b      	ldr	r3, [r3, #20]
 800dde2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	699a      	ldr	r2, [r3, #24]
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	430a      	orrs	r2, r1
 800ddf0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	69db      	ldr	r3, [r3, #28]
 800ddf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddfa:	f040 818b 	bne.w	800e114 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	4ac1      	ldr	r2, [pc, #772]	; (800e108 <UART_SetConfig+0x37c>)
 800de04:	4293      	cmp	r3, r2
 800de06:	d005      	beq.n	800de14 <UART_SetConfig+0x88>
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	4abf      	ldr	r2, [pc, #764]	; (800e10c <UART_SetConfig+0x380>)
 800de0e:	4293      	cmp	r3, r2
 800de10:	f040 80bd 	bne.w	800df8e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800de14:	f7fd fecc 	bl	800bbb0 <HAL_RCC_GetPCLK2Freq>
 800de18:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	461d      	mov	r5, r3
 800de1e:	f04f 0600 	mov.w	r6, #0
 800de22:	46a8      	mov	r8, r5
 800de24:	46b1      	mov	r9, r6
 800de26:	eb18 0308 	adds.w	r3, r8, r8
 800de2a:	eb49 0409 	adc.w	r4, r9, r9
 800de2e:	4698      	mov	r8, r3
 800de30:	46a1      	mov	r9, r4
 800de32:	eb18 0805 	adds.w	r8, r8, r5
 800de36:	eb49 0906 	adc.w	r9, r9, r6
 800de3a:	f04f 0100 	mov.w	r1, #0
 800de3e:	f04f 0200 	mov.w	r2, #0
 800de42:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800de46:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800de4a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800de4e:	4688      	mov	r8, r1
 800de50:	4691      	mov	r9, r2
 800de52:	eb18 0005 	adds.w	r0, r8, r5
 800de56:	eb49 0106 	adc.w	r1, r9, r6
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	685b      	ldr	r3, [r3, #4]
 800de5e:	461d      	mov	r5, r3
 800de60:	f04f 0600 	mov.w	r6, #0
 800de64:	196b      	adds	r3, r5, r5
 800de66:	eb46 0406 	adc.w	r4, r6, r6
 800de6a:	461a      	mov	r2, r3
 800de6c:	4623      	mov	r3, r4
 800de6e:	f7f2 feaf 	bl	8000bd0 <__aeabi_uldivmod>
 800de72:	4603      	mov	r3, r0
 800de74:	460c      	mov	r4, r1
 800de76:	461a      	mov	r2, r3
 800de78:	4ba5      	ldr	r3, [pc, #660]	; (800e110 <UART_SetConfig+0x384>)
 800de7a:	fba3 2302 	umull	r2, r3, r3, r2
 800de7e:	095b      	lsrs	r3, r3, #5
 800de80:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	461d      	mov	r5, r3
 800de88:	f04f 0600 	mov.w	r6, #0
 800de8c:	46a9      	mov	r9, r5
 800de8e:	46b2      	mov	sl, r6
 800de90:	eb19 0309 	adds.w	r3, r9, r9
 800de94:	eb4a 040a 	adc.w	r4, sl, sl
 800de98:	4699      	mov	r9, r3
 800de9a:	46a2      	mov	sl, r4
 800de9c:	eb19 0905 	adds.w	r9, r9, r5
 800dea0:	eb4a 0a06 	adc.w	sl, sl, r6
 800dea4:	f04f 0100 	mov.w	r1, #0
 800dea8:	f04f 0200 	mov.w	r2, #0
 800deac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800deb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800deb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800deb8:	4689      	mov	r9, r1
 800deba:	4692      	mov	sl, r2
 800debc:	eb19 0005 	adds.w	r0, r9, r5
 800dec0:	eb4a 0106 	adc.w	r1, sl, r6
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	685b      	ldr	r3, [r3, #4]
 800dec8:	461d      	mov	r5, r3
 800deca:	f04f 0600 	mov.w	r6, #0
 800dece:	196b      	adds	r3, r5, r5
 800ded0:	eb46 0406 	adc.w	r4, r6, r6
 800ded4:	461a      	mov	r2, r3
 800ded6:	4623      	mov	r3, r4
 800ded8:	f7f2 fe7a 	bl	8000bd0 <__aeabi_uldivmod>
 800dedc:	4603      	mov	r3, r0
 800dede:	460c      	mov	r4, r1
 800dee0:	461a      	mov	r2, r3
 800dee2:	4b8b      	ldr	r3, [pc, #556]	; (800e110 <UART_SetConfig+0x384>)
 800dee4:	fba3 1302 	umull	r1, r3, r3, r2
 800dee8:	095b      	lsrs	r3, r3, #5
 800deea:	2164      	movs	r1, #100	; 0x64
 800deec:	fb01 f303 	mul.w	r3, r1, r3
 800def0:	1ad3      	subs	r3, r2, r3
 800def2:	00db      	lsls	r3, r3, #3
 800def4:	3332      	adds	r3, #50	; 0x32
 800def6:	4a86      	ldr	r2, [pc, #536]	; (800e110 <UART_SetConfig+0x384>)
 800def8:	fba2 2303 	umull	r2, r3, r2, r3
 800defc:	095b      	lsrs	r3, r3, #5
 800defe:	005b      	lsls	r3, r3, #1
 800df00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800df04:	4498      	add	r8, r3
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	461d      	mov	r5, r3
 800df0a:	f04f 0600 	mov.w	r6, #0
 800df0e:	46a9      	mov	r9, r5
 800df10:	46b2      	mov	sl, r6
 800df12:	eb19 0309 	adds.w	r3, r9, r9
 800df16:	eb4a 040a 	adc.w	r4, sl, sl
 800df1a:	4699      	mov	r9, r3
 800df1c:	46a2      	mov	sl, r4
 800df1e:	eb19 0905 	adds.w	r9, r9, r5
 800df22:	eb4a 0a06 	adc.w	sl, sl, r6
 800df26:	f04f 0100 	mov.w	r1, #0
 800df2a:	f04f 0200 	mov.w	r2, #0
 800df2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800df32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800df36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800df3a:	4689      	mov	r9, r1
 800df3c:	4692      	mov	sl, r2
 800df3e:	eb19 0005 	adds.w	r0, r9, r5
 800df42:	eb4a 0106 	adc.w	r1, sl, r6
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	461d      	mov	r5, r3
 800df4c:	f04f 0600 	mov.w	r6, #0
 800df50:	196b      	adds	r3, r5, r5
 800df52:	eb46 0406 	adc.w	r4, r6, r6
 800df56:	461a      	mov	r2, r3
 800df58:	4623      	mov	r3, r4
 800df5a:	f7f2 fe39 	bl	8000bd0 <__aeabi_uldivmod>
 800df5e:	4603      	mov	r3, r0
 800df60:	460c      	mov	r4, r1
 800df62:	461a      	mov	r2, r3
 800df64:	4b6a      	ldr	r3, [pc, #424]	; (800e110 <UART_SetConfig+0x384>)
 800df66:	fba3 1302 	umull	r1, r3, r3, r2
 800df6a:	095b      	lsrs	r3, r3, #5
 800df6c:	2164      	movs	r1, #100	; 0x64
 800df6e:	fb01 f303 	mul.w	r3, r1, r3
 800df72:	1ad3      	subs	r3, r2, r3
 800df74:	00db      	lsls	r3, r3, #3
 800df76:	3332      	adds	r3, #50	; 0x32
 800df78:	4a65      	ldr	r2, [pc, #404]	; (800e110 <UART_SetConfig+0x384>)
 800df7a:	fba2 2303 	umull	r2, r3, r2, r3
 800df7e:	095b      	lsrs	r3, r3, #5
 800df80:	f003 0207 	and.w	r2, r3, #7
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4442      	add	r2, r8
 800df8a:	609a      	str	r2, [r3, #8]
 800df8c:	e26f      	b.n	800e46e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800df8e:	f7fd fdfb 	bl	800bb88 <HAL_RCC_GetPCLK1Freq>
 800df92:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	461d      	mov	r5, r3
 800df98:	f04f 0600 	mov.w	r6, #0
 800df9c:	46a8      	mov	r8, r5
 800df9e:	46b1      	mov	r9, r6
 800dfa0:	eb18 0308 	adds.w	r3, r8, r8
 800dfa4:	eb49 0409 	adc.w	r4, r9, r9
 800dfa8:	4698      	mov	r8, r3
 800dfaa:	46a1      	mov	r9, r4
 800dfac:	eb18 0805 	adds.w	r8, r8, r5
 800dfb0:	eb49 0906 	adc.w	r9, r9, r6
 800dfb4:	f04f 0100 	mov.w	r1, #0
 800dfb8:	f04f 0200 	mov.w	r2, #0
 800dfbc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800dfc0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800dfc4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800dfc8:	4688      	mov	r8, r1
 800dfca:	4691      	mov	r9, r2
 800dfcc:	eb18 0005 	adds.w	r0, r8, r5
 800dfd0:	eb49 0106 	adc.w	r1, r9, r6
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	685b      	ldr	r3, [r3, #4]
 800dfd8:	461d      	mov	r5, r3
 800dfda:	f04f 0600 	mov.w	r6, #0
 800dfde:	196b      	adds	r3, r5, r5
 800dfe0:	eb46 0406 	adc.w	r4, r6, r6
 800dfe4:	461a      	mov	r2, r3
 800dfe6:	4623      	mov	r3, r4
 800dfe8:	f7f2 fdf2 	bl	8000bd0 <__aeabi_uldivmod>
 800dfec:	4603      	mov	r3, r0
 800dfee:	460c      	mov	r4, r1
 800dff0:	461a      	mov	r2, r3
 800dff2:	4b47      	ldr	r3, [pc, #284]	; (800e110 <UART_SetConfig+0x384>)
 800dff4:	fba3 2302 	umull	r2, r3, r3, r2
 800dff8:	095b      	lsrs	r3, r3, #5
 800dffa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	461d      	mov	r5, r3
 800e002:	f04f 0600 	mov.w	r6, #0
 800e006:	46a9      	mov	r9, r5
 800e008:	46b2      	mov	sl, r6
 800e00a:	eb19 0309 	adds.w	r3, r9, r9
 800e00e:	eb4a 040a 	adc.w	r4, sl, sl
 800e012:	4699      	mov	r9, r3
 800e014:	46a2      	mov	sl, r4
 800e016:	eb19 0905 	adds.w	r9, r9, r5
 800e01a:	eb4a 0a06 	adc.w	sl, sl, r6
 800e01e:	f04f 0100 	mov.w	r1, #0
 800e022:	f04f 0200 	mov.w	r2, #0
 800e026:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e02a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e02e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e032:	4689      	mov	r9, r1
 800e034:	4692      	mov	sl, r2
 800e036:	eb19 0005 	adds.w	r0, r9, r5
 800e03a:	eb4a 0106 	adc.w	r1, sl, r6
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	461d      	mov	r5, r3
 800e044:	f04f 0600 	mov.w	r6, #0
 800e048:	196b      	adds	r3, r5, r5
 800e04a:	eb46 0406 	adc.w	r4, r6, r6
 800e04e:	461a      	mov	r2, r3
 800e050:	4623      	mov	r3, r4
 800e052:	f7f2 fdbd 	bl	8000bd0 <__aeabi_uldivmod>
 800e056:	4603      	mov	r3, r0
 800e058:	460c      	mov	r4, r1
 800e05a:	461a      	mov	r2, r3
 800e05c:	4b2c      	ldr	r3, [pc, #176]	; (800e110 <UART_SetConfig+0x384>)
 800e05e:	fba3 1302 	umull	r1, r3, r3, r2
 800e062:	095b      	lsrs	r3, r3, #5
 800e064:	2164      	movs	r1, #100	; 0x64
 800e066:	fb01 f303 	mul.w	r3, r1, r3
 800e06a:	1ad3      	subs	r3, r2, r3
 800e06c:	00db      	lsls	r3, r3, #3
 800e06e:	3332      	adds	r3, #50	; 0x32
 800e070:	4a27      	ldr	r2, [pc, #156]	; (800e110 <UART_SetConfig+0x384>)
 800e072:	fba2 2303 	umull	r2, r3, r2, r3
 800e076:	095b      	lsrs	r3, r3, #5
 800e078:	005b      	lsls	r3, r3, #1
 800e07a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e07e:	4498      	add	r8, r3
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	461d      	mov	r5, r3
 800e084:	f04f 0600 	mov.w	r6, #0
 800e088:	46a9      	mov	r9, r5
 800e08a:	46b2      	mov	sl, r6
 800e08c:	eb19 0309 	adds.w	r3, r9, r9
 800e090:	eb4a 040a 	adc.w	r4, sl, sl
 800e094:	4699      	mov	r9, r3
 800e096:	46a2      	mov	sl, r4
 800e098:	eb19 0905 	adds.w	r9, r9, r5
 800e09c:	eb4a 0a06 	adc.w	sl, sl, r6
 800e0a0:	f04f 0100 	mov.w	r1, #0
 800e0a4:	f04f 0200 	mov.w	r2, #0
 800e0a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e0ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e0b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e0b4:	4689      	mov	r9, r1
 800e0b6:	4692      	mov	sl, r2
 800e0b8:	eb19 0005 	adds.w	r0, r9, r5
 800e0bc:	eb4a 0106 	adc.w	r1, sl, r6
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	461d      	mov	r5, r3
 800e0c6:	f04f 0600 	mov.w	r6, #0
 800e0ca:	196b      	adds	r3, r5, r5
 800e0cc:	eb46 0406 	adc.w	r4, r6, r6
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	4623      	mov	r3, r4
 800e0d4:	f7f2 fd7c 	bl	8000bd0 <__aeabi_uldivmod>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	460c      	mov	r4, r1
 800e0dc:	461a      	mov	r2, r3
 800e0de:	4b0c      	ldr	r3, [pc, #48]	; (800e110 <UART_SetConfig+0x384>)
 800e0e0:	fba3 1302 	umull	r1, r3, r3, r2
 800e0e4:	095b      	lsrs	r3, r3, #5
 800e0e6:	2164      	movs	r1, #100	; 0x64
 800e0e8:	fb01 f303 	mul.w	r3, r1, r3
 800e0ec:	1ad3      	subs	r3, r2, r3
 800e0ee:	00db      	lsls	r3, r3, #3
 800e0f0:	3332      	adds	r3, #50	; 0x32
 800e0f2:	4a07      	ldr	r2, [pc, #28]	; (800e110 <UART_SetConfig+0x384>)
 800e0f4:	fba2 2303 	umull	r2, r3, r2, r3
 800e0f8:	095b      	lsrs	r3, r3, #5
 800e0fa:	f003 0207 	and.w	r2, r3, #7
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	4442      	add	r2, r8
 800e104:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800e106:	e1b2      	b.n	800e46e <UART_SetConfig+0x6e2>
 800e108:	40011000 	.word	0x40011000
 800e10c:	40011400 	.word	0x40011400
 800e110:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	4ad7      	ldr	r2, [pc, #860]	; (800e478 <UART_SetConfig+0x6ec>)
 800e11a:	4293      	cmp	r3, r2
 800e11c:	d005      	beq.n	800e12a <UART_SetConfig+0x39e>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	4ad6      	ldr	r2, [pc, #856]	; (800e47c <UART_SetConfig+0x6f0>)
 800e124:	4293      	cmp	r3, r2
 800e126:	f040 80d1 	bne.w	800e2cc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800e12a:	f7fd fd41 	bl	800bbb0 <HAL_RCC_GetPCLK2Freq>
 800e12e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	469a      	mov	sl, r3
 800e134:	f04f 0b00 	mov.w	fp, #0
 800e138:	46d0      	mov	r8, sl
 800e13a:	46d9      	mov	r9, fp
 800e13c:	eb18 0308 	adds.w	r3, r8, r8
 800e140:	eb49 0409 	adc.w	r4, r9, r9
 800e144:	4698      	mov	r8, r3
 800e146:	46a1      	mov	r9, r4
 800e148:	eb18 080a 	adds.w	r8, r8, sl
 800e14c:	eb49 090b 	adc.w	r9, r9, fp
 800e150:	f04f 0100 	mov.w	r1, #0
 800e154:	f04f 0200 	mov.w	r2, #0
 800e158:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e15c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e160:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e164:	4688      	mov	r8, r1
 800e166:	4691      	mov	r9, r2
 800e168:	eb1a 0508 	adds.w	r5, sl, r8
 800e16c:	eb4b 0609 	adc.w	r6, fp, r9
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	685b      	ldr	r3, [r3, #4]
 800e174:	4619      	mov	r1, r3
 800e176:	f04f 0200 	mov.w	r2, #0
 800e17a:	f04f 0300 	mov.w	r3, #0
 800e17e:	f04f 0400 	mov.w	r4, #0
 800e182:	0094      	lsls	r4, r2, #2
 800e184:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e188:	008b      	lsls	r3, r1, #2
 800e18a:	461a      	mov	r2, r3
 800e18c:	4623      	mov	r3, r4
 800e18e:	4628      	mov	r0, r5
 800e190:	4631      	mov	r1, r6
 800e192:	f7f2 fd1d 	bl	8000bd0 <__aeabi_uldivmod>
 800e196:	4603      	mov	r3, r0
 800e198:	460c      	mov	r4, r1
 800e19a:	461a      	mov	r2, r3
 800e19c:	4bb8      	ldr	r3, [pc, #736]	; (800e480 <UART_SetConfig+0x6f4>)
 800e19e:	fba3 2302 	umull	r2, r3, r3, r2
 800e1a2:	095b      	lsrs	r3, r3, #5
 800e1a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	469b      	mov	fp, r3
 800e1ac:	f04f 0c00 	mov.w	ip, #0
 800e1b0:	46d9      	mov	r9, fp
 800e1b2:	46e2      	mov	sl, ip
 800e1b4:	eb19 0309 	adds.w	r3, r9, r9
 800e1b8:	eb4a 040a 	adc.w	r4, sl, sl
 800e1bc:	4699      	mov	r9, r3
 800e1be:	46a2      	mov	sl, r4
 800e1c0:	eb19 090b 	adds.w	r9, r9, fp
 800e1c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e1c8:	f04f 0100 	mov.w	r1, #0
 800e1cc:	f04f 0200 	mov.w	r2, #0
 800e1d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e1d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e1d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e1dc:	4689      	mov	r9, r1
 800e1de:	4692      	mov	sl, r2
 800e1e0:	eb1b 0509 	adds.w	r5, fp, r9
 800e1e4:	eb4c 060a 	adc.w	r6, ip, sl
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	f04f 0200 	mov.w	r2, #0
 800e1f2:	f04f 0300 	mov.w	r3, #0
 800e1f6:	f04f 0400 	mov.w	r4, #0
 800e1fa:	0094      	lsls	r4, r2, #2
 800e1fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e200:	008b      	lsls	r3, r1, #2
 800e202:	461a      	mov	r2, r3
 800e204:	4623      	mov	r3, r4
 800e206:	4628      	mov	r0, r5
 800e208:	4631      	mov	r1, r6
 800e20a:	f7f2 fce1 	bl	8000bd0 <__aeabi_uldivmod>
 800e20e:	4603      	mov	r3, r0
 800e210:	460c      	mov	r4, r1
 800e212:	461a      	mov	r2, r3
 800e214:	4b9a      	ldr	r3, [pc, #616]	; (800e480 <UART_SetConfig+0x6f4>)
 800e216:	fba3 1302 	umull	r1, r3, r3, r2
 800e21a:	095b      	lsrs	r3, r3, #5
 800e21c:	2164      	movs	r1, #100	; 0x64
 800e21e:	fb01 f303 	mul.w	r3, r1, r3
 800e222:	1ad3      	subs	r3, r2, r3
 800e224:	011b      	lsls	r3, r3, #4
 800e226:	3332      	adds	r3, #50	; 0x32
 800e228:	4a95      	ldr	r2, [pc, #596]	; (800e480 <UART_SetConfig+0x6f4>)
 800e22a:	fba2 2303 	umull	r2, r3, r2, r3
 800e22e:	095b      	lsrs	r3, r3, #5
 800e230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e234:	4498      	add	r8, r3
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	469b      	mov	fp, r3
 800e23a:	f04f 0c00 	mov.w	ip, #0
 800e23e:	46d9      	mov	r9, fp
 800e240:	46e2      	mov	sl, ip
 800e242:	eb19 0309 	adds.w	r3, r9, r9
 800e246:	eb4a 040a 	adc.w	r4, sl, sl
 800e24a:	4699      	mov	r9, r3
 800e24c:	46a2      	mov	sl, r4
 800e24e:	eb19 090b 	adds.w	r9, r9, fp
 800e252:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e256:	f04f 0100 	mov.w	r1, #0
 800e25a:	f04f 0200 	mov.w	r2, #0
 800e25e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e262:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e266:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e26a:	4689      	mov	r9, r1
 800e26c:	4692      	mov	sl, r2
 800e26e:	eb1b 0509 	adds.w	r5, fp, r9
 800e272:	eb4c 060a 	adc.w	r6, ip, sl
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	685b      	ldr	r3, [r3, #4]
 800e27a:	4619      	mov	r1, r3
 800e27c:	f04f 0200 	mov.w	r2, #0
 800e280:	f04f 0300 	mov.w	r3, #0
 800e284:	f04f 0400 	mov.w	r4, #0
 800e288:	0094      	lsls	r4, r2, #2
 800e28a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e28e:	008b      	lsls	r3, r1, #2
 800e290:	461a      	mov	r2, r3
 800e292:	4623      	mov	r3, r4
 800e294:	4628      	mov	r0, r5
 800e296:	4631      	mov	r1, r6
 800e298:	f7f2 fc9a 	bl	8000bd0 <__aeabi_uldivmod>
 800e29c:	4603      	mov	r3, r0
 800e29e:	460c      	mov	r4, r1
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	4b77      	ldr	r3, [pc, #476]	; (800e480 <UART_SetConfig+0x6f4>)
 800e2a4:	fba3 1302 	umull	r1, r3, r3, r2
 800e2a8:	095b      	lsrs	r3, r3, #5
 800e2aa:	2164      	movs	r1, #100	; 0x64
 800e2ac:	fb01 f303 	mul.w	r3, r1, r3
 800e2b0:	1ad3      	subs	r3, r2, r3
 800e2b2:	011b      	lsls	r3, r3, #4
 800e2b4:	3332      	adds	r3, #50	; 0x32
 800e2b6:	4a72      	ldr	r2, [pc, #456]	; (800e480 <UART_SetConfig+0x6f4>)
 800e2b8:	fba2 2303 	umull	r2, r3, r2, r3
 800e2bc:	095b      	lsrs	r3, r3, #5
 800e2be:	f003 020f 	and.w	r2, r3, #15
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	4442      	add	r2, r8
 800e2c8:	609a      	str	r2, [r3, #8]
 800e2ca:	e0d0      	b.n	800e46e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800e2cc:	f7fd fc5c 	bl	800bb88 <HAL_RCC_GetPCLK1Freq>
 800e2d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	469a      	mov	sl, r3
 800e2d6:	f04f 0b00 	mov.w	fp, #0
 800e2da:	46d0      	mov	r8, sl
 800e2dc:	46d9      	mov	r9, fp
 800e2de:	eb18 0308 	adds.w	r3, r8, r8
 800e2e2:	eb49 0409 	adc.w	r4, r9, r9
 800e2e6:	4698      	mov	r8, r3
 800e2e8:	46a1      	mov	r9, r4
 800e2ea:	eb18 080a 	adds.w	r8, r8, sl
 800e2ee:	eb49 090b 	adc.w	r9, r9, fp
 800e2f2:	f04f 0100 	mov.w	r1, #0
 800e2f6:	f04f 0200 	mov.w	r2, #0
 800e2fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e2fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e302:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e306:	4688      	mov	r8, r1
 800e308:	4691      	mov	r9, r2
 800e30a:	eb1a 0508 	adds.w	r5, sl, r8
 800e30e:	eb4b 0609 	adc.w	r6, fp, r9
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	4619      	mov	r1, r3
 800e318:	f04f 0200 	mov.w	r2, #0
 800e31c:	f04f 0300 	mov.w	r3, #0
 800e320:	f04f 0400 	mov.w	r4, #0
 800e324:	0094      	lsls	r4, r2, #2
 800e326:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e32a:	008b      	lsls	r3, r1, #2
 800e32c:	461a      	mov	r2, r3
 800e32e:	4623      	mov	r3, r4
 800e330:	4628      	mov	r0, r5
 800e332:	4631      	mov	r1, r6
 800e334:	f7f2 fc4c 	bl	8000bd0 <__aeabi_uldivmod>
 800e338:	4603      	mov	r3, r0
 800e33a:	460c      	mov	r4, r1
 800e33c:	461a      	mov	r2, r3
 800e33e:	4b50      	ldr	r3, [pc, #320]	; (800e480 <UART_SetConfig+0x6f4>)
 800e340:	fba3 2302 	umull	r2, r3, r3, r2
 800e344:	095b      	lsrs	r3, r3, #5
 800e346:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	469b      	mov	fp, r3
 800e34e:	f04f 0c00 	mov.w	ip, #0
 800e352:	46d9      	mov	r9, fp
 800e354:	46e2      	mov	sl, ip
 800e356:	eb19 0309 	adds.w	r3, r9, r9
 800e35a:	eb4a 040a 	adc.w	r4, sl, sl
 800e35e:	4699      	mov	r9, r3
 800e360:	46a2      	mov	sl, r4
 800e362:	eb19 090b 	adds.w	r9, r9, fp
 800e366:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e36a:	f04f 0100 	mov.w	r1, #0
 800e36e:	f04f 0200 	mov.w	r2, #0
 800e372:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e376:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e37a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e37e:	4689      	mov	r9, r1
 800e380:	4692      	mov	sl, r2
 800e382:	eb1b 0509 	adds.w	r5, fp, r9
 800e386:	eb4c 060a 	adc.w	r6, ip, sl
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	4619      	mov	r1, r3
 800e390:	f04f 0200 	mov.w	r2, #0
 800e394:	f04f 0300 	mov.w	r3, #0
 800e398:	f04f 0400 	mov.w	r4, #0
 800e39c:	0094      	lsls	r4, r2, #2
 800e39e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e3a2:	008b      	lsls	r3, r1, #2
 800e3a4:	461a      	mov	r2, r3
 800e3a6:	4623      	mov	r3, r4
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	4631      	mov	r1, r6
 800e3ac:	f7f2 fc10 	bl	8000bd0 <__aeabi_uldivmod>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	460c      	mov	r4, r1
 800e3b4:	461a      	mov	r2, r3
 800e3b6:	4b32      	ldr	r3, [pc, #200]	; (800e480 <UART_SetConfig+0x6f4>)
 800e3b8:	fba3 1302 	umull	r1, r3, r3, r2
 800e3bc:	095b      	lsrs	r3, r3, #5
 800e3be:	2164      	movs	r1, #100	; 0x64
 800e3c0:	fb01 f303 	mul.w	r3, r1, r3
 800e3c4:	1ad3      	subs	r3, r2, r3
 800e3c6:	011b      	lsls	r3, r3, #4
 800e3c8:	3332      	adds	r3, #50	; 0x32
 800e3ca:	4a2d      	ldr	r2, [pc, #180]	; (800e480 <UART_SetConfig+0x6f4>)
 800e3cc:	fba2 2303 	umull	r2, r3, r2, r3
 800e3d0:	095b      	lsrs	r3, r3, #5
 800e3d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e3d6:	4498      	add	r8, r3
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	469b      	mov	fp, r3
 800e3dc:	f04f 0c00 	mov.w	ip, #0
 800e3e0:	46d9      	mov	r9, fp
 800e3e2:	46e2      	mov	sl, ip
 800e3e4:	eb19 0309 	adds.w	r3, r9, r9
 800e3e8:	eb4a 040a 	adc.w	r4, sl, sl
 800e3ec:	4699      	mov	r9, r3
 800e3ee:	46a2      	mov	sl, r4
 800e3f0:	eb19 090b 	adds.w	r9, r9, fp
 800e3f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e3f8:	f04f 0100 	mov.w	r1, #0
 800e3fc:	f04f 0200 	mov.w	r2, #0
 800e400:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e404:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e408:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e40c:	4689      	mov	r9, r1
 800e40e:	4692      	mov	sl, r2
 800e410:	eb1b 0509 	adds.w	r5, fp, r9
 800e414:	eb4c 060a 	adc.w	r6, ip, sl
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	685b      	ldr	r3, [r3, #4]
 800e41c:	4619      	mov	r1, r3
 800e41e:	f04f 0200 	mov.w	r2, #0
 800e422:	f04f 0300 	mov.w	r3, #0
 800e426:	f04f 0400 	mov.w	r4, #0
 800e42a:	0094      	lsls	r4, r2, #2
 800e42c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e430:	008b      	lsls	r3, r1, #2
 800e432:	461a      	mov	r2, r3
 800e434:	4623      	mov	r3, r4
 800e436:	4628      	mov	r0, r5
 800e438:	4631      	mov	r1, r6
 800e43a:	f7f2 fbc9 	bl	8000bd0 <__aeabi_uldivmod>
 800e43e:	4603      	mov	r3, r0
 800e440:	460c      	mov	r4, r1
 800e442:	461a      	mov	r2, r3
 800e444:	4b0e      	ldr	r3, [pc, #56]	; (800e480 <UART_SetConfig+0x6f4>)
 800e446:	fba3 1302 	umull	r1, r3, r3, r2
 800e44a:	095b      	lsrs	r3, r3, #5
 800e44c:	2164      	movs	r1, #100	; 0x64
 800e44e:	fb01 f303 	mul.w	r3, r1, r3
 800e452:	1ad3      	subs	r3, r2, r3
 800e454:	011b      	lsls	r3, r3, #4
 800e456:	3332      	adds	r3, #50	; 0x32
 800e458:	4a09      	ldr	r2, [pc, #36]	; (800e480 <UART_SetConfig+0x6f4>)
 800e45a:	fba2 2303 	umull	r2, r3, r2, r3
 800e45e:	095b      	lsrs	r3, r3, #5
 800e460:	f003 020f 	and.w	r2, r3, #15
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	4442      	add	r2, r8
 800e46a:	609a      	str	r2, [r3, #8]
}
 800e46c:	e7ff      	b.n	800e46e <UART_SetConfig+0x6e2>
 800e46e:	bf00      	nop
 800e470:	3714      	adds	r7, #20
 800e472:	46bd      	mov	sp, r7
 800e474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e478:	40011000 	.word	0x40011000
 800e47c:	40011400 	.word	0x40011400
 800e480:	51eb851f 	.word	0x51eb851f

0800e484 <_ZdlPvj>:
 800e484:	f000 b800 	b.w	800e488 <_ZdlPv>

0800e488 <_ZdlPv>:
 800e488:	f002 bb70 	b.w	8010b6c <free>
 800e48c:	0000      	movs	r0, r0
	...

0800e490 <cos>:
 800e490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e492:	ec51 0b10 	vmov	r0, r1, d0
 800e496:	4a1e      	ldr	r2, [pc, #120]	; (800e510 <cos+0x80>)
 800e498:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e49c:	4293      	cmp	r3, r2
 800e49e:	dc06      	bgt.n	800e4ae <cos+0x1e>
 800e4a0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800e508 <cos+0x78>
 800e4a4:	f001 fbf0 	bl	800fc88 <__kernel_cos>
 800e4a8:	ec51 0b10 	vmov	r0, r1, d0
 800e4ac:	e007      	b.n	800e4be <cos+0x2e>
 800e4ae:	4a19      	ldr	r2, [pc, #100]	; (800e514 <cos+0x84>)
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	dd09      	ble.n	800e4c8 <cos+0x38>
 800e4b4:	ee10 2a10 	vmov	r2, s0
 800e4b8:	460b      	mov	r3, r1
 800e4ba:	f7f1 fe89 	bl	80001d0 <__aeabi_dsub>
 800e4be:	ec41 0b10 	vmov	d0, r0, r1
 800e4c2:	b005      	add	sp, #20
 800e4c4:	f85d fb04 	ldr.w	pc, [sp], #4
 800e4c8:	4668      	mov	r0, sp
 800e4ca:	f000 ffa1 	bl	800f410 <__ieee754_rem_pio2>
 800e4ce:	f000 0003 	and.w	r0, r0, #3
 800e4d2:	2801      	cmp	r0, #1
 800e4d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e4d8:	ed9d 0b00 	vldr	d0, [sp]
 800e4dc:	d007      	beq.n	800e4ee <cos+0x5e>
 800e4de:	2802      	cmp	r0, #2
 800e4e0:	d00e      	beq.n	800e500 <cos+0x70>
 800e4e2:	2800      	cmp	r0, #0
 800e4e4:	d0de      	beq.n	800e4a4 <cos+0x14>
 800e4e6:	2001      	movs	r0, #1
 800e4e8:	f001 ffd6 	bl	8010498 <__kernel_sin>
 800e4ec:	e7dc      	b.n	800e4a8 <cos+0x18>
 800e4ee:	f001 ffd3 	bl	8010498 <__kernel_sin>
 800e4f2:	ec53 2b10 	vmov	r2, r3, d0
 800e4f6:	ee10 0a10 	vmov	r0, s0
 800e4fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e4fe:	e7de      	b.n	800e4be <cos+0x2e>
 800e500:	f001 fbc2 	bl	800fc88 <__kernel_cos>
 800e504:	e7f5      	b.n	800e4f2 <cos+0x62>
 800e506:	bf00      	nop
	...
 800e510:	3fe921fb 	.word	0x3fe921fb
 800e514:	7fefffff 	.word	0x7fefffff

0800e518 <sin>:
 800e518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e51a:	ec51 0b10 	vmov	r0, r1, d0
 800e51e:	4a20      	ldr	r2, [pc, #128]	; (800e5a0 <sin+0x88>)
 800e520:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e524:	4293      	cmp	r3, r2
 800e526:	dc07      	bgt.n	800e538 <sin+0x20>
 800e528:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800e598 <sin+0x80>
 800e52c:	2000      	movs	r0, #0
 800e52e:	f001 ffb3 	bl	8010498 <__kernel_sin>
 800e532:	ec51 0b10 	vmov	r0, r1, d0
 800e536:	e007      	b.n	800e548 <sin+0x30>
 800e538:	4a1a      	ldr	r2, [pc, #104]	; (800e5a4 <sin+0x8c>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	dd09      	ble.n	800e552 <sin+0x3a>
 800e53e:	ee10 2a10 	vmov	r2, s0
 800e542:	460b      	mov	r3, r1
 800e544:	f7f1 fe44 	bl	80001d0 <__aeabi_dsub>
 800e548:	ec41 0b10 	vmov	d0, r0, r1
 800e54c:	b005      	add	sp, #20
 800e54e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e552:	4668      	mov	r0, sp
 800e554:	f000 ff5c 	bl	800f410 <__ieee754_rem_pio2>
 800e558:	f000 0003 	and.w	r0, r0, #3
 800e55c:	2801      	cmp	r0, #1
 800e55e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e562:	ed9d 0b00 	vldr	d0, [sp]
 800e566:	d004      	beq.n	800e572 <sin+0x5a>
 800e568:	2802      	cmp	r0, #2
 800e56a:	d005      	beq.n	800e578 <sin+0x60>
 800e56c:	b970      	cbnz	r0, 800e58c <sin+0x74>
 800e56e:	2001      	movs	r0, #1
 800e570:	e7dd      	b.n	800e52e <sin+0x16>
 800e572:	f001 fb89 	bl	800fc88 <__kernel_cos>
 800e576:	e7dc      	b.n	800e532 <sin+0x1a>
 800e578:	2001      	movs	r0, #1
 800e57a:	f001 ff8d 	bl	8010498 <__kernel_sin>
 800e57e:	ec53 2b10 	vmov	r2, r3, d0
 800e582:	ee10 0a10 	vmov	r0, s0
 800e586:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e58a:	e7dd      	b.n	800e548 <sin+0x30>
 800e58c:	f001 fb7c 	bl	800fc88 <__kernel_cos>
 800e590:	e7f5      	b.n	800e57e <sin+0x66>
 800e592:	bf00      	nop
 800e594:	f3af 8000 	nop.w
	...
 800e5a0:	3fe921fb 	.word	0x3fe921fb
 800e5a4:	7fefffff 	.word	0x7fefffff

0800e5a8 <pow>:
 800e5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ac:	ed2d 8b04 	vpush	{d8-d9}
 800e5b0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800e884 <pow+0x2dc>
 800e5b4:	b08d      	sub	sp, #52	; 0x34
 800e5b6:	ec57 6b10 	vmov	r6, r7, d0
 800e5ba:	ec55 4b11 	vmov	r4, r5, d1
 800e5be:	f000 fa17 	bl	800e9f0 <__ieee754_pow>
 800e5c2:	f999 3000 	ldrsb.w	r3, [r9]
 800e5c6:	9300      	str	r3, [sp, #0]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	eeb0 8a40 	vmov.f32	s16, s0
 800e5ce:	eef0 8a60 	vmov.f32	s17, s1
 800e5d2:	46c8      	mov	r8, r9
 800e5d4:	d05f      	beq.n	800e696 <pow+0xee>
 800e5d6:	4622      	mov	r2, r4
 800e5d8:	462b      	mov	r3, r5
 800e5da:	4620      	mov	r0, r4
 800e5dc:	4629      	mov	r1, r5
 800e5de:	f7f2 fa49 	bl	8000a74 <__aeabi_dcmpun>
 800e5e2:	4683      	mov	fp, r0
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	d156      	bne.n	800e696 <pow+0xee>
 800e5e8:	4632      	mov	r2, r6
 800e5ea:	463b      	mov	r3, r7
 800e5ec:	4630      	mov	r0, r6
 800e5ee:	4639      	mov	r1, r7
 800e5f0:	f7f2 fa40 	bl	8000a74 <__aeabi_dcmpun>
 800e5f4:	9001      	str	r0, [sp, #4]
 800e5f6:	b1e8      	cbz	r0, 800e634 <pow+0x8c>
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	4629      	mov	r1, r5
 800e600:	f7f2 fa06 	bl	8000a10 <__aeabi_dcmpeq>
 800e604:	2800      	cmp	r0, #0
 800e606:	d046      	beq.n	800e696 <pow+0xee>
 800e608:	2301      	movs	r3, #1
 800e60a:	9302      	str	r3, [sp, #8]
 800e60c:	4b96      	ldr	r3, [pc, #600]	; (800e868 <pow+0x2c0>)
 800e60e:	9303      	str	r3, [sp, #12]
 800e610:	4b96      	ldr	r3, [pc, #600]	; (800e86c <pow+0x2c4>)
 800e612:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800e616:	2200      	movs	r2, #0
 800e618:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e61c:	9b00      	ldr	r3, [sp, #0]
 800e61e:	2b02      	cmp	r3, #2
 800e620:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e624:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e628:	d033      	beq.n	800e692 <pow+0xea>
 800e62a:	a802      	add	r0, sp, #8
 800e62c:	f002 f884 	bl	8010738 <matherr>
 800e630:	bb48      	cbnz	r0, 800e686 <pow+0xde>
 800e632:	e05d      	b.n	800e6f0 <pow+0x148>
 800e634:	f04f 0a00 	mov.w	sl, #0
 800e638:	f04f 0b00 	mov.w	fp, #0
 800e63c:	4652      	mov	r2, sl
 800e63e:	465b      	mov	r3, fp
 800e640:	4630      	mov	r0, r6
 800e642:	4639      	mov	r1, r7
 800e644:	f7f2 f9e4 	bl	8000a10 <__aeabi_dcmpeq>
 800e648:	ec4b ab19 	vmov	d9, sl, fp
 800e64c:	2800      	cmp	r0, #0
 800e64e:	d054      	beq.n	800e6fa <pow+0x152>
 800e650:	4652      	mov	r2, sl
 800e652:	465b      	mov	r3, fp
 800e654:	4620      	mov	r0, r4
 800e656:	4629      	mov	r1, r5
 800e658:	f7f2 f9da 	bl	8000a10 <__aeabi_dcmpeq>
 800e65c:	4680      	mov	r8, r0
 800e65e:	b318      	cbz	r0, 800e6a8 <pow+0x100>
 800e660:	2301      	movs	r3, #1
 800e662:	9302      	str	r3, [sp, #8]
 800e664:	4b80      	ldr	r3, [pc, #512]	; (800e868 <pow+0x2c0>)
 800e666:	9303      	str	r3, [sp, #12]
 800e668:	9b01      	ldr	r3, [sp, #4]
 800e66a:	930a      	str	r3, [sp, #40]	; 0x28
 800e66c:	9b00      	ldr	r3, [sp, #0]
 800e66e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e672:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e676:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d0d5      	beq.n	800e62a <pow+0x82>
 800e67e:	4b7b      	ldr	r3, [pc, #492]	; (800e86c <pow+0x2c4>)
 800e680:	2200      	movs	r2, #0
 800e682:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e688:	b11b      	cbz	r3, 800e692 <pow+0xea>
 800e68a:	f002 fa45 	bl	8010b18 <__errno>
 800e68e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e690:	6003      	str	r3, [r0, #0]
 800e692:	ed9d 8b08 	vldr	d8, [sp, #32]
 800e696:	eeb0 0a48 	vmov.f32	s0, s16
 800e69a:	eef0 0a68 	vmov.f32	s1, s17
 800e69e:	b00d      	add	sp, #52	; 0x34
 800e6a0:	ecbd 8b04 	vpop	{d8-d9}
 800e6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6a8:	ec45 4b10 	vmov	d0, r4, r5
 800e6ac:	f001 ffb7 	bl	801061e <finite>
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	d0f0      	beq.n	800e696 <pow+0xee>
 800e6b4:	4652      	mov	r2, sl
 800e6b6:	465b      	mov	r3, fp
 800e6b8:	4620      	mov	r0, r4
 800e6ba:	4629      	mov	r1, r5
 800e6bc:	f7f2 f9b2 	bl	8000a24 <__aeabi_dcmplt>
 800e6c0:	2800      	cmp	r0, #0
 800e6c2:	d0e8      	beq.n	800e696 <pow+0xee>
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	9302      	str	r3, [sp, #8]
 800e6c8:	4b67      	ldr	r3, [pc, #412]	; (800e868 <pow+0x2c0>)
 800e6ca:	9303      	str	r3, [sp, #12]
 800e6cc:	f999 3000 	ldrsb.w	r3, [r9]
 800e6d0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800e6d4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e6d8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e6dc:	b913      	cbnz	r3, 800e6e4 <pow+0x13c>
 800e6de:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800e6e2:	e7a2      	b.n	800e62a <pow+0x82>
 800e6e4:	4962      	ldr	r1, [pc, #392]	; (800e870 <pow+0x2c8>)
 800e6e6:	2000      	movs	r0, #0
 800e6e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e6ec:	2b02      	cmp	r3, #2
 800e6ee:	d19c      	bne.n	800e62a <pow+0x82>
 800e6f0:	f002 fa12 	bl	8010b18 <__errno>
 800e6f4:	2321      	movs	r3, #33	; 0x21
 800e6f6:	6003      	str	r3, [r0, #0]
 800e6f8:	e7c5      	b.n	800e686 <pow+0xde>
 800e6fa:	eeb0 0a48 	vmov.f32	s0, s16
 800e6fe:	eef0 0a68 	vmov.f32	s1, s17
 800e702:	f001 ff8c 	bl	801061e <finite>
 800e706:	9000      	str	r0, [sp, #0]
 800e708:	2800      	cmp	r0, #0
 800e70a:	f040 8081 	bne.w	800e810 <pow+0x268>
 800e70e:	ec47 6b10 	vmov	d0, r6, r7
 800e712:	f001 ff84 	bl	801061e <finite>
 800e716:	2800      	cmp	r0, #0
 800e718:	d07a      	beq.n	800e810 <pow+0x268>
 800e71a:	ec45 4b10 	vmov	d0, r4, r5
 800e71e:	f001 ff7e 	bl	801061e <finite>
 800e722:	2800      	cmp	r0, #0
 800e724:	d074      	beq.n	800e810 <pow+0x268>
 800e726:	ec53 2b18 	vmov	r2, r3, d8
 800e72a:	ee18 0a10 	vmov	r0, s16
 800e72e:	4619      	mov	r1, r3
 800e730:	f7f2 f9a0 	bl	8000a74 <__aeabi_dcmpun>
 800e734:	f999 9000 	ldrsb.w	r9, [r9]
 800e738:	4b4b      	ldr	r3, [pc, #300]	; (800e868 <pow+0x2c0>)
 800e73a:	b1b0      	cbz	r0, 800e76a <pow+0x1c2>
 800e73c:	2201      	movs	r2, #1
 800e73e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e742:	9b00      	ldr	r3, [sp, #0]
 800e744:	930a      	str	r3, [sp, #40]	; 0x28
 800e746:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e74a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e74e:	f1b9 0f00 	cmp.w	r9, #0
 800e752:	d0c4      	beq.n	800e6de <pow+0x136>
 800e754:	4652      	mov	r2, sl
 800e756:	465b      	mov	r3, fp
 800e758:	4650      	mov	r0, sl
 800e75a:	4659      	mov	r1, fp
 800e75c:	f7f2 f81a 	bl	8000794 <__aeabi_ddiv>
 800e760:	f1b9 0f02 	cmp.w	r9, #2
 800e764:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e768:	e7c1      	b.n	800e6ee <pow+0x146>
 800e76a:	2203      	movs	r2, #3
 800e76c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e770:	900a      	str	r0, [sp, #40]	; 0x28
 800e772:	4629      	mov	r1, r5
 800e774:	4620      	mov	r0, r4
 800e776:	2200      	movs	r2, #0
 800e778:	4b3e      	ldr	r3, [pc, #248]	; (800e874 <pow+0x2cc>)
 800e77a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e77e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e782:	f7f1 fedd 	bl	8000540 <__aeabi_dmul>
 800e786:	4604      	mov	r4, r0
 800e788:	460d      	mov	r5, r1
 800e78a:	f1b9 0f00 	cmp.w	r9, #0
 800e78e:	d124      	bne.n	800e7da <pow+0x232>
 800e790:	4b39      	ldr	r3, [pc, #228]	; (800e878 <pow+0x2d0>)
 800e792:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800e796:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e79a:	4630      	mov	r0, r6
 800e79c:	4652      	mov	r2, sl
 800e79e:	465b      	mov	r3, fp
 800e7a0:	4639      	mov	r1, r7
 800e7a2:	f7f2 f93f 	bl	8000a24 <__aeabi_dcmplt>
 800e7a6:	2800      	cmp	r0, #0
 800e7a8:	d056      	beq.n	800e858 <pow+0x2b0>
 800e7aa:	ec45 4b10 	vmov	d0, r4, r5
 800e7ae:	f001 ffcf 	bl	8010750 <rint>
 800e7b2:	4622      	mov	r2, r4
 800e7b4:	462b      	mov	r3, r5
 800e7b6:	ec51 0b10 	vmov	r0, r1, d0
 800e7ba:	f7f2 f929 	bl	8000a10 <__aeabi_dcmpeq>
 800e7be:	b920      	cbnz	r0, 800e7ca <pow+0x222>
 800e7c0:	4b2e      	ldr	r3, [pc, #184]	; (800e87c <pow+0x2d4>)
 800e7c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800e7c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e7ca:	f998 3000 	ldrsb.w	r3, [r8]
 800e7ce:	2b02      	cmp	r3, #2
 800e7d0:	d142      	bne.n	800e858 <pow+0x2b0>
 800e7d2:	f002 f9a1 	bl	8010b18 <__errno>
 800e7d6:	2322      	movs	r3, #34	; 0x22
 800e7d8:	e78d      	b.n	800e6f6 <pow+0x14e>
 800e7da:	4b29      	ldr	r3, [pc, #164]	; (800e880 <pow+0x2d8>)
 800e7dc:	2200      	movs	r2, #0
 800e7de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	4652      	mov	r2, sl
 800e7e6:	465b      	mov	r3, fp
 800e7e8:	4639      	mov	r1, r7
 800e7ea:	f7f2 f91b 	bl	8000a24 <__aeabi_dcmplt>
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	d0eb      	beq.n	800e7ca <pow+0x222>
 800e7f2:	ec45 4b10 	vmov	d0, r4, r5
 800e7f6:	f001 ffab 	bl	8010750 <rint>
 800e7fa:	4622      	mov	r2, r4
 800e7fc:	462b      	mov	r3, r5
 800e7fe:	ec51 0b10 	vmov	r0, r1, d0
 800e802:	f7f2 f905 	bl	8000a10 <__aeabi_dcmpeq>
 800e806:	2800      	cmp	r0, #0
 800e808:	d1df      	bne.n	800e7ca <pow+0x222>
 800e80a:	2200      	movs	r2, #0
 800e80c:	4b18      	ldr	r3, [pc, #96]	; (800e870 <pow+0x2c8>)
 800e80e:	e7da      	b.n	800e7c6 <pow+0x21e>
 800e810:	2200      	movs	r2, #0
 800e812:	2300      	movs	r3, #0
 800e814:	ec51 0b18 	vmov	r0, r1, d8
 800e818:	f7f2 f8fa 	bl	8000a10 <__aeabi_dcmpeq>
 800e81c:	2800      	cmp	r0, #0
 800e81e:	f43f af3a 	beq.w	800e696 <pow+0xee>
 800e822:	ec47 6b10 	vmov	d0, r6, r7
 800e826:	f001 fefa 	bl	801061e <finite>
 800e82a:	2800      	cmp	r0, #0
 800e82c:	f43f af33 	beq.w	800e696 <pow+0xee>
 800e830:	ec45 4b10 	vmov	d0, r4, r5
 800e834:	f001 fef3 	bl	801061e <finite>
 800e838:	2800      	cmp	r0, #0
 800e83a:	f43f af2c 	beq.w	800e696 <pow+0xee>
 800e83e:	2304      	movs	r3, #4
 800e840:	9302      	str	r3, [sp, #8]
 800e842:	4b09      	ldr	r3, [pc, #36]	; (800e868 <pow+0x2c0>)
 800e844:	9303      	str	r3, [sp, #12]
 800e846:	2300      	movs	r3, #0
 800e848:	930a      	str	r3, [sp, #40]	; 0x28
 800e84a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e84e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e852:	ed8d 9b08 	vstr	d9, [sp, #32]
 800e856:	e7b8      	b.n	800e7ca <pow+0x222>
 800e858:	a802      	add	r0, sp, #8
 800e85a:	f001 ff6d 	bl	8010738 <matherr>
 800e85e:	2800      	cmp	r0, #0
 800e860:	f47f af11 	bne.w	800e686 <pow+0xde>
 800e864:	e7b5      	b.n	800e7d2 <pow+0x22a>
 800e866:	bf00      	nop
 800e868:	08010cc0 	.word	0x08010cc0
 800e86c:	3ff00000 	.word	0x3ff00000
 800e870:	fff00000 	.word	0xfff00000
 800e874:	3fe00000 	.word	0x3fe00000
 800e878:	47efffff 	.word	0x47efffff
 800e87c:	c7efffff 	.word	0xc7efffff
 800e880:	7ff00000 	.word	0x7ff00000
 800e884:	20000015 	.word	0x20000015

0800e888 <sqrt>:
 800e888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e88c:	ed2d 8b02 	vpush	{d8}
 800e890:	b08b      	sub	sp, #44	; 0x2c
 800e892:	ec55 4b10 	vmov	r4, r5, d0
 800e896:	f000 ffad 	bl	800f7f4 <__ieee754_sqrt>
 800e89a:	4b26      	ldr	r3, [pc, #152]	; (800e934 <sqrt+0xac>)
 800e89c:	eeb0 8a40 	vmov.f32	s16, s0
 800e8a0:	eef0 8a60 	vmov.f32	s17, s1
 800e8a4:	f993 6000 	ldrsb.w	r6, [r3]
 800e8a8:	1c73      	adds	r3, r6, #1
 800e8aa:	d02a      	beq.n	800e902 <sqrt+0x7a>
 800e8ac:	4622      	mov	r2, r4
 800e8ae:	462b      	mov	r3, r5
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	4629      	mov	r1, r5
 800e8b4:	f7f2 f8de 	bl	8000a74 <__aeabi_dcmpun>
 800e8b8:	4607      	mov	r7, r0
 800e8ba:	bb10      	cbnz	r0, 800e902 <sqrt+0x7a>
 800e8bc:	f04f 0800 	mov.w	r8, #0
 800e8c0:	f04f 0900 	mov.w	r9, #0
 800e8c4:	4642      	mov	r2, r8
 800e8c6:	464b      	mov	r3, r9
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	4629      	mov	r1, r5
 800e8cc:	f7f2 f8aa 	bl	8000a24 <__aeabi_dcmplt>
 800e8d0:	b1b8      	cbz	r0, 800e902 <sqrt+0x7a>
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	9300      	str	r3, [sp, #0]
 800e8d6:	4b18      	ldr	r3, [pc, #96]	; (800e938 <sqrt+0xb0>)
 800e8d8:	9301      	str	r3, [sp, #4]
 800e8da:	9708      	str	r7, [sp, #32]
 800e8dc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800e8e0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800e8e4:	b9b6      	cbnz	r6, 800e914 <sqrt+0x8c>
 800e8e6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800e8ea:	4668      	mov	r0, sp
 800e8ec:	f001 ff24 	bl	8010738 <matherr>
 800e8f0:	b1d0      	cbz	r0, 800e928 <sqrt+0xa0>
 800e8f2:	9b08      	ldr	r3, [sp, #32]
 800e8f4:	b11b      	cbz	r3, 800e8fe <sqrt+0x76>
 800e8f6:	f002 f90f 	bl	8010b18 <__errno>
 800e8fa:	9b08      	ldr	r3, [sp, #32]
 800e8fc:	6003      	str	r3, [r0, #0]
 800e8fe:	ed9d 8b06 	vldr	d8, [sp, #24]
 800e902:	eeb0 0a48 	vmov.f32	s0, s16
 800e906:	eef0 0a68 	vmov.f32	s1, s17
 800e90a:	b00b      	add	sp, #44	; 0x2c
 800e90c:	ecbd 8b02 	vpop	{d8}
 800e910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e914:	4642      	mov	r2, r8
 800e916:	464b      	mov	r3, r9
 800e918:	4640      	mov	r0, r8
 800e91a:	4649      	mov	r1, r9
 800e91c:	f7f1 ff3a 	bl	8000794 <__aeabi_ddiv>
 800e920:	2e02      	cmp	r6, #2
 800e922:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e926:	d1e0      	bne.n	800e8ea <sqrt+0x62>
 800e928:	f002 f8f6 	bl	8010b18 <__errno>
 800e92c:	2321      	movs	r3, #33	; 0x21
 800e92e:	6003      	str	r3, [r0, #0]
 800e930:	e7df      	b.n	800e8f2 <sqrt+0x6a>
 800e932:	bf00      	nop
 800e934:	20000015 	.word	0x20000015
 800e938:	08010cc4 	.word	0x08010cc4

0800e93c <asinf>:
 800e93c:	b510      	push	{r4, lr}
 800e93e:	ed2d 8b02 	vpush	{d8}
 800e942:	4c27      	ldr	r4, [pc, #156]	; (800e9e0 <asinf+0xa4>)
 800e944:	b08a      	sub	sp, #40	; 0x28
 800e946:	eeb0 8a40 	vmov.f32	s16, s0
 800e94a:	f001 f803 	bl	800f954 <__ieee754_asinf>
 800e94e:	f994 3000 	ldrsb.w	r3, [r4]
 800e952:	3301      	adds	r3, #1
 800e954:	eef0 8a40 	vmov.f32	s17, s0
 800e958:	d03c      	beq.n	800e9d4 <asinf+0x98>
 800e95a:	eeb4 8a48 	vcmp.f32	s16, s16
 800e95e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e962:	d637      	bvs.n	800e9d4 <asinf+0x98>
 800e964:	eeb0 0a48 	vmov.f32	s0, s16
 800e968:	f002 f8c0 	bl	8010aec <fabsf>
 800e96c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e970:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e978:	dd2c      	ble.n	800e9d4 <asinf+0x98>
 800e97a:	2301      	movs	r3, #1
 800e97c:	9300      	str	r3, [sp, #0]
 800e97e:	4b19      	ldr	r3, [pc, #100]	; (800e9e4 <asinf+0xa8>)
 800e980:	9301      	str	r3, [sp, #4]
 800e982:	ee18 0a10 	vmov	r0, s16
 800e986:	2300      	movs	r3, #0
 800e988:	9308      	str	r3, [sp, #32]
 800e98a:	f7f1 fd81 	bl	8000490 <__aeabi_f2d>
 800e98e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e996:	4814      	ldr	r0, [pc, #80]	; (800e9e8 <asinf+0xac>)
 800e998:	f001 fed2 	bl	8010740 <nan>
 800e99c:	f994 3000 	ldrsb.w	r3, [r4]
 800e9a0:	2b02      	cmp	r3, #2
 800e9a2:	ed8d 0b06 	vstr	d0, [sp, #24]
 800e9a6:	d104      	bne.n	800e9b2 <asinf+0x76>
 800e9a8:	f002 f8b6 	bl	8010b18 <__errno>
 800e9ac:	2321      	movs	r3, #33	; 0x21
 800e9ae:	6003      	str	r3, [r0, #0]
 800e9b0:	e004      	b.n	800e9bc <asinf+0x80>
 800e9b2:	4668      	mov	r0, sp
 800e9b4:	f001 fec0 	bl	8010738 <matherr>
 800e9b8:	2800      	cmp	r0, #0
 800e9ba:	d0f5      	beq.n	800e9a8 <asinf+0x6c>
 800e9bc:	9b08      	ldr	r3, [sp, #32]
 800e9be:	b11b      	cbz	r3, 800e9c8 <asinf+0x8c>
 800e9c0:	f002 f8aa 	bl	8010b18 <__errno>
 800e9c4:	9b08      	ldr	r3, [sp, #32]
 800e9c6:	6003      	str	r3, [r0, #0]
 800e9c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e9cc:	f7f2 f8b0 	bl	8000b30 <__aeabi_d2f>
 800e9d0:	ee08 0a90 	vmov	s17, r0
 800e9d4:	eeb0 0a68 	vmov.f32	s0, s17
 800e9d8:	b00a      	add	sp, #40	; 0x28
 800e9da:	ecbd 8b02 	vpop	{d8}
 800e9de:	bd10      	pop	{r4, pc}
 800e9e0:	20000015 	.word	0x20000015
 800e9e4:	08010cc9 	.word	0x08010cc9
 800e9e8:	08010cce 	.word	0x08010cce

0800e9ec <atan2f>:
 800e9ec:	f001 b89a 	b.w	800fb24 <__ieee754_atan2f>

0800e9f0 <__ieee754_pow>:
 800e9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f4:	b091      	sub	sp, #68	; 0x44
 800e9f6:	ed8d 1b00 	vstr	d1, [sp]
 800e9fa:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e9fe:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ea02:	ea58 0302 	orrs.w	r3, r8, r2
 800ea06:	ec57 6b10 	vmov	r6, r7, d0
 800ea0a:	f000 84be 	beq.w	800f38a <__ieee754_pow+0x99a>
 800ea0e:	4b7a      	ldr	r3, [pc, #488]	; (800ebf8 <__ieee754_pow+0x208>)
 800ea10:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ea14:	429c      	cmp	r4, r3
 800ea16:	463d      	mov	r5, r7
 800ea18:	ee10 aa10 	vmov	sl, s0
 800ea1c:	dc09      	bgt.n	800ea32 <__ieee754_pow+0x42>
 800ea1e:	d103      	bne.n	800ea28 <__ieee754_pow+0x38>
 800ea20:	b93e      	cbnz	r6, 800ea32 <__ieee754_pow+0x42>
 800ea22:	45a0      	cmp	r8, r4
 800ea24:	dc0d      	bgt.n	800ea42 <__ieee754_pow+0x52>
 800ea26:	e001      	b.n	800ea2c <__ieee754_pow+0x3c>
 800ea28:	4598      	cmp	r8, r3
 800ea2a:	dc02      	bgt.n	800ea32 <__ieee754_pow+0x42>
 800ea2c:	4598      	cmp	r8, r3
 800ea2e:	d10e      	bne.n	800ea4e <__ieee754_pow+0x5e>
 800ea30:	b16a      	cbz	r2, 800ea4e <__ieee754_pow+0x5e>
 800ea32:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ea36:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ea3a:	ea54 030a 	orrs.w	r3, r4, sl
 800ea3e:	f000 84a4 	beq.w	800f38a <__ieee754_pow+0x99a>
 800ea42:	486e      	ldr	r0, [pc, #440]	; (800ebfc <__ieee754_pow+0x20c>)
 800ea44:	b011      	add	sp, #68	; 0x44
 800ea46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea4a:	f001 be79 	b.w	8010740 <nan>
 800ea4e:	2d00      	cmp	r5, #0
 800ea50:	da53      	bge.n	800eafa <__ieee754_pow+0x10a>
 800ea52:	4b6b      	ldr	r3, [pc, #428]	; (800ec00 <__ieee754_pow+0x210>)
 800ea54:	4598      	cmp	r8, r3
 800ea56:	dc4d      	bgt.n	800eaf4 <__ieee754_pow+0x104>
 800ea58:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ea5c:	4598      	cmp	r8, r3
 800ea5e:	dd4c      	ble.n	800eafa <__ieee754_pow+0x10a>
 800ea60:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ea64:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ea68:	2b14      	cmp	r3, #20
 800ea6a:	dd26      	ble.n	800eaba <__ieee754_pow+0xca>
 800ea6c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ea70:	fa22 f103 	lsr.w	r1, r2, r3
 800ea74:	fa01 f303 	lsl.w	r3, r1, r3
 800ea78:	4293      	cmp	r3, r2
 800ea7a:	d13e      	bne.n	800eafa <__ieee754_pow+0x10a>
 800ea7c:	f001 0101 	and.w	r1, r1, #1
 800ea80:	f1c1 0b02 	rsb	fp, r1, #2
 800ea84:	2a00      	cmp	r2, #0
 800ea86:	d15b      	bne.n	800eb40 <__ieee754_pow+0x150>
 800ea88:	4b5b      	ldr	r3, [pc, #364]	; (800ebf8 <__ieee754_pow+0x208>)
 800ea8a:	4598      	cmp	r8, r3
 800ea8c:	d124      	bne.n	800ead8 <__ieee754_pow+0xe8>
 800ea8e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ea92:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ea96:	ea53 030a 	orrs.w	r3, r3, sl
 800ea9a:	f000 8476 	beq.w	800f38a <__ieee754_pow+0x99a>
 800ea9e:	4b59      	ldr	r3, [pc, #356]	; (800ec04 <__ieee754_pow+0x214>)
 800eaa0:	429c      	cmp	r4, r3
 800eaa2:	dd2d      	ble.n	800eb00 <__ieee754_pow+0x110>
 800eaa4:	f1b9 0f00 	cmp.w	r9, #0
 800eaa8:	f280 8473 	bge.w	800f392 <__ieee754_pow+0x9a2>
 800eaac:	2000      	movs	r0, #0
 800eaae:	2100      	movs	r1, #0
 800eab0:	ec41 0b10 	vmov	d0, r0, r1
 800eab4:	b011      	add	sp, #68	; 0x44
 800eab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaba:	2a00      	cmp	r2, #0
 800eabc:	d13e      	bne.n	800eb3c <__ieee754_pow+0x14c>
 800eabe:	f1c3 0314 	rsb	r3, r3, #20
 800eac2:	fa48 f103 	asr.w	r1, r8, r3
 800eac6:	fa01 f303 	lsl.w	r3, r1, r3
 800eaca:	4543      	cmp	r3, r8
 800eacc:	f040 8469 	bne.w	800f3a2 <__ieee754_pow+0x9b2>
 800ead0:	f001 0101 	and.w	r1, r1, #1
 800ead4:	f1c1 0b02 	rsb	fp, r1, #2
 800ead8:	4b4b      	ldr	r3, [pc, #300]	; (800ec08 <__ieee754_pow+0x218>)
 800eada:	4598      	cmp	r8, r3
 800eadc:	d118      	bne.n	800eb10 <__ieee754_pow+0x120>
 800eade:	f1b9 0f00 	cmp.w	r9, #0
 800eae2:	f280 845a 	bge.w	800f39a <__ieee754_pow+0x9aa>
 800eae6:	4948      	ldr	r1, [pc, #288]	; (800ec08 <__ieee754_pow+0x218>)
 800eae8:	4632      	mov	r2, r6
 800eaea:	463b      	mov	r3, r7
 800eaec:	2000      	movs	r0, #0
 800eaee:	f7f1 fe51 	bl	8000794 <__aeabi_ddiv>
 800eaf2:	e7dd      	b.n	800eab0 <__ieee754_pow+0xc0>
 800eaf4:	f04f 0b02 	mov.w	fp, #2
 800eaf8:	e7c4      	b.n	800ea84 <__ieee754_pow+0x94>
 800eafa:	f04f 0b00 	mov.w	fp, #0
 800eafe:	e7c1      	b.n	800ea84 <__ieee754_pow+0x94>
 800eb00:	f1b9 0f00 	cmp.w	r9, #0
 800eb04:	dad2      	bge.n	800eaac <__ieee754_pow+0xbc>
 800eb06:	e9dd 0300 	ldrd	r0, r3, [sp]
 800eb0a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800eb0e:	e7cf      	b.n	800eab0 <__ieee754_pow+0xc0>
 800eb10:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800eb14:	d106      	bne.n	800eb24 <__ieee754_pow+0x134>
 800eb16:	4632      	mov	r2, r6
 800eb18:	463b      	mov	r3, r7
 800eb1a:	4610      	mov	r0, r2
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	f7f1 fd0f 	bl	8000540 <__aeabi_dmul>
 800eb22:	e7c5      	b.n	800eab0 <__ieee754_pow+0xc0>
 800eb24:	4b39      	ldr	r3, [pc, #228]	; (800ec0c <__ieee754_pow+0x21c>)
 800eb26:	4599      	cmp	r9, r3
 800eb28:	d10a      	bne.n	800eb40 <__ieee754_pow+0x150>
 800eb2a:	2d00      	cmp	r5, #0
 800eb2c:	db08      	blt.n	800eb40 <__ieee754_pow+0x150>
 800eb2e:	ec47 6b10 	vmov	d0, r6, r7
 800eb32:	b011      	add	sp, #68	; 0x44
 800eb34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb38:	f000 be5c 	b.w	800f7f4 <__ieee754_sqrt>
 800eb3c:	f04f 0b00 	mov.w	fp, #0
 800eb40:	ec47 6b10 	vmov	d0, r6, r7
 800eb44:	f001 fd62 	bl	801060c <fabs>
 800eb48:	ec51 0b10 	vmov	r0, r1, d0
 800eb4c:	f1ba 0f00 	cmp.w	sl, #0
 800eb50:	d127      	bne.n	800eba2 <__ieee754_pow+0x1b2>
 800eb52:	b124      	cbz	r4, 800eb5e <__ieee754_pow+0x16e>
 800eb54:	4b2c      	ldr	r3, [pc, #176]	; (800ec08 <__ieee754_pow+0x218>)
 800eb56:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d121      	bne.n	800eba2 <__ieee754_pow+0x1b2>
 800eb5e:	f1b9 0f00 	cmp.w	r9, #0
 800eb62:	da05      	bge.n	800eb70 <__ieee754_pow+0x180>
 800eb64:	4602      	mov	r2, r0
 800eb66:	460b      	mov	r3, r1
 800eb68:	2000      	movs	r0, #0
 800eb6a:	4927      	ldr	r1, [pc, #156]	; (800ec08 <__ieee754_pow+0x218>)
 800eb6c:	f7f1 fe12 	bl	8000794 <__aeabi_ddiv>
 800eb70:	2d00      	cmp	r5, #0
 800eb72:	da9d      	bge.n	800eab0 <__ieee754_pow+0xc0>
 800eb74:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800eb78:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800eb7c:	ea54 030b 	orrs.w	r3, r4, fp
 800eb80:	d108      	bne.n	800eb94 <__ieee754_pow+0x1a4>
 800eb82:	4602      	mov	r2, r0
 800eb84:	460b      	mov	r3, r1
 800eb86:	4610      	mov	r0, r2
 800eb88:	4619      	mov	r1, r3
 800eb8a:	f7f1 fb21 	bl	80001d0 <__aeabi_dsub>
 800eb8e:	4602      	mov	r2, r0
 800eb90:	460b      	mov	r3, r1
 800eb92:	e7ac      	b.n	800eaee <__ieee754_pow+0xfe>
 800eb94:	f1bb 0f01 	cmp.w	fp, #1
 800eb98:	d18a      	bne.n	800eab0 <__ieee754_pow+0xc0>
 800eb9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb9e:	4619      	mov	r1, r3
 800eba0:	e786      	b.n	800eab0 <__ieee754_pow+0xc0>
 800eba2:	0fed      	lsrs	r5, r5, #31
 800eba4:	1e6b      	subs	r3, r5, #1
 800eba6:	930d      	str	r3, [sp, #52]	; 0x34
 800eba8:	ea5b 0303 	orrs.w	r3, fp, r3
 800ebac:	d102      	bne.n	800ebb4 <__ieee754_pow+0x1c4>
 800ebae:	4632      	mov	r2, r6
 800ebb0:	463b      	mov	r3, r7
 800ebb2:	e7e8      	b.n	800eb86 <__ieee754_pow+0x196>
 800ebb4:	4b16      	ldr	r3, [pc, #88]	; (800ec10 <__ieee754_pow+0x220>)
 800ebb6:	4598      	cmp	r8, r3
 800ebb8:	f340 80fe 	ble.w	800edb8 <__ieee754_pow+0x3c8>
 800ebbc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ebc0:	4598      	cmp	r8, r3
 800ebc2:	dd0a      	ble.n	800ebda <__ieee754_pow+0x1ea>
 800ebc4:	4b0f      	ldr	r3, [pc, #60]	; (800ec04 <__ieee754_pow+0x214>)
 800ebc6:	429c      	cmp	r4, r3
 800ebc8:	dc0d      	bgt.n	800ebe6 <__ieee754_pow+0x1f6>
 800ebca:	f1b9 0f00 	cmp.w	r9, #0
 800ebce:	f6bf af6d 	bge.w	800eaac <__ieee754_pow+0xbc>
 800ebd2:	a307      	add	r3, pc, #28	; (adr r3, 800ebf0 <__ieee754_pow+0x200>)
 800ebd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd8:	e79f      	b.n	800eb1a <__ieee754_pow+0x12a>
 800ebda:	4b0e      	ldr	r3, [pc, #56]	; (800ec14 <__ieee754_pow+0x224>)
 800ebdc:	429c      	cmp	r4, r3
 800ebde:	ddf4      	ble.n	800ebca <__ieee754_pow+0x1da>
 800ebe0:	4b09      	ldr	r3, [pc, #36]	; (800ec08 <__ieee754_pow+0x218>)
 800ebe2:	429c      	cmp	r4, r3
 800ebe4:	dd18      	ble.n	800ec18 <__ieee754_pow+0x228>
 800ebe6:	f1b9 0f00 	cmp.w	r9, #0
 800ebea:	dcf2      	bgt.n	800ebd2 <__ieee754_pow+0x1e2>
 800ebec:	e75e      	b.n	800eaac <__ieee754_pow+0xbc>
 800ebee:	bf00      	nop
 800ebf0:	8800759c 	.word	0x8800759c
 800ebf4:	7e37e43c 	.word	0x7e37e43c
 800ebf8:	7ff00000 	.word	0x7ff00000
 800ebfc:	08010cce 	.word	0x08010cce
 800ec00:	433fffff 	.word	0x433fffff
 800ec04:	3fefffff 	.word	0x3fefffff
 800ec08:	3ff00000 	.word	0x3ff00000
 800ec0c:	3fe00000 	.word	0x3fe00000
 800ec10:	41e00000 	.word	0x41e00000
 800ec14:	3feffffe 	.word	0x3feffffe
 800ec18:	2200      	movs	r2, #0
 800ec1a:	4b63      	ldr	r3, [pc, #396]	; (800eda8 <__ieee754_pow+0x3b8>)
 800ec1c:	f7f1 fad8 	bl	80001d0 <__aeabi_dsub>
 800ec20:	a355      	add	r3, pc, #340	; (adr r3, 800ed78 <__ieee754_pow+0x388>)
 800ec22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec26:	4604      	mov	r4, r0
 800ec28:	460d      	mov	r5, r1
 800ec2a:	f7f1 fc89 	bl	8000540 <__aeabi_dmul>
 800ec2e:	a354      	add	r3, pc, #336	; (adr r3, 800ed80 <__ieee754_pow+0x390>)
 800ec30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec34:	4606      	mov	r6, r0
 800ec36:	460f      	mov	r7, r1
 800ec38:	4620      	mov	r0, r4
 800ec3a:	4629      	mov	r1, r5
 800ec3c:	f7f1 fc80 	bl	8000540 <__aeabi_dmul>
 800ec40:	2200      	movs	r2, #0
 800ec42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec46:	4b59      	ldr	r3, [pc, #356]	; (800edac <__ieee754_pow+0x3bc>)
 800ec48:	4620      	mov	r0, r4
 800ec4a:	4629      	mov	r1, r5
 800ec4c:	f7f1 fc78 	bl	8000540 <__aeabi_dmul>
 800ec50:	4602      	mov	r2, r0
 800ec52:	460b      	mov	r3, r1
 800ec54:	a14c      	add	r1, pc, #304	; (adr r1, 800ed88 <__ieee754_pow+0x398>)
 800ec56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec5a:	f7f1 fab9 	bl	80001d0 <__aeabi_dsub>
 800ec5e:	4622      	mov	r2, r4
 800ec60:	462b      	mov	r3, r5
 800ec62:	f7f1 fc6d 	bl	8000540 <__aeabi_dmul>
 800ec66:	4602      	mov	r2, r0
 800ec68:	460b      	mov	r3, r1
 800ec6a:	2000      	movs	r0, #0
 800ec6c:	4950      	ldr	r1, [pc, #320]	; (800edb0 <__ieee754_pow+0x3c0>)
 800ec6e:	f7f1 faaf 	bl	80001d0 <__aeabi_dsub>
 800ec72:	4622      	mov	r2, r4
 800ec74:	462b      	mov	r3, r5
 800ec76:	4680      	mov	r8, r0
 800ec78:	4689      	mov	r9, r1
 800ec7a:	4620      	mov	r0, r4
 800ec7c:	4629      	mov	r1, r5
 800ec7e:	f7f1 fc5f 	bl	8000540 <__aeabi_dmul>
 800ec82:	4602      	mov	r2, r0
 800ec84:	460b      	mov	r3, r1
 800ec86:	4640      	mov	r0, r8
 800ec88:	4649      	mov	r1, r9
 800ec8a:	f7f1 fc59 	bl	8000540 <__aeabi_dmul>
 800ec8e:	a340      	add	r3, pc, #256	; (adr r3, 800ed90 <__ieee754_pow+0x3a0>)
 800ec90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec94:	f7f1 fc54 	bl	8000540 <__aeabi_dmul>
 800ec98:	4602      	mov	r2, r0
 800ec9a:	460b      	mov	r3, r1
 800ec9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eca0:	f7f1 fa96 	bl	80001d0 <__aeabi_dsub>
 800eca4:	4602      	mov	r2, r0
 800eca6:	460b      	mov	r3, r1
 800eca8:	4604      	mov	r4, r0
 800ecaa:	460d      	mov	r5, r1
 800ecac:	4630      	mov	r0, r6
 800ecae:	4639      	mov	r1, r7
 800ecb0:	f7f1 fa90 	bl	80001d4 <__adddf3>
 800ecb4:	2000      	movs	r0, #0
 800ecb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ecba:	4632      	mov	r2, r6
 800ecbc:	463b      	mov	r3, r7
 800ecbe:	f7f1 fa87 	bl	80001d0 <__aeabi_dsub>
 800ecc2:	4602      	mov	r2, r0
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	4629      	mov	r1, r5
 800ecca:	f7f1 fa81 	bl	80001d0 <__aeabi_dsub>
 800ecce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ecd0:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ecd4:	4313      	orrs	r3, r2
 800ecd6:	4606      	mov	r6, r0
 800ecd8:	460f      	mov	r7, r1
 800ecda:	f040 81eb 	bne.w	800f0b4 <__ieee754_pow+0x6c4>
 800ecde:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800ed98 <__ieee754_pow+0x3a8>
 800ece2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800ece6:	2400      	movs	r4, #0
 800ece8:	4622      	mov	r2, r4
 800ecea:	462b      	mov	r3, r5
 800ecec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ecf0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ecf4:	f7f1 fa6c 	bl	80001d0 <__aeabi_dsub>
 800ecf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ecfc:	f7f1 fc20 	bl	8000540 <__aeabi_dmul>
 800ed00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed04:	4680      	mov	r8, r0
 800ed06:	4689      	mov	r9, r1
 800ed08:	4630      	mov	r0, r6
 800ed0a:	4639      	mov	r1, r7
 800ed0c:	f7f1 fc18 	bl	8000540 <__aeabi_dmul>
 800ed10:	4602      	mov	r2, r0
 800ed12:	460b      	mov	r3, r1
 800ed14:	4640      	mov	r0, r8
 800ed16:	4649      	mov	r1, r9
 800ed18:	f7f1 fa5c 	bl	80001d4 <__adddf3>
 800ed1c:	4622      	mov	r2, r4
 800ed1e:	462b      	mov	r3, r5
 800ed20:	4680      	mov	r8, r0
 800ed22:	4689      	mov	r9, r1
 800ed24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed28:	f7f1 fc0a 	bl	8000540 <__aeabi_dmul>
 800ed2c:	460b      	mov	r3, r1
 800ed2e:	4604      	mov	r4, r0
 800ed30:	460d      	mov	r5, r1
 800ed32:	4602      	mov	r2, r0
 800ed34:	4649      	mov	r1, r9
 800ed36:	4640      	mov	r0, r8
 800ed38:	e9cd 4500 	strd	r4, r5, [sp]
 800ed3c:	f7f1 fa4a 	bl	80001d4 <__adddf3>
 800ed40:	4b1c      	ldr	r3, [pc, #112]	; (800edb4 <__ieee754_pow+0x3c4>)
 800ed42:	4299      	cmp	r1, r3
 800ed44:	4606      	mov	r6, r0
 800ed46:	460f      	mov	r7, r1
 800ed48:	468b      	mov	fp, r1
 800ed4a:	f340 82f7 	ble.w	800f33c <__ieee754_pow+0x94c>
 800ed4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ed52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ed56:	4303      	orrs	r3, r0
 800ed58:	f000 81ea 	beq.w	800f130 <__ieee754_pow+0x740>
 800ed5c:	a310      	add	r3, pc, #64	; (adr r3, 800eda0 <__ieee754_pow+0x3b0>)
 800ed5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed66:	f7f1 fbeb 	bl	8000540 <__aeabi_dmul>
 800ed6a:	a30d      	add	r3, pc, #52	; (adr r3, 800eda0 <__ieee754_pow+0x3b0>)
 800ed6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed70:	e6d5      	b.n	800eb1e <__ieee754_pow+0x12e>
 800ed72:	bf00      	nop
 800ed74:	f3af 8000 	nop.w
 800ed78:	60000000 	.word	0x60000000
 800ed7c:	3ff71547 	.word	0x3ff71547
 800ed80:	f85ddf44 	.word	0xf85ddf44
 800ed84:	3e54ae0b 	.word	0x3e54ae0b
 800ed88:	55555555 	.word	0x55555555
 800ed8c:	3fd55555 	.word	0x3fd55555
 800ed90:	652b82fe 	.word	0x652b82fe
 800ed94:	3ff71547 	.word	0x3ff71547
 800ed98:	00000000 	.word	0x00000000
 800ed9c:	bff00000 	.word	0xbff00000
 800eda0:	8800759c 	.word	0x8800759c
 800eda4:	7e37e43c 	.word	0x7e37e43c
 800eda8:	3ff00000 	.word	0x3ff00000
 800edac:	3fd00000 	.word	0x3fd00000
 800edb0:	3fe00000 	.word	0x3fe00000
 800edb4:	408fffff 	.word	0x408fffff
 800edb8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800edbc:	f04f 0200 	mov.w	r2, #0
 800edc0:	da05      	bge.n	800edce <__ieee754_pow+0x3de>
 800edc2:	4bd3      	ldr	r3, [pc, #844]	; (800f110 <__ieee754_pow+0x720>)
 800edc4:	f7f1 fbbc 	bl	8000540 <__aeabi_dmul>
 800edc8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800edcc:	460c      	mov	r4, r1
 800edce:	1523      	asrs	r3, r4, #20
 800edd0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800edd4:	4413      	add	r3, r2
 800edd6:	9309      	str	r3, [sp, #36]	; 0x24
 800edd8:	4bce      	ldr	r3, [pc, #824]	; (800f114 <__ieee754_pow+0x724>)
 800edda:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800edde:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ede2:	429c      	cmp	r4, r3
 800ede4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ede8:	dd08      	ble.n	800edfc <__ieee754_pow+0x40c>
 800edea:	4bcb      	ldr	r3, [pc, #812]	; (800f118 <__ieee754_pow+0x728>)
 800edec:	429c      	cmp	r4, r3
 800edee:	f340 815e 	ble.w	800f0ae <__ieee754_pow+0x6be>
 800edf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edf4:	3301      	adds	r3, #1
 800edf6:	9309      	str	r3, [sp, #36]	; 0x24
 800edf8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800edfc:	f04f 0a00 	mov.w	sl, #0
 800ee00:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ee04:	930c      	str	r3, [sp, #48]	; 0x30
 800ee06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ee08:	4bc4      	ldr	r3, [pc, #784]	; (800f11c <__ieee754_pow+0x72c>)
 800ee0a:	4413      	add	r3, r2
 800ee0c:	ed93 7b00 	vldr	d7, [r3]
 800ee10:	4629      	mov	r1, r5
 800ee12:	ec53 2b17 	vmov	r2, r3, d7
 800ee16:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ee1a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ee1e:	f7f1 f9d7 	bl	80001d0 <__aeabi_dsub>
 800ee22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ee26:	4606      	mov	r6, r0
 800ee28:	460f      	mov	r7, r1
 800ee2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee2e:	f7f1 f9d1 	bl	80001d4 <__adddf3>
 800ee32:	4602      	mov	r2, r0
 800ee34:	460b      	mov	r3, r1
 800ee36:	2000      	movs	r0, #0
 800ee38:	49b9      	ldr	r1, [pc, #740]	; (800f120 <__ieee754_pow+0x730>)
 800ee3a:	f7f1 fcab 	bl	8000794 <__aeabi_ddiv>
 800ee3e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ee42:	4602      	mov	r2, r0
 800ee44:	460b      	mov	r3, r1
 800ee46:	4630      	mov	r0, r6
 800ee48:	4639      	mov	r1, r7
 800ee4a:	f7f1 fb79 	bl	8000540 <__aeabi_dmul>
 800ee4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee52:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ee56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	9302      	str	r3, [sp, #8]
 800ee5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ee62:	106d      	asrs	r5, r5, #1
 800ee64:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ee68:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800ee72:	4640      	mov	r0, r8
 800ee74:	4649      	mov	r1, r9
 800ee76:	4614      	mov	r4, r2
 800ee78:	461d      	mov	r5, r3
 800ee7a:	f7f1 fb61 	bl	8000540 <__aeabi_dmul>
 800ee7e:	4602      	mov	r2, r0
 800ee80:	460b      	mov	r3, r1
 800ee82:	4630      	mov	r0, r6
 800ee84:	4639      	mov	r1, r7
 800ee86:	f7f1 f9a3 	bl	80001d0 <__aeabi_dsub>
 800ee8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ee8e:	4606      	mov	r6, r0
 800ee90:	460f      	mov	r7, r1
 800ee92:	4620      	mov	r0, r4
 800ee94:	4629      	mov	r1, r5
 800ee96:	f7f1 f99b 	bl	80001d0 <__aeabi_dsub>
 800ee9a:	4602      	mov	r2, r0
 800ee9c:	460b      	mov	r3, r1
 800ee9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eea2:	f7f1 f995 	bl	80001d0 <__aeabi_dsub>
 800eea6:	4642      	mov	r2, r8
 800eea8:	464b      	mov	r3, r9
 800eeaa:	f7f1 fb49 	bl	8000540 <__aeabi_dmul>
 800eeae:	4602      	mov	r2, r0
 800eeb0:	460b      	mov	r3, r1
 800eeb2:	4630      	mov	r0, r6
 800eeb4:	4639      	mov	r1, r7
 800eeb6:	f7f1 f98b 	bl	80001d0 <__aeabi_dsub>
 800eeba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800eebe:	f7f1 fb3f 	bl	8000540 <__aeabi_dmul>
 800eec2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eec6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800eeca:	4610      	mov	r0, r2
 800eecc:	4619      	mov	r1, r3
 800eece:	f7f1 fb37 	bl	8000540 <__aeabi_dmul>
 800eed2:	a37b      	add	r3, pc, #492	; (adr r3, 800f0c0 <__ieee754_pow+0x6d0>)
 800eed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed8:	4604      	mov	r4, r0
 800eeda:	460d      	mov	r5, r1
 800eedc:	f7f1 fb30 	bl	8000540 <__aeabi_dmul>
 800eee0:	a379      	add	r3, pc, #484	; (adr r3, 800f0c8 <__ieee754_pow+0x6d8>)
 800eee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee6:	f7f1 f975 	bl	80001d4 <__adddf3>
 800eeea:	4622      	mov	r2, r4
 800eeec:	462b      	mov	r3, r5
 800eeee:	f7f1 fb27 	bl	8000540 <__aeabi_dmul>
 800eef2:	a377      	add	r3, pc, #476	; (adr r3, 800f0d0 <__ieee754_pow+0x6e0>)
 800eef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef8:	f7f1 f96c 	bl	80001d4 <__adddf3>
 800eefc:	4622      	mov	r2, r4
 800eefe:	462b      	mov	r3, r5
 800ef00:	f7f1 fb1e 	bl	8000540 <__aeabi_dmul>
 800ef04:	a374      	add	r3, pc, #464	; (adr r3, 800f0d8 <__ieee754_pow+0x6e8>)
 800ef06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0a:	f7f1 f963 	bl	80001d4 <__adddf3>
 800ef0e:	4622      	mov	r2, r4
 800ef10:	462b      	mov	r3, r5
 800ef12:	f7f1 fb15 	bl	8000540 <__aeabi_dmul>
 800ef16:	a372      	add	r3, pc, #456	; (adr r3, 800f0e0 <__ieee754_pow+0x6f0>)
 800ef18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef1c:	f7f1 f95a 	bl	80001d4 <__adddf3>
 800ef20:	4622      	mov	r2, r4
 800ef22:	462b      	mov	r3, r5
 800ef24:	f7f1 fb0c 	bl	8000540 <__aeabi_dmul>
 800ef28:	a36f      	add	r3, pc, #444	; (adr r3, 800f0e8 <__ieee754_pow+0x6f8>)
 800ef2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2e:	f7f1 f951 	bl	80001d4 <__adddf3>
 800ef32:	4622      	mov	r2, r4
 800ef34:	4606      	mov	r6, r0
 800ef36:	460f      	mov	r7, r1
 800ef38:	462b      	mov	r3, r5
 800ef3a:	4620      	mov	r0, r4
 800ef3c:	4629      	mov	r1, r5
 800ef3e:	f7f1 faff 	bl	8000540 <__aeabi_dmul>
 800ef42:	4602      	mov	r2, r0
 800ef44:	460b      	mov	r3, r1
 800ef46:	4630      	mov	r0, r6
 800ef48:	4639      	mov	r1, r7
 800ef4a:	f7f1 faf9 	bl	8000540 <__aeabi_dmul>
 800ef4e:	4642      	mov	r2, r8
 800ef50:	4604      	mov	r4, r0
 800ef52:	460d      	mov	r5, r1
 800ef54:	464b      	mov	r3, r9
 800ef56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef5a:	f7f1 f93b 	bl	80001d4 <__adddf3>
 800ef5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ef62:	f7f1 faed 	bl	8000540 <__aeabi_dmul>
 800ef66:	4622      	mov	r2, r4
 800ef68:	462b      	mov	r3, r5
 800ef6a:	f7f1 f933 	bl	80001d4 <__adddf3>
 800ef6e:	4642      	mov	r2, r8
 800ef70:	4606      	mov	r6, r0
 800ef72:	460f      	mov	r7, r1
 800ef74:	464b      	mov	r3, r9
 800ef76:	4640      	mov	r0, r8
 800ef78:	4649      	mov	r1, r9
 800ef7a:	f7f1 fae1 	bl	8000540 <__aeabi_dmul>
 800ef7e:	2200      	movs	r2, #0
 800ef80:	4b68      	ldr	r3, [pc, #416]	; (800f124 <__ieee754_pow+0x734>)
 800ef82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ef86:	f7f1 f925 	bl	80001d4 <__adddf3>
 800ef8a:	4632      	mov	r2, r6
 800ef8c:	463b      	mov	r3, r7
 800ef8e:	f7f1 f921 	bl	80001d4 <__adddf3>
 800ef92:	9802      	ldr	r0, [sp, #8]
 800ef94:	460d      	mov	r5, r1
 800ef96:	4604      	mov	r4, r0
 800ef98:	4602      	mov	r2, r0
 800ef9a:	460b      	mov	r3, r1
 800ef9c:	4640      	mov	r0, r8
 800ef9e:	4649      	mov	r1, r9
 800efa0:	f7f1 face 	bl	8000540 <__aeabi_dmul>
 800efa4:	2200      	movs	r2, #0
 800efa6:	4680      	mov	r8, r0
 800efa8:	4689      	mov	r9, r1
 800efaa:	4b5e      	ldr	r3, [pc, #376]	; (800f124 <__ieee754_pow+0x734>)
 800efac:	4620      	mov	r0, r4
 800efae:	4629      	mov	r1, r5
 800efb0:	f7f1 f90e 	bl	80001d0 <__aeabi_dsub>
 800efb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800efb8:	f7f1 f90a 	bl	80001d0 <__aeabi_dsub>
 800efbc:	4602      	mov	r2, r0
 800efbe:	460b      	mov	r3, r1
 800efc0:	4630      	mov	r0, r6
 800efc2:	4639      	mov	r1, r7
 800efc4:	f7f1 f904 	bl	80001d0 <__aeabi_dsub>
 800efc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800efcc:	f7f1 fab8 	bl	8000540 <__aeabi_dmul>
 800efd0:	4622      	mov	r2, r4
 800efd2:	4606      	mov	r6, r0
 800efd4:	460f      	mov	r7, r1
 800efd6:	462b      	mov	r3, r5
 800efd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800efdc:	f7f1 fab0 	bl	8000540 <__aeabi_dmul>
 800efe0:	4602      	mov	r2, r0
 800efe2:	460b      	mov	r3, r1
 800efe4:	4630      	mov	r0, r6
 800efe6:	4639      	mov	r1, r7
 800efe8:	f7f1 f8f4 	bl	80001d4 <__adddf3>
 800efec:	4606      	mov	r6, r0
 800efee:	460f      	mov	r7, r1
 800eff0:	4602      	mov	r2, r0
 800eff2:	460b      	mov	r3, r1
 800eff4:	4640      	mov	r0, r8
 800eff6:	4649      	mov	r1, r9
 800eff8:	f7f1 f8ec 	bl	80001d4 <__adddf3>
 800effc:	9802      	ldr	r0, [sp, #8]
 800effe:	a33c      	add	r3, pc, #240	; (adr r3, 800f0f0 <__ieee754_pow+0x700>)
 800f000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f004:	4604      	mov	r4, r0
 800f006:	460d      	mov	r5, r1
 800f008:	f7f1 fa9a 	bl	8000540 <__aeabi_dmul>
 800f00c:	4642      	mov	r2, r8
 800f00e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f012:	464b      	mov	r3, r9
 800f014:	4620      	mov	r0, r4
 800f016:	4629      	mov	r1, r5
 800f018:	f7f1 f8da 	bl	80001d0 <__aeabi_dsub>
 800f01c:	4602      	mov	r2, r0
 800f01e:	460b      	mov	r3, r1
 800f020:	4630      	mov	r0, r6
 800f022:	4639      	mov	r1, r7
 800f024:	f7f1 f8d4 	bl	80001d0 <__aeabi_dsub>
 800f028:	a333      	add	r3, pc, #204	; (adr r3, 800f0f8 <__ieee754_pow+0x708>)
 800f02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f02e:	f7f1 fa87 	bl	8000540 <__aeabi_dmul>
 800f032:	a333      	add	r3, pc, #204	; (adr r3, 800f100 <__ieee754_pow+0x710>)
 800f034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f038:	4606      	mov	r6, r0
 800f03a:	460f      	mov	r7, r1
 800f03c:	4620      	mov	r0, r4
 800f03e:	4629      	mov	r1, r5
 800f040:	f7f1 fa7e 	bl	8000540 <__aeabi_dmul>
 800f044:	4602      	mov	r2, r0
 800f046:	460b      	mov	r3, r1
 800f048:	4630      	mov	r0, r6
 800f04a:	4639      	mov	r1, r7
 800f04c:	f7f1 f8c2 	bl	80001d4 <__adddf3>
 800f050:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f052:	4b35      	ldr	r3, [pc, #212]	; (800f128 <__ieee754_pow+0x738>)
 800f054:	4413      	add	r3, r2
 800f056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f05a:	f7f1 f8bb 	bl	80001d4 <__adddf3>
 800f05e:	4604      	mov	r4, r0
 800f060:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f062:	460d      	mov	r5, r1
 800f064:	f7f1 fa02 	bl	800046c <__aeabi_i2d>
 800f068:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f06a:	4b30      	ldr	r3, [pc, #192]	; (800f12c <__ieee754_pow+0x73c>)
 800f06c:	4413      	add	r3, r2
 800f06e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f072:	4606      	mov	r6, r0
 800f074:	460f      	mov	r7, r1
 800f076:	4622      	mov	r2, r4
 800f078:	462b      	mov	r3, r5
 800f07a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f07e:	f7f1 f8a9 	bl	80001d4 <__adddf3>
 800f082:	4642      	mov	r2, r8
 800f084:	464b      	mov	r3, r9
 800f086:	f7f1 f8a5 	bl	80001d4 <__adddf3>
 800f08a:	4632      	mov	r2, r6
 800f08c:	463b      	mov	r3, r7
 800f08e:	f7f1 f8a1 	bl	80001d4 <__adddf3>
 800f092:	9802      	ldr	r0, [sp, #8]
 800f094:	4632      	mov	r2, r6
 800f096:	463b      	mov	r3, r7
 800f098:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f09c:	f7f1 f898 	bl	80001d0 <__aeabi_dsub>
 800f0a0:	4642      	mov	r2, r8
 800f0a2:	464b      	mov	r3, r9
 800f0a4:	f7f1 f894 	bl	80001d0 <__aeabi_dsub>
 800f0a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f0ac:	e607      	b.n	800ecbe <__ieee754_pow+0x2ce>
 800f0ae:	f04f 0a01 	mov.w	sl, #1
 800f0b2:	e6a5      	b.n	800ee00 <__ieee754_pow+0x410>
 800f0b4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800f108 <__ieee754_pow+0x718>
 800f0b8:	e613      	b.n	800ece2 <__ieee754_pow+0x2f2>
 800f0ba:	bf00      	nop
 800f0bc:	f3af 8000 	nop.w
 800f0c0:	4a454eef 	.word	0x4a454eef
 800f0c4:	3fca7e28 	.word	0x3fca7e28
 800f0c8:	93c9db65 	.word	0x93c9db65
 800f0cc:	3fcd864a 	.word	0x3fcd864a
 800f0d0:	a91d4101 	.word	0xa91d4101
 800f0d4:	3fd17460 	.word	0x3fd17460
 800f0d8:	518f264d 	.word	0x518f264d
 800f0dc:	3fd55555 	.word	0x3fd55555
 800f0e0:	db6fabff 	.word	0xdb6fabff
 800f0e4:	3fdb6db6 	.word	0x3fdb6db6
 800f0e8:	33333303 	.word	0x33333303
 800f0ec:	3fe33333 	.word	0x3fe33333
 800f0f0:	e0000000 	.word	0xe0000000
 800f0f4:	3feec709 	.word	0x3feec709
 800f0f8:	dc3a03fd 	.word	0xdc3a03fd
 800f0fc:	3feec709 	.word	0x3feec709
 800f100:	145b01f5 	.word	0x145b01f5
 800f104:	be3e2fe0 	.word	0xbe3e2fe0
 800f108:	00000000 	.word	0x00000000
 800f10c:	3ff00000 	.word	0x3ff00000
 800f110:	43400000 	.word	0x43400000
 800f114:	0003988e 	.word	0x0003988e
 800f118:	000bb679 	.word	0x000bb679
 800f11c:	08010cd0 	.word	0x08010cd0
 800f120:	3ff00000 	.word	0x3ff00000
 800f124:	40080000 	.word	0x40080000
 800f128:	08010cf0 	.word	0x08010cf0
 800f12c:	08010ce0 	.word	0x08010ce0
 800f130:	a3b4      	add	r3, pc, #720	; (adr r3, 800f404 <__ieee754_pow+0xa14>)
 800f132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f136:	4640      	mov	r0, r8
 800f138:	4649      	mov	r1, r9
 800f13a:	f7f1 f84b 	bl	80001d4 <__adddf3>
 800f13e:	4622      	mov	r2, r4
 800f140:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f144:	462b      	mov	r3, r5
 800f146:	4630      	mov	r0, r6
 800f148:	4639      	mov	r1, r7
 800f14a:	f7f1 f841 	bl	80001d0 <__aeabi_dsub>
 800f14e:	4602      	mov	r2, r0
 800f150:	460b      	mov	r3, r1
 800f152:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f156:	f7f1 fc83 	bl	8000a60 <__aeabi_dcmpgt>
 800f15a:	2800      	cmp	r0, #0
 800f15c:	f47f adfe 	bne.w	800ed5c <__ieee754_pow+0x36c>
 800f160:	4aa3      	ldr	r2, [pc, #652]	; (800f3f0 <__ieee754_pow+0xa00>)
 800f162:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f166:	4293      	cmp	r3, r2
 800f168:	f340 810a 	ble.w	800f380 <__ieee754_pow+0x990>
 800f16c:	151b      	asrs	r3, r3, #20
 800f16e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f172:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f176:	fa4a f303 	asr.w	r3, sl, r3
 800f17a:	445b      	add	r3, fp
 800f17c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f180:	4e9c      	ldr	r6, [pc, #624]	; (800f3f4 <__ieee754_pow+0xa04>)
 800f182:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f186:	4116      	asrs	r6, r2
 800f188:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800f18c:	2000      	movs	r0, #0
 800f18e:	ea23 0106 	bic.w	r1, r3, r6
 800f192:	f1c2 0214 	rsb	r2, r2, #20
 800f196:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f19a:	fa4a fa02 	asr.w	sl, sl, r2
 800f19e:	f1bb 0f00 	cmp.w	fp, #0
 800f1a2:	4602      	mov	r2, r0
 800f1a4:	460b      	mov	r3, r1
 800f1a6:	4620      	mov	r0, r4
 800f1a8:	4629      	mov	r1, r5
 800f1aa:	bfb8      	it	lt
 800f1ac:	f1ca 0a00 	rsblt	sl, sl, #0
 800f1b0:	f7f1 f80e 	bl	80001d0 <__aeabi_dsub>
 800f1b4:	e9cd 0100 	strd	r0, r1, [sp]
 800f1b8:	4642      	mov	r2, r8
 800f1ba:	464b      	mov	r3, r9
 800f1bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f1c0:	f7f1 f808 	bl	80001d4 <__adddf3>
 800f1c4:	2000      	movs	r0, #0
 800f1c6:	a378      	add	r3, pc, #480	; (adr r3, 800f3a8 <__ieee754_pow+0x9b8>)
 800f1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1cc:	4604      	mov	r4, r0
 800f1ce:	460d      	mov	r5, r1
 800f1d0:	f7f1 f9b6 	bl	8000540 <__aeabi_dmul>
 800f1d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f1d8:	4606      	mov	r6, r0
 800f1da:	460f      	mov	r7, r1
 800f1dc:	4620      	mov	r0, r4
 800f1de:	4629      	mov	r1, r5
 800f1e0:	f7f0 fff6 	bl	80001d0 <__aeabi_dsub>
 800f1e4:	4602      	mov	r2, r0
 800f1e6:	460b      	mov	r3, r1
 800f1e8:	4640      	mov	r0, r8
 800f1ea:	4649      	mov	r1, r9
 800f1ec:	f7f0 fff0 	bl	80001d0 <__aeabi_dsub>
 800f1f0:	a36f      	add	r3, pc, #444	; (adr r3, 800f3b0 <__ieee754_pow+0x9c0>)
 800f1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f6:	f7f1 f9a3 	bl	8000540 <__aeabi_dmul>
 800f1fa:	a36f      	add	r3, pc, #444	; (adr r3, 800f3b8 <__ieee754_pow+0x9c8>)
 800f1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f200:	4680      	mov	r8, r0
 800f202:	4689      	mov	r9, r1
 800f204:	4620      	mov	r0, r4
 800f206:	4629      	mov	r1, r5
 800f208:	f7f1 f99a 	bl	8000540 <__aeabi_dmul>
 800f20c:	4602      	mov	r2, r0
 800f20e:	460b      	mov	r3, r1
 800f210:	4640      	mov	r0, r8
 800f212:	4649      	mov	r1, r9
 800f214:	f7f0 ffde 	bl	80001d4 <__adddf3>
 800f218:	4604      	mov	r4, r0
 800f21a:	460d      	mov	r5, r1
 800f21c:	4602      	mov	r2, r0
 800f21e:	460b      	mov	r3, r1
 800f220:	4630      	mov	r0, r6
 800f222:	4639      	mov	r1, r7
 800f224:	f7f0 ffd6 	bl	80001d4 <__adddf3>
 800f228:	4632      	mov	r2, r6
 800f22a:	463b      	mov	r3, r7
 800f22c:	4680      	mov	r8, r0
 800f22e:	4689      	mov	r9, r1
 800f230:	f7f0 ffce 	bl	80001d0 <__aeabi_dsub>
 800f234:	4602      	mov	r2, r0
 800f236:	460b      	mov	r3, r1
 800f238:	4620      	mov	r0, r4
 800f23a:	4629      	mov	r1, r5
 800f23c:	f7f0 ffc8 	bl	80001d0 <__aeabi_dsub>
 800f240:	4642      	mov	r2, r8
 800f242:	4606      	mov	r6, r0
 800f244:	460f      	mov	r7, r1
 800f246:	464b      	mov	r3, r9
 800f248:	4640      	mov	r0, r8
 800f24a:	4649      	mov	r1, r9
 800f24c:	f7f1 f978 	bl	8000540 <__aeabi_dmul>
 800f250:	a35b      	add	r3, pc, #364	; (adr r3, 800f3c0 <__ieee754_pow+0x9d0>)
 800f252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f256:	4604      	mov	r4, r0
 800f258:	460d      	mov	r5, r1
 800f25a:	f7f1 f971 	bl	8000540 <__aeabi_dmul>
 800f25e:	a35a      	add	r3, pc, #360	; (adr r3, 800f3c8 <__ieee754_pow+0x9d8>)
 800f260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f264:	f7f0 ffb4 	bl	80001d0 <__aeabi_dsub>
 800f268:	4622      	mov	r2, r4
 800f26a:	462b      	mov	r3, r5
 800f26c:	f7f1 f968 	bl	8000540 <__aeabi_dmul>
 800f270:	a357      	add	r3, pc, #348	; (adr r3, 800f3d0 <__ieee754_pow+0x9e0>)
 800f272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f276:	f7f0 ffad 	bl	80001d4 <__adddf3>
 800f27a:	4622      	mov	r2, r4
 800f27c:	462b      	mov	r3, r5
 800f27e:	f7f1 f95f 	bl	8000540 <__aeabi_dmul>
 800f282:	a355      	add	r3, pc, #340	; (adr r3, 800f3d8 <__ieee754_pow+0x9e8>)
 800f284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f288:	f7f0 ffa2 	bl	80001d0 <__aeabi_dsub>
 800f28c:	4622      	mov	r2, r4
 800f28e:	462b      	mov	r3, r5
 800f290:	f7f1 f956 	bl	8000540 <__aeabi_dmul>
 800f294:	a352      	add	r3, pc, #328	; (adr r3, 800f3e0 <__ieee754_pow+0x9f0>)
 800f296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f29a:	f7f0 ff9b 	bl	80001d4 <__adddf3>
 800f29e:	4622      	mov	r2, r4
 800f2a0:	462b      	mov	r3, r5
 800f2a2:	f7f1 f94d 	bl	8000540 <__aeabi_dmul>
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	460b      	mov	r3, r1
 800f2aa:	4640      	mov	r0, r8
 800f2ac:	4649      	mov	r1, r9
 800f2ae:	f7f0 ff8f 	bl	80001d0 <__aeabi_dsub>
 800f2b2:	4604      	mov	r4, r0
 800f2b4:	460d      	mov	r5, r1
 800f2b6:	4602      	mov	r2, r0
 800f2b8:	460b      	mov	r3, r1
 800f2ba:	4640      	mov	r0, r8
 800f2bc:	4649      	mov	r1, r9
 800f2be:	f7f1 f93f 	bl	8000540 <__aeabi_dmul>
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	e9cd 0100 	strd	r0, r1, [sp]
 800f2c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	4629      	mov	r1, r5
 800f2d0:	f7f0 ff7e 	bl	80001d0 <__aeabi_dsub>
 800f2d4:	4602      	mov	r2, r0
 800f2d6:	460b      	mov	r3, r1
 800f2d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f2dc:	f7f1 fa5a 	bl	8000794 <__aeabi_ddiv>
 800f2e0:	4632      	mov	r2, r6
 800f2e2:	4604      	mov	r4, r0
 800f2e4:	460d      	mov	r5, r1
 800f2e6:	463b      	mov	r3, r7
 800f2e8:	4640      	mov	r0, r8
 800f2ea:	4649      	mov	r1, r9
 800f2ec:	f7f1 f928 	bl	8000540 <__aeabi_dmul>
 800f2f0:	4632      	mov	r2, r6
 800f2f2:	463b      	mov	r3, r7
 800f2f4:	f7f0 ff6e 	bl	80001d4 <__adddf3>
 800f2f8:	4602      	mov	r2, r0
 800f2fa:	460b      	mov	r3, r1
 800f2fc:	4620      	mov	r0, r4
 800f2fe:	4629      	mov	r1, r5
 800f300:	f7f0 ff66 	bl	80001d0 <__aeabi_dsub>
 800f304:	4642      	mov	r2, r8
 800f306:	464b      	mov	r3, r9
 800f308:	f7f0 ff62 	bl	80001d0 <__aeabi_dsub>
 800f30c:	4602      	mov	r2, r0
 800f30e:	460b      	mov	r3, r1
 800f310:	2000      	movs	r0, #0
 800f312:	4939      	ldr	r1, [pc, #228]	; (800f3f8 <__ieee754_pow+0xa08>)
 800f314:	f7f0 ff5c 	bl	80001d0 <__aeabi_dsub>
 800f318:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800f31c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800f320:	4602      	mov	r2, r0
 800f322:	460b      	mov	r3, r1
 800f324:	da2f      	bge.n	800f386 <__ieee754_pow+0x996>
 800f326:	4650      	mov	r0, sl
 800f328:	ec43 2b10 	vmov	d0, r2, r3
 800f32c:	f001 fa94 	bl	8010858 <scalbn>
 800f330:	ec51 0b10 	vmov	r0, r1, d0
 800f334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f338:	f7ff bbf1 	b.w	800eb1e <__ieee754_pow+0x12e>
 800f33c:	4b2f      	ldr	r3, [pc, #188]	; (800f3fc <__ieee754_pow+0xa0c>)
 800f33e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f342:	429e      	cmp	r6, r3
 800f344:	f77f af0c 	ble.w	800f160 <__ieee754_pow+0x770>
 800f348:	4b2d      	ldr	r3, [pc, #180]	; (800f400 <__ieee754_pow+0xa10>)
 800f34a:	440b      	add	r3, r1
 800f34c:	4303      	orrs	r3, r0
 800f34e:	d00b      	beq.n	800f368 <__ieee754_pow+0x978>
 800f350:	a325      	add	r3, pc, #148	; (adr r3, 800f3e8 <__ieee754_pow+0x9f8>)
 800f352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f35a:	f7f1 f8f1 	bl	8000540 <__aeabi_dmul>
 800f35e:	a322      	add	r3, pc, #136	; (adr r3, 800f3e8 <__ieee754_pow+0x9f8>)
 800f360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f364:	f7ff bbdb 	b.w	800eb1e <__ieee754_pow+0x12e>
 800f368:	4622      	mov	r2, r4
 800f36a:	462b      	mov	r3, r5
 800f36c:	f7f0 ff30 	bl	80001d0 <__aeabi_dsub>
 800f370:	4642      	mov	r2, r8
 800f372:	464b      	mov	r3, r9
 800f374:	f7f1 fb6a 	bl	8000a4c <__aeabi_dcmpge>
 800f378:	2800      	cmp	r0, #0
 800f37a:	f43f aef1 	beq.w	800f160 <__ieee754_pow+0x770>
 800f37e:	e7e7      	b.n	800f350 <__ieee754_pow+0x960>
 800f380:	f04f 0a00 	mov.w	sl, #0
 800f384:	e718      	b.n	800f1b8 <__ieee754_pow+0x7c8>
 800f386:	4621      	mov	r1, r4
 800f388:	e7d4      	b.n	800f334 <__ieee754_pow+0x944>
 800f38a:	2000      	movs	r0, #0
 800f38c:	491a      	ldr	r1, [pc, #104]	; (800f3f8 <__ieee754_pow+0xa08>)
 800f38e:	f7ff bb8f 	b.w	800eab0 <__ieee754_pow+0xc0>
 800f392:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f396:	f7ff bb8b 	b.w	800eab0 <__ieee754_pow+0xc0>
 800f39a:	4630      	mov	r0, r6
 800f39c:	4639      	mov	r1, r7
 800f39e:	f7ff bb87 	b.w	800eab0 <__ieee754_pow+0xc0>
 800f3a2:	4693      	mov	fp, r2
 800f3a4:	f7ff bb98 	b.w	800ead8 <__ieee754_pow+0xe8>
 800f3a8:	00000000 	.word	0x00000000
 800f3ac:	3fe62e43 	.word	0x3fe62e43
 800f3b0:	fefa39ef 	.word	0xfefa39ef
 800f3b4:	3fe62e42 	.word	0x3fe62e42
 800f3b8:	0ca86c39 	.word	0x0ca86c39
 800f3bc:	be205c61 	.word	0xbe205c61
 800f3c0:	72bea4d0 	.word	0x72bea4d0
 800f3c4:	3e663769 	.word	0x3e663769
 800f3c8:	c5d26bf1 	.word	0xc5d26bf1
 800f3cc:	3ebbbd41 	.word	0x3ebbbd41
 800f3d0:	af25de2c 	.word	0xaf25de2c
 800f3d4:	3f11566a 	.word	0x3f11566a
 800f3d8:	16bebd93 	.word	0x16bebd93
 800f3dc:	3f66c16c 	.word	0x3f66c16c
 800f3e0:	5555553e 	.word	0x5555553e
 800f3e4:	3fc55555 	.word	0x3fc55555
 800f3e8:	c2f8f359 	.word	0xc2f8f359
 800f3ec:	01a56e1f 	.word	0x01a56e1f
 800f3f0:	3fe00000 	.word	0x3fe00000
 800f3f4:	000fffff 	.word	0x000fffff
 800f3f8:	3ff00000 	.word	0x3ff00000
 800f3fc:	4090cbff 	.word	0x4090cbff
 800f400:	3f6f3400 	.word	0x3f6f3400
 800f404:	652b82fe 	.word	0x652b82fe
 800f408:	3c971547 	.word	0x3c971547
 800f40c:	00000000 	.word	0x00000000

0800f410 <__ieee754_rem_pio2>:
 800f410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f414:	ec57 6b10 	vmov	r6, r7, d0
 800f418:	4bc3      	ldr	r3, [pc, #780]	; (800f728 <__ieee754_rem_pio2+0x318>)
 800f41a:	b08d      	sub	sp, #52	; 0x34
 800f41c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f420:	4598      	cmp	r8, r3
 800f422:	4604      	mov	r4, r0
 800f424:	9704      	str	r7, [sp, #16]
 800f426:	dc07      	bgt.n	800f438 <__ieee754_rem_pio2+0x28>
 800f428:	2200      	movs	r2, #0
 800f42a:	2300      	movs	r3, #0
 800f42c:	ed84 0b00 	vstr	d0, [r4]
 800f430:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f434:	2500      	movs	r5, #0
 800f436:	e027      	b.n	800f488 <__ieee754_rem_pio2+0x78>
 800f438:	4bbc      	ldr	r3, [pc, #752]	; (800f72c <__ieee754_rem_pio2+0x31c>)
 800f43a:	4598      	cmp	r8, r3
 800f43c:	dc75      	bgt.n	800f52a <__ieee754_rem_pio2+0x11a>
 800f43e:	9b04      	ldr	r3, [sp, #16]
 800f440:	4dbb      	ldr	r5, [pc, #748]	; (800f730 <__ieee754_rem_pio2+0x320>)
 800f442:	2b00      	cmp	r3, #0
 800f444:	ee10 0a10 	vmov	r0, s0
 800f448:	a3a9      	add	r3, pc, #676	; (adr r3, 800f6f0 <__ieee754_rem_pio2+0x2e0>)
 800f44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f44e:	4639      	mov	r1, r7
 800f450:	dd36      	ble.n	800f4c0 <__ieee754_rem_pio2+0xb0>
 800f452:	f7f0 febd 	bl	80001d0 <__aeabi_dsub>
 800f456:	45a8      	cmp	r8, r5
 800f458:	4606      	mov	r6, r0
 800f45a:	460f      	mov	r7, r1
 800f45c:	d018      	beq.n	800f490 <__ieee754_rem_pio2+0x80>
 800f45e:	a3a6      	add	r3, pc, #664	; (adr r3, 800f6f8 <__ieee754_rem_pio2+0x2e8>)
 800f460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f464:	f7f0 feb4 	bl	80001d0 <__aeabi_dsub>
 800f468:	4602      	mov	r2, r0
 800f46a:	460b      	mov	r3, r1
 800f46c:	e9c4 2300 	strd	r2, r3, [r4]
 800f470:	4630      	mov	r0, r6
 800f472:	4639      	mov	r1, r7
 800f474:	f7f0 feac 	bl	80001d0 <__aeabi_dsub>
 800f478:	a39f      	add	r3, pc, #636	; (adr r3, 800f6f8 <__ieee754_rem_pio2+0x2e8>)
 800f47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f47e:	f7f0 fea7 	bl	80001d0 <__aeabi_dsub>
 800f482:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f486:	2501      	movs	r5, #1
 800f488:	4628      	mov	r0, r5
 800f48a:	b00d      	add	sp, #52	; 0x34
 800f48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f490:	a39b      	add	r3, pc, #620	; (adr r3, 800f700 <__ieee754_rem_pio2+0x2f0>)
 800f492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f496:	f7f0 fe9b 	bl	80001d0 <__aeabi_dsub>
 800f49a:	a39b      	add	r3, pc, #620	; (adr r3, 800f708 <__ieee754_rem_pio2+0x2f8>)
 800f49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a0:	4606      	mov	r6, r0
 800f4a2:	460f      	mov	r7, r1
 800f4a4:	f7f0 fe94 	bl	80001d0 <__aeabi_dsub>
 800f4a8:	4602      	mov	r2, r0
 800f4aa:	460b      	mov	r3, r1
 800f4ac:	e9c4 2300 	strd	r2, r3, [r4]
 800f4b0:	4630      	mov	r0, r6
 800f4b2:	4639      	mov	r1, r7
 800f4b4:	f7f0 fe8c 	bl	80001d0 <__aeabi_dsub>
 800f4b8:	a393      	add	r3, pc, #588	; (adr r3, 800f708 <__ieee754_rem_pio2+0x2f8>)
 800f4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4be:	e7de      	b.n	800f47e <__ieee754_rem_pio2+0x6e>
 800f4c0:	f7f0 fe88 	bl	80001d4 <__adddf3>
 800f4c4:	45a8      	cmp	r8, r5
 800f4c6:	4606      	mov	r6, r0
 800f4c8:	460f      	mov	r7, r1
 800f4ca:	d016      	beq.n	800f4fa <__ieee754_rem_pio2+0xea>
 800f4cc:	a38a      	add	r3, pc, #552	; (adr r3, 800f6f8 <__ieee754_rem_pio2+0x2e8>)
 800f4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d2:	f7f0 fe7f 	bl	80001d4 <__adddf3>
 800f4d6:	4602      	mov	r2, r0
 800f4d8:	460b      	mov	r3, r1
 800f4da:	e9c4 2300 	strd	r2, r3, [r4]
 800f4de:	4630      	mov	r0, r6
 800f4e0:	4639      	mov	r1, r7
 800f4e2:	f7f0 fe75 	bl	80001d0 <__aeabi_dsub>
 800f4e6:	a384      	add	r3, pc, #528	; (adr r3, 800f6f8 <__ieee754_rem_pio2+0x2e8>)
 800f4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ec:	f7f0 fe72 	bl	80001d4 <__adddf3>
 800f4f0:	f04f 35ff 	mov.w	r5, #4294967295
 800f4f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f4f8:	e7c6      	b.n	800f488 <__ieee754_rem_pio2+0x78>
 800f4fa:	a381      	add	r3, pc, #516	; (adr r3, 800f700 <__ieee754_rem_pio2+0x2f0>)
 800f4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f500:	f7f0 fe68 	bl	80001d4 <__adddf3>
 800f504:	a380      	add	r3, pc, #512	; (adr r3, 800f708 <__ieee754_rem_pio2+0x2f8>)
 800f506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f50a:	4606      	mov	r6, r0
 800f50c:	460f      	mov	r7, r1
 800f50e:	f7f0 fe61 	bl	80001d4 <__adddf3>
 800f512:	4602      	mov	r2, r0
 800f514:	460b      	mov	r3, r1
 800f516:	e9c4 2300 	strd	r2, r3, [r4]
 800f51a:	4630      	mov	r0, r6
 800f51c:	4639      	mov	r1, r7
 800f51e:	f7f0 fe57 	bl	80001d0 <__aeabi_dsub>
 800f522:	a379      	add	r3, pc, #484	; (adr r3, 800f708 <__ieee754_rem_pio2+0x2f8>)
 800f524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f528:	e7e0      	b.n	800f4ec <__ieee754_rem_pio2+0xdc>
 800f52a:	4b82      	ldr	r3, [pc, #520]	; (800f734 <__ieee754_rem_pio2+0x324>)
 800f52c:	4598      	cmp	r8, r3
 800f52e:	f300 80d0 	bgt.w	800f6d2 <__ieee754_rem_pio2+0x2c2>
 800f532:	f001 f86b 	bl	801060c <fabs>
 800f536:	ec57 6b10 	vmov	r6, r7, d0
 800f53a:	ee10 0a10 	vmov	r0, s0
 800f53e:	a374      	add	r3, pc, #464	; (adr r3, 800f710 <__ieee754_rem_pio2+0x300>)
 800f540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f544:	4639      	mov	r1, r7
 800f546:	f7f0 fffb 	bl	8000540 <__aeabi_dmul>
 800f54a:	2200      	movs	r2, #0
 800f54c:	4b7a      	ldr	r3, [pc, #488]	; (800f738 <__ieee754_rem_pio2+0x328>)
 800f54e:	f7f0 fe41 	bl	80001d4 <__adddf3>
 800f552:	f7f1 faa5 	bl	8000aa0 <__aeabi_d2iz>
 800f556:	4605      	mov	r5, r0
 800f558:	f7f0 ff88 	bl	800046c <__aeabi_i2d>
 800f55c:	a364      	add	r3, pc, #400	; (adr r3, 800f6f0 <__ieee754_rem_pio2+0x2e0>)
 800f55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f562:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f566:	f7f0 ffeb 	bl	8000540 <__aeabi_dmul>
 800f56a:	4602      	mov	r2, r0
 800f56c:	460b      	mov	r3, r1
 800f56e:	4630      	mov	r0, r6
 800f570:	4639      	mov	r1, r7
 800f572:	f7f0 fe2d 	bl	80001d0 <__aeabi_dsub>
 800f576:	a360      	add	r3, pc, #384	; (adr r3, 800f6f8 <__ieee754_rem_pio2+0x2e8>)
 800f578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57c:	4682      	mov	sl, r0
 800f57e:	468b      	mov	fp, r1
 800f580:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f584:	f7f0 ffdc 	bl	8000540 <__aeabi_dmul>
 800f588:	2d1f      	cmp	r5, #31
 800f58a:	4606      	mov	r6, r0
 800f58c:	460f      	mov	r7, r1
 800f58e:	dc0c      	bgt.n	800f5aa <__ieee754_rem_pio2+0x19a>
 800f590:	1e6a      	subs	r2, r5, #1
 800f592:	4b6a      	ldr	r3, [pc, #424]	; (800f73c <__ieee754_rem_pio2+0x32c>)
 800f594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f598:	4543      	cmp	r3, r8
 800f59a:	d006      	beq.n	800f5aa <__ieee754_rem_pio2+0x19a>
 800f59c:	4632      	mov	r2, r6
 800f59e:	463b      	mov	r3, r7
 800f5a0:	4650      	mov	r0, sl
 800f5a2:	4659      	mov	r1, fp
 800f5a4:	f7f0 fe14 	bl	80001d0 <__aeabi_dsub>
 800f5a8:	e00e      	b.n	800f5c8 <__ieee754_rem_pio2+0x1b8>
 800f5aa:	4632      	mov	r2, r6
 800f5ac:	463b      	mov	r3, r7
 800f5ae:	4650      	mov	r0, sl
 800f5b0:	4659      	mov	r1, fp
 800f5b2:	f7f0 fe0d 	bl	80001d0 <__aeabi_dsub>
 800f5b6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f5ba:	9305      	str	r3, [sp, #20]
 800f5bc:	9a05      	ldr	r2, [sp, #20]
 800f5be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f5c2:	1ad3      	subs	r3, r2, r3
 800f5c4:	2b10      	cmp	r3, #16
 800f5c6:	dc02      	bgt.n	800f5ce <__ieee754_rem_pio2+0x1be>
 800f5c8:	e9c4 0100 	strd	r0, r1, [r4]
 800f5cc:	e039      	b.n	800f642 <__ieee754_rem_pio2+0x232>
 800f5ce:	a34c      	add	r3, pc, #304	; (adr r3, 800f700 <__ieee754_rem_pio2+0x2f0>)
 800f5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5d8:	f7f0 ffb2 	bl	8000540 <__aeabi_dmul>
 800f5dc:	4606      	mov	r6, r0
 800f5de:	460f      	mov	r7, r1
 800f5e0:	4602      	mov	r2, r0
 800f5e2:	460b      	mov	r3, r1
 800f5e4:	4650      	mov	r0, sl
 800f5e6:	4659      	mov	r1, fp
 800f5e8:	f7f0 fdf2 	bl	80001d0 <__aeabi_dsub>
 800f5ec:	4602      	mov	r2, r0
 800f5ee:	460b      	mov	r3, r1
 800f5f0:	4680      	mov	r8, r0
 800f5f2:	4689      	mov	r9, r1
 800f5f4:	4650      	mov	r0, sl
 800f5f6:	4659      	mov	r1, fp
 800f5f8:	f7f0 fdea 	bl	80001d0 <__aeabi_dsub>
 800f5fc:	4632      	mov	r2, r6
 800f5fe:	463b      	mov	r3, r7
 800f600:	f7f0 fde6 	bl	80001d0 <__aeabi_dsub>
 800f604:	a340      	add	r3, pc, #256	; (adr r3, 800f708 <__ieee754_rem_pio2+0x2f8>)
 800f606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f60a:	4606      	mov	r6, r0
 800f60c:	460f      	mov	r7, r1
 800f60e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f612:	f7f0 ff95 	bl	8000540 <__aeabi_dmul>
 800f616:	4632      	mov	r2, r6
 800f618:	463b      	mov	r3, r7
 800f61a:	f7f0 fdd9 	bl	80001d0 <__aeabi_dsub>
 800f61e:	4602      	mov	r2, r0
 800f620:	460b      	mov	r3, r1
 800f622:	4606      	mov	r6, r0
 800f624:	460f      	mov	r7, r1
 800f626:	4640      	mov	r0, r8
 800f628:	4649      	mov	r1, r9
 800f62a:	f7f0 fdd1 	bl	80001d0 <__aeabi_dsub>
 800f62e:	9a05      	ldr	r2, [sp, #20]
 800f630:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f634:	1ad3      	subs	r3, r2, r3
 800f636:	2b31      	cmp	r3, #49	; 0x31
 800f638:	dc20      	bgt.n	800f67c <__ieee754_rem_pio2+0x26c>
 800f63a:	e9c4 0100 	strd	r0, r1, [r4]
 800f63e:	46c2      	mov	sl, r8
 800f640:	46cb      	mov	fp, r9
 800f642:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f646:	4650      	mov	r0, sl
 800f648:	4642      	mov	r2, r8
 800f64a:	464b      	mov	r3, r9
 800f64c:	4659      	mov	r1, fp
 800f64e:	f7f0 fdbf 	bl	80001d0 <__aeabi_dsub>
 800f652:	463b      	mov	r3, r7
 800f654:	4632      	mov	r2, r6
 800f656:	f7f0 fdbb 	bl	80001d0 <__aeabi_dsub>
 800f65a:	9b04      	ldr	r3, [sp, #16]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f662:	f6bf af11 	bge.w	800f488 <__ieee754_rem_pio2+0x78>
 800f666:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f66a:	6063      	str	r3, [r4, #4]
 800f66c:	f8c4 8000 	str.w	r8, [r4]
 800f670:	60a0      	str	r0, [r4, #8]
 800f672:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f676:	60e3      	str	r3, [r4, #12]
 800f678:	426d      	negs	r5, r5
 800f67a:	e705      	b.n	800f488 <__ieee754_rem_pio2+0x78>
 800f67c:	a326      	add	r3, pc, #152	; (adr r3, 800f718 <__ieee754_rem_pio2+0x308>)
 800f67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f682:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f686:	f7f0 ff5b 	bl	8000540 <__aeabi_dmul>
 800f68a:	4606      	mov	r6, r0
 800f68c:	460f      	mov	r7, r1
 800f68e:	4602      	mov	r2, r0
 800f690:	460b      	mov	r3, r1
 800f692:	4640      	mov	r0, r8
 800f694:	4649      	mov	r1, r9
 800f696:	f7f0 fd9b 	bl	80001d0 <__aeabi_dsub>
 800f69a:	4602      	mov	r2, r0
 800f69c:	460b      	mov	r3, r1
 800f69e:	4682      	mov	sl, r0
 800f6a0:	468b      	mov	fp, r1
 800f6a2:	4640      	mov	r0, r8
 800f6a4:	4649      	mov	r1, r9
 800f6a6:	f7f0 fd93 	bl	80001d0 <__aeabi_dsub>
 800f6aa:	4632      	mov	r2, r6
 800f6ac:	463b      	mov	r3, r7
 800f6ae:	f7f0 fd8f 	bl	80001d0 <__aeabi_dsub>
 800f6b2:	a31b      	add	r3, pc, #108	; (adr r3, 800f720 <__ieee754_rem_pio2+0x310>)
 800f6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b8:	4606      	mov	r6, r0
 800f6ba:	460f      	mov	r7, r1
 800f6bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6c0:	f7f0 ff3e 	bl	8000540 <__aeabi_dmul>
 800f6c4:	4632      	mov	r2, r6
 800f6c6:	463b      	mov	r3, r7
 800f6c8:	f7f0 fd82 	bl	80001d0 <__aeabi_dsub>
 800f6cc:	4606      	mov	r6, r0
 800f6ce:	460f      	mov	r7, r1
 800f6d0:	e764      	b.n	800f59c <__ieee754_rem_pio2+0x18c>
 800f6d2:	4b1b      	ldr	r3, [pc, #108]	; (800f740 <__ieee754_rem_pio2+0x330>)
 800f6d4:	4598      	cmp	r8, r3
 800f6d6:	dd35      	ble.n	800f744 <__ieee754_rem_pio2+0x334>
 800f6d8:	ee10 2a10 	vmov	r2, s0
 800f6dc:	463b      	mov	r3, r7
 800f6de:	4630      	mov	r0, r6
 800f6e0:	4639      	mov	r1, r7
 800f6e2:	f7f0 fd75 	bl	80001d0 <__aeabi_dsub>
 800f6e6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f6ea:	e9c4 0100 	strd	r0, r1, [r4]
 800f6ee:	e6a1      	b.n	800f434 <__ieee754_rem_pio2+0x24>
 800f6f0:	54400000 	.word	0x54400000
 800f6f4:	3ff921fb 	.word	0x3ff921fb
 800f6f8:	1a626331 	.word	0x1a626331
 800f6fc:	3dd0b461 	.word	0x3dd0b461
 800f700:	1a600000 	.word	0x1a600000
 800f704:	3dd0b461 	.word	0x3dd0b461
 800f708:	2e037073 	.word	0x2e037073
 800f70c:	3ba3198a 	.word	0x3ba3198a
 800f710:	6dc9c883 	.word	0x6dc9c883
 800f714:	3fe45f30 	.word	0x3fe45f30
 800f718:	2e000000 	.word	0x2e000000
 800f71c:	3ba3198a 	.word	0x3ba3198a
 800f720:	252049c1 	.word	0x252049c1
 800f724:	397b839a 	.word	0x397b839a
 800f728:	3fe921fb 	.word	0x3fe921fb
 800f72c:	4002d97b 	.word	0x4002d97b
 800f730:	3ff921fb 	.word	0x3ff921fb
 800f734:	413921fb 	.word	0x413921fb
 800f738:	3fe00000 	.word	0x3fe00000
 800f73c:	08010d00 	.word	0x08010d00
 800f740:	7fefffff 	.word	0x7fefffff
 800f744:	ea4f 5528 	mov.w	r5, r8, asr #20
 800f748:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800f74c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800f750:	4630      	mov	r0, r6
 800f752:	460f      	mov	r7, r1
 800f754:	f7f1 f9a4 	bl	8000aa0 <__aeabi_d2iz>
 800f758:	f7f0 fe88 	bl	800046c <__aeabi_i2d>
 800f75c:	4602      	mov	r2, r0
 800f75e:	460b      	mov	r3, r1
 800f760:	4630      	mov	r0, r6
 800f762:	4639      	mov	r1, r7
 800f764:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f768:	f7f0 fd32 	bl	80001d0 <__aeabi_dsub>
 800f76c:	2200      	movs	r2, #0
 800f76e:	4b1f      	ldr	r3, [pc, #124]	; (800f7ec <__ieee754_rem_pio2+0x3dc>)
 800f770:	f7f0 fee6 	bl	8000540 <__aeabi_dmul>
 800f774:	460f      	mov	r7, r1
 800f776:	4606      	mov	r6, r0
 800f778:	f7f1 f992 	bl	8000aa0 <__aeabi_d2iz>
 800f77c:	f7f0 fe76 	bl	800046c <__aeabi_i2d>
 800f780:	4602      	mov	r2, r0
 800f782:	460b      	mov	r3, r1
 800f784:	4630      	mov	r0, r6
 800f786:	4639      	mov	r1, r7
 800f788:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f78c:	f7f0 fd20 	bl	80001d0 <__aeabi_dsub>
 800f790:	2200      	movs	r2, #0
 800f792:	4b16      	ldr	r3, [pc, #88]	; (800f7ec <__ieee754_rem_pio2+0x3dc>)
 800f794:	f7f0 fed4 	bl	8000540 <__aeabi_dmul>
 800f798:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f79c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800f7a0:	f04f 0803 	mov.w	r8, #3
 800f7a4:	2600      	movs	r6, #0
 800f7a6:	2700      	movs	r7, #0
 800f7a8:	4632      	mov	r2, r6
 800f7aa:	463b      	mov	r3, r7
 800f7ac:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800f7b0:	f108 3aff 	add.w	sl, r8, #4294967295
 800f7b4:	f7f1 f92c 	bl	8000a10 <__aeabi_dcmpeq>
 800f7b8:	b9b0      	cbnz	r0, 800f7e8 <__ieee754_rem_pio2+0x3d8>
 800f7ba:	4b0d      	ldr	r3, [pc, #52]	; (800f7f0 <__ieee754_rem_pio2+0x3e0>)
 800f7bc:	9301      	str	r3, [sp, #4]
 800f7be:	2302      	movs	r3, #2
 800f7c0:	9300      	str	r3, [sp, #0]
 800f7c2:	462a      	mov	r2, r5
 800f7c4:	4643      	mov	r3, r8
 800f7c6:	4621      	mov	r1, r4
 800f7c8:	a806      	add	r0, sp, #24
 800f7ca:	f000 fb25 	bl	800fe18 <__kernel_rem_pio2>
 800f7ce:	9b04      	ldr	r3, [sp, #16]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	4605      	mov	r5, r0
 800f7d4:	f6bf ae58 	bge.w	800f488 <__ieee754_rem_pio2+0x78>
 800f7d8:	6863      	ldr	r3, [r4, #4]
 800f7da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f7de:	6063      	str	r3, [r4, #4]
 800f7e0:	68e3      	ldr	r3, [r4, #12]
 800f7e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f7e6:	e746      	b.n	800f676 <__ieee754_rem_pio2+0x266>
 800f7e8:	46d0      	mov	r8, sl
 800f7ea:	e7dd      	b.n	800f7a8 <__ieee754_rem_pio2+0x398>
 800f7ec:	41700000 	.word	0x41700000
 800f7f0:	08010d80 	.word	0x08010d80

0800f7f4 <__ieee754_sqrt>:
 800f7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7f8:	4955      	ldr	r1, [pc, #340]	; (800f950 <__ieee754_sqrt+0x15c>)
 800f7fa:	ec55 4b10 	vmov	r4, r5, d0
 800f7fe:	43a9      	bics	r1, r5
 800f800:	462b      	mov	r3, r5
 800f802:	462a      	mov	r2, r5
 800f804:	d112      	bne.n	800f82c <__ieee754_sqrt+0x38>
 800f806:	ee10 2a10 	vmov	r2, s0
 800f80a:	ee10 0a10 	vmov	r0, s0
 800f80e:	4629      	mov	r1, r5
 800f810:	f7f0 fe96 	bl	8000540 <__aeabi_dmul>
 800f814:	4602      	mov	r2, r0
 800f816:	460b      	mov	r3, r1
 800f818:	4620      	mov	r0, r4
 800f81a:	4629      	mov	r1, r5
 800f81c:	f7f0 fcda 	bl	80001d4 <__adddf3>
 800f820:	4604      	mov	r4, r0
 800f822:	460d      	mov	r5, r1
 800f824:	ec45 4b10 	vmov	d0, r4, r5
 800f828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f82c:	2d00      	cmp	r5, #0
 800f82e:	ee10 0a10 	vmov	r0, s0
 800f832:	4621      	mov	r1, r4
 800f834:	dc0f      	bgt.n	800f856 <__ieee754_sqrt+0x62>
 800f836:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f83a:	4330      	orrs	r0, r6
 800f83c:	d0f2      	beq.n	800f824 <__ieee754_sqrt+0x30>
 800f83e:	b155      	cbz	r5, 800f856 <__ieee754_sqrt+0x62>
 800f840:	ee10 2a10 	vmov	r2, s0
 800f844:	4620      	mov	r0, r4
 800f846:	4629      	mov	r1, r5
 800f848:	f7f0 fcc2 	bl	80001d0 <__aeabi_dsub>
 800f84c:	4602      	mov	r2, r0
 800f84e:	460b      	mov	r3, r1
 800f850:	f7f0 ffa0 	bl	8000794 <__aeabi_ddiv>
 800f854:	e7e4      	b.n	800f820 <__ieee754_sqrt+0x2c>
 800f856:	151b      	asrs	r3, r3, #20
 800f858:	d073      	beq.n	800f942 <__ieee754_sqrt+0x14e>
 800f85a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f85e:	07dd      	lsls	r5, r3, #31
 800f860:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800f864:	bf48      	it	mi
 800f866:	0fc8      	lsrmi	r0, r1, #31
 800f868:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800f86c:	bf44      	itt	mi
 800f86e:	0049      	lslmi	r1, r1, #1
 800f870:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800f874:	2500      	movs	r5, #0
 800f876:	1058      	asrs	r0, r3, #1
 800f878:	0fcb      	lsrs	r3, r1, #31
 800f87a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800f87e:	0049      	lsls	r1, r1, #1
 800f880:	2316      	movs	r3, #22
 800f882:	462c      	mov	r4, r5
 800f884:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800f888:	19a7      	adds	r7, r4, r6
 800f88a:	4297      	cmp	r7, r2
 800f88c:	bfde      	ittt	le
 800f88e:	19bc      	addle	r4, r7, r6
 800f890:	1bd2      	suble	r2, r2, r7
 800f892:	19ad      	addle	r5, r5, r6
 800f894:	0fcf      	lsrs	r7, r1, #31
 800f896:	3b01      	subs	r3, #1
 800f898:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800f89c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f8a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f8a4:	d1f0      	bne.n	800f888 <__ieee754_sqrt+0x94>
 800f8a6:	f04f 0c20 	mov.w	ip, #32
 800f8aa:	469e      	mov	lr, r3
 800f8ac:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f8b0:	42a2      	cmp	r2, r4
 800f8b2:	eb06 070e 	add.w	r7, r6, lr
 800f8b6:	dc02      	bgt.n	800f8be <__ieee754_sqrt+0xca>
 800f8b8:	d112      	bne.n	800f8e0 <__ieee754_sqrt+0xec>
 800f8ba:	428f      	cmp	r7, r1
 800f8bc:	d810      	bhi.n	800f8e0 <__ieee754_sqrt+0xec>
 800f8be:	2f00      	cmp	r7, #0
 800f8c0:	eb07 0e06 	add.w	lr, r7, r6
 800f8c4:	da42      	bge.n	800f94c <__ieee754_sqrt+0x158>
 800f8c6:	f1be 0f00 	cmp.w	lr, #0
 800f8ca:	db3f      	blt.n	800f94c <__ieee754_sqrt+0x158>
 800f8cc:	f104 0801 	add.w	r8, r4, #1
 800f8d0:	1b12      	subs	r2, r2, r4
 800f8d2:	428f      	cmp	r7, r1
 800f8d4:	bf88      	it	hi
 800f8d6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f8da:	1bc9      	subs	r1, r1, r7
 800f8dc:	4433      	add	r3, r6
 800f8de:	4644      	mov	r4, r8
 800f8e0:	0052      	lsls	r2, r2, #1
 800f8e2:	f1bc 0c01 	subs.w	ip, ip, #1
 800f8e6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800f8ea:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f8ee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f8f2:	d1dd      	bne.n	800f8b0 <__ieee754_sqrt+0xbc>
 800f8f4:	430a      	orrs	r2, r1
 800f8f6:	d006      	beq.n	800f906 <__ieee754_sqrt+0x112>
 800f8f8:	1c5c      	adds	r4, r3, #1
 800f8fa:	bf13      	iteet	ne
 800f8fc:	3301      	addne	r3, #1
 800f8fe:	3501      	addeq	r5, #1
 800f900:	4663      	moveq	r3, ip
 800f902:	f023 0301 	bicne.w	r3, r3, #1
 800f906:	106a      	asrs	r2, r5, #1
 800f908:	085b      	lsrs	r3, r3, #1
 800f90a:	07e9      	lsls	r1, r5, #31
 800f90c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f910:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f914:	bf48      	it	mi
 800f916:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f91a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800f91e:	461c      	mov	r4, r3
 800f920:	e780      	b.n	800f824 <__ieee754_sqrt+0x30>
 800f922:	0aca      	lsrs	r2, r1, #11
 800f924:	3815      	subs	r0, #21
 800f926:	0549      	lsls	r1, r1, #21
 800f928:	2a00      	cmp	r2, #0
 800f92a:	d0fa      	beq.n	800f922 <__ieee754_sqrt+0x12e>
 800f92c:	02d6      	lsls	r6, r2, #11
 800f92e:	d50a      	bpl.n	800f946 <__ieee754_sqrt+0x152>
 800f930:	f1c3 0420 	rsb	r4, r3, #32
 800f934:	fa21 f404 	lsr.w	r4, r1, r4
 800f938:	1e5d      	subs	r5, r3, #1
 800f93a:	4099      	lsls	r1, r3
 800f93c:	4322      	orrs	r2, r4
 800f93e:	1b43      	subs	r3, r0, r5
 800f940:	e78b      	b.n	800f85a <__ieee754_sqrt+0x66>
 800f942:	4618      	mov	r0, r3
 800f944:	e7f0      	b.n	800f928 <__ieee754_sqrt+0x134>
 800f946:	0052      	lsls	r2, r2, #1
 800f948:	3301      	adds	r3, #1
 800f94a:	e7ef      	b.n	800f92c <__ieee754_sqrt+0x138>
 800f94c:	46a0      	mov	r8, r4
 800f94e:	e7bf      	b.n	800f8d0 <__ieee754_sqrt+0xdc>
 800f950:	7ff00000 	.word	0x7ff00000

0800f954 <__ieee754_asinf>:
 800f954:	b538      	push	{r3, r4, r5, lr}
 800f956:	ee10 5a10 	vmov	r5, s0
 800f95a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800f95e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800f962:	ed2d 8b04 	vpush	{d8-d9}
 800f966:	d10c      	bne.n	800f982 <__ieee754_asinf+0x2e>
 800f968:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800fae4 <__ieee754_asinf+0x190>
 800f96c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800fae8 <__ieee754_asinf+0x194>
 800f970:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f974:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f978:	eeb0 0a67 	vmov.f32	s0, s15
 800f97c:	ecbd 8b04 	vpop	{d8-d9}
 800f980:	bd38      	pop	{r3, r4, r5, pc}
 800f982:	dd04      	ble.n	800f98e <__ieee754_asinf+0x3a>
 800f984:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f988:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f98c:	e7f6      	b.n	800f97c <__ieee754_asinf+0x28>
 800f98e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800f992:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800f996:	da0b      	bge.n	800f9b0 <__ieee754_asinf+0x5c>
 800f998:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800f99c:	da52      	bge.n	800fa44 <__ieee754_asinf+0xf0>
 800f99e:	eddf 7a53 	vldr	s15, [pc, #332]	; 800faec <__ieee754_asinf+0x198>
 800f9a2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f9a6:	eef4 7ae8 	vcmpe.f32	s15, s17
 800f9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ae:	dce5      	bgt.n	800f97c <__ieee754_asinf+0x28>
 800f9b0:	f001 f89c 	bl	8010aec <fabsf>
 800f9b4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800f9b8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800f9bc:	ee20 8a08 	vmul.f32	s16, s0, s16
 800f9c0:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800faf0 <__ieee754_asinf+0x19c>
 800f9c4:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800faf4 <__ieee754_asinf+0x1a0>
 800f9c8:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 800faf8 <__ieee754_asinf+0x1a4>
 800f9cc:	eea8 7a27 	vfma.f32	s14, s16, s15
 800f9d0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800fafc <__ieee754_asinf+0x1a8>
 800f9d4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f9d8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800fb00 <__ieee754_asinf+0x1ac>
 800f9dc:	eea7 7a88 	vfma.f32	s14, s15, s16
 800f9e0:	eddf 7a48 	vldr	s15, [pc, #288]	; 800fb04 <__ieee754_asinf+0x1b0>
 800f9e4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f9e8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800fb08 <__ieee754_asinf+0x1b4>
 800f9ec:	eea7 9a88 	vfma.f32	s18, s15, s16
 800f9f0:	eddf 7a46 	vldr	s15, [pc, #280]	; 800fb0c <__ieee754_asinf+0x1b8>
 800f9f4:	eee8 7a07 	vfma.f32	s15, s16, s14
 800f9f8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800fb10 <__ieee754_asinf+0x1bc>
 800f9fc:	eea7 7a88 	vfma.f32	s14, s15, s16
 800fa00:	eddf 7a44 	vldr	s15, [pc, #272]	; 800fb14 <__ieee754_asinf+0x1c0>
 800fa04:	eee7 7a08 	vfma.f32	s15, s14, s16
 800fa08:	eeb0 0a48 	vmov.f32	s0, s16
 800fa0c:	eee7 8a88 	vfma.f32	s17, s15, s16
 800fa10:	f000 f936 	bl	800fc80 <__ieee754_sqrtf>
 800fa14:	4b40      	ldr	r3, [pc, #256]	; (800fb18 <__ieee754_asinf+0x1c4>)
 800fa16:	ee29 9a08 	vmul.f32	s18, s18, s16
 800fa1a:	429c      	cmp	r4, r3
 800fa1c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800fa20:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800fa24:	dd3d      	ble.n	800faa2 <__ieee754_asinf+0x14e>
 800fa26:	eea0 0a06 	vfma.f32	s0, s0, s12
 800fa2a:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800fb1c <__ieee754_asinf+0x1c8>
 800fa2e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800fa32:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800fae8 <__ieee754_asinf+0x194>
 800fa36:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fa3a:	2d00      	cmp	r5, #0
 800fa3c:	bfd8      	it	le
 800fa3e:	eeb1 0a40 	vnegle.f32	s0, s0
 800fa42:	e79b      	b.n	800f97c <__ieee754_asinf+0x28>
 800fa44:	ee60 7a00 	vmul.f32	s15, s0, s0
 800fa48:	eddf 6a29 	vldr	s13, [pc, #164]	; 800faf0 <__ieee754_asinf+0x19c>
 800fa4c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800faf4 <__ieee754_asinf+0x1a0>
 800fa50:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800fb08 <__ieee754_asinf+0x1b4>
 800fa54:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800fa58:	eddf 6a28 	vldr	s13, [pc, #160]	; 800fafc <__ieee754_asinf+0x1a8>
 800fa5c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fa60:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800fb00 <__ieee754_asinf+0x1ac>
 800fa64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fa68:	eddf 6a26 	vldr	s13, [pc, #152]	; 800fb04 <__ieee754_asinf+0x1b0>
 800fa6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fa70:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800faf8 <__ieee754_asinf+0x1a4>
 800fa74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fa78:	eddf 6a24 	vldr	s13, [pc, #144]	; 800fb0c <__ieee754_asinf+0x1b8>
 800fa7c:	eee7 6a86 	vfma.f32	s13, s15, s12
 800fa80:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800fb10 <__ieee754_asinf+0x1bc>
 800fa84:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800fa88:	eddf 6a22 	vldr	s13, [pc, #136]	; 800fb14 <__ieee754_asinf+0x1c0>
 800fa8c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800fa90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fa94:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800fa98:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800fa9c:	eea0 0a27 	vfma.f32	s0, s0, s15
 800faa0:	e76c      	b.n	800f97c <__ieee754_asinf+0x28>
 800faa2:	ee10 3a10 	vmov	r3, s0
 800faa6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800faaa:	f023 030f 	bic.w	r3, r3, #15
 800faae:	ee07 3a90 	vmov	s15, r3
 800fab2:	eef1 6a67 	vneg.f32	s13, s15
 800fab6:	eea6 8aa7 	vfma.f32	s16, s13, s15
 800faba:	ee70 5a00 	vadd.f32	s11, s0, s0
 800fabe:	ee37 0a80 	vadd.f32	s0, s15, s0
 800fac2:	eddf 7a08 	vldr	s15, [pc, #32]	; 800fae4 <__ieee754_asinf+0x190>
 800fac6:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800faca:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800fb20 <__ieee754_asinf+0x1cc>
 800face:	eee5 7a47 	vfms.f32	s15, s10, s14
 800fad2:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800fad6:	eeb0 6a40 	vmov.f32	s12, s0
 800fada:	eea6 6a87 	vfma.f32	s12, s13, s14
 800fade:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800fae2:	e7a8      	b.n	800fa36 <__ieee754_asinf+0xe2>
 800fae4:	b33bbd2e 	.word	0xb33bbd2e
 800fae8:	3fc90fdb 	.word	0x3fc90fdb
 800faec:	7149f2ca 	.word	0x7149f2ca
 800faf0:	3811ef08 	.word	0x3811ef08
 800faf4:	3a4f7f04 	.word	0x3a4f7f04
 800faf8:	3e2aaaab 	.word	0x3e2aaaab
 800fafc:	bd241146 	.word	0xbd241146
 800fb00:	3e4e0aa8 	.word	0x3e4e0aa8
 800fb04:	bea6b090 	.word	0xbea6b090
 800fb08:	3d9dc62e 	.word	0x3d9dc62e
 800fb0c:	bf303361 	.word	0xbf303361
 800fb10:	4001572d 	.word	0x4001572d
 800fb14:	c019d139 	.word	0xc019d139
 800fb18:	3f799999 	.word	0x3f799999
 800fb1c:	333bbd2e 	.word	0x333bbd2e
 800fb20:	3f490fdb 	.word	0x3f490fdb

0800fb24 <__ieee754_atan2f>:
 800fb24:	ee10 2a90 	vmov	r2, s1
 800fb28:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800fb2c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800fb30:	b510      	push	{r4, lr}
 800fb32:	eef0 7a40 	vmov.f32	s15, s0
 800fb36:	dc06      	bgt.n	800fb46 <__ieee754_atan2f+0x22>
 800fb38:	ee10 0a10 	vmov	r0, s0
 800fb3c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800fb40:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fb44:	dd04      	ble.n	800fb50 <__ieee754_atan2f+0x2c>
 800fb46:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800fb4a:	eeb0 0a67 	vmov.f32	s0, s15
 800fb4e:	bd10      	pop	{r4, pc}
 800fb50:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800fb54:	d103      	bne.n	800fb5e <__ieee754_atan2f+0x3a>
 800fb56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb5a:	f000 bef3 	b.w	8010944 <atanf>
 800fb5e:	1794      	asrs	r4, r2, #30
 800fb60:	f004 0402 	and.w	r4, r4, #2
 800fb64:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800fb68:	b943      	cbnz	r3, 800fb7c <__ieee754_atan2f+0x58>
 800fb6a:	2c02      	cmp	r4, #2
 800fb6c:	d06e      	beq.n	800fc4c <__ieee754_atan2f+0x128>
 800fb6e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800fc54 <__ieee754_atan2f+0x130>
 800fb72:	2c03      	cmp	r4, #3
 800fb74:	bf08      	it	eq
 800fb76:	eef0 7a47 	vmoveq.f32	s15, s14
 800fb7a:	e7e6      	b.n	800fb4a <__ieee754_atan2f+0x26>
 800fb7c:	b941      	cbnz	r1, 800fb90 <__ieee754_atan2f+0x6c>
 800fb7e:	eddf 7a36 	vldr	s15, [pc, #216]	; 800fc58 <__ieee754_atan2f+0x134>
 800fb82:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800fc5c <__ieee754_atan2f+0x138>
 800fb86:	2800      	cmp	r0, #0
 800fb88:	bfb8      	it	lt
 800fb8a:	eef0 7a47 	vmovlt.f32	s15, s14
 800fb8e:	e7dc      	b.n	800fb4a <__ieee754_atan2f+0x26>
 800fb90:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800fb94:	d122      	bne.n	800fbdc <__ieee754_atan2f+0xb8>
 800fb96:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fb9a:	d112      	bne.n	800fbc2 <__ieee754_atan2f+0x9e>
 800fb9c:	2c02      	cmp	r4, #2
 800fb9e:	d00a      	beq.n	800fbb6 <__ieee754_atan2f+0x92>
 800fba0:	2c03      	cmp	r4, #3
 800fba2:	d00b      	beq.n	800fbbc <__ieee754_atan2f+0x98>
 800fba4:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800fc60 <__ieee754_atan2f+0x13c>
 800fba8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800fc64 <__ieee754_atan2f+0x140>
 800fbac:	2c01      	cmp	r4, #1
 800fbae:	bf18      	it	ne
 800fbb0:	eef0 7a47 	vmovne.f32	s15, s14
 800fbb4:	e7c9      	b.n	800fb4a <__ieee754_atan2f+0x26>
 800fbb6:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800fc68 <__ieee754_atan2f+0x144>
 800fbba:	e7c6      	b.n	800fb4a <__ieee754_atan2f+0x26>
 800fbbc:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800fc6c <__ieee754_atan2f+0x148>
 800fbc0:	e7c3      	b.n	800fb4a <__ieee754_atan2f+0x26>
 800fbc2:	2c02      	cmp	r4, #2
 800fbc4:	d042      	beq.n	800fc4c <__ieee754_atan2f+0x128>
 800fbc6:	2c03      	cmp	r4, #3
 800fbc8:	d005      	beq.n	800fbd6 <__ieee754_atan2f+0xb2>
 800fbca:	2c01      	cmp	r4, #1
 800fbcc:	eddf 7a28 	vldr	s15, [pc, #160]	; 800fc70 <__ieee754_atan2f+0x14c>
 800fbd0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800fc74 <__ieee754_atan2f+0x150>
 800fbd4:	e7eb      	b.n	800fbae <__ieee754_atan2f+0x8a>
 800fbd6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800fc54 <__ieee754_atan2f+0x130>
 800fbda:	e7b6      	b.n	800fb4a <__ieee754_atan2f+0x26>
 800fbdc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fbe0:	d0cd      	beq.n	800fb7e <__ieee754_atan2f+0x5a>
 800fbe2:	1a5b      	subs	r3, r3, r1
 800fbe4:	15db      	asrs	r3, r3, #23
 800fbe6:	2b3c      	cmp	r3, #60	; 0x3c
 800fbe8:	dc1a      	bgt.n	800fc20 <__ieee754_atan2f+0xfc>
 800fbea:	2a00      	cmp	r2, #0
 800fbec:	da01      	bge.n	800fbf2 <__ieee754_atan2f+0xce>
 800fbee:	333c      	adds	r3, #60	; 0x3c
 800fbf0:	db19      	blt.n	800fc26 <__ieee754_atan2f+0x102>
 800fbf2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800fbf6:	f000 ff79 	bl	8010aec <fabsf>
 800fbfa:	f000 fea3 	bl	8010944 <atanf>
 800fbfe:	eef0 7a40 	vmov.f32	s15, s0
 800fc02:	2c01      	cmp	r4, #1
 800fc04:	d012      	beq.n	800fc2c <__ieee754_atan2f+0x108>
 800fc06:	2c02      	cmp	r4, #2
 800fc08:	d017      	beq.n	800fc3a <__ieee754_atan2f+0x116>
 800fc0a:	2c00      	cmp	r4, #0
 800fc0c:	d09d      	beq.n	800fb4a <__ieee754_atan2f+0x26>
 800fc0e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800fc78 <__ieee754_atan2f+0x154>
 800fc12:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fc16:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800fc7c <__ieee754_atan2f+0x158>
 800fc1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc1e:	e794      	b.n	800fb4a <__ieee754_atan2f+0x26>
 800fc20:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800fc58 <__ieee754_atan2f+0x134>
 800fc24:	e7ed      	b.n	800fc02 <__ieee754_atan2f+0xde>
 800fc26:	eddf 7a13 	vldr	s15, [pc, #76]	; 800fc74 <__ieee754_atan2f+0x150>
 800fc2a:	e7ea      	b.n	800fc02 <__ieee754_atan2f+0xde>
 800fc2c:	ee17 3a90 	vmov	r3, s15
 800fc30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fc34:	ee07 3a90 	vmov	s15, r3
 800fc38:	e787      	b.n	800fb4a <__ieee754_atan2f+0x26>
 800fc3a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800fc78 <__ieee754_atan2f+0x154>
 800fc3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fc42:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800fc7c <__ieee754_atan2f+0x158>
 800fc46:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc4a:	e77e      	b.n	800fb4a <__ieee754_atan2f+0x26>
 800fc4c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800fc7c <__ieee754_atan2f+0x158>
 800fc50:	e77b      	b.n	800fb4a <__ieee754_atan2f+0x26>
 800fc52:	bf00      	nop
 800fc54:	c0490fdb 	.word	0xc0490fdb
 800fc58:	3fc90fdb 	.word	0x3fc90fdb
 800fc5c:	bfc90fdb 	.word	0xbfc90fdb
 800fc60:	bf490fdb 	.word	0xbf490fdb
 800fc64:	3f490fdb 	.word	0x3f490fdb
 800fc68:	4016cbe4 	.word	0x4016cbe4
 800fc6c:	c016cbe4 	.word	0xc016cbe4
 800fc70:	80000000 	.word	0x80000000
 800fc74:	00000000 	.word	0x00000000
 800fc78:	33bbbd2e 	.word	0x33bbbd2e
 800fc7c:	40490fdb 	.word	0x40490fdb

0800fc80 <__ieee754_sqrtf>:
 800fc80:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fc84:	4770      	bx	lr
	...

0800fc88 <__kernel_cos>:
 800fc88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc8c:	ec59 8b10 	vmov	r8, r9, d0
 800fc90:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800fc94:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800fc98:	ed2d 8b02 	vpush	{d8}
 800fc9c:	eeb0 8a41 	vmov.f32	s16, s2
 800fca0:	eef0 8a61 	vmov.f32	s17, s3
 800fca4:	da07      	bge.n	800fcb6 <__kernel_cos+0x2e>
 800fca6:	ee10 0a10 	vmov	r0, s0
 800fcaa:	4649      	mov	r1, r9
 800fcac:	f7f0 fef8 	bl	8000aa0 <__aeabi_d2iz>
 800fcb0:	2800      	cmp	r0, #0
 800fcb2:	f000 8089 	beq.w	800fdc8 <__kernel_cos+0x140>
 800fcb6:	4642      	mov	r2, r8
 800fcb8:	464b      	mov	r3, r9
 800fcba:	4640      	mov	r0, r8
 800fcbc:	4649      	mov	r1, r9
 800fcbe:	f7f0 fc3f 	bl	8000540 <__aeabi_dmul>
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	4b4e      	ldr	r3, [pc, #312]	; (800fe00 <__kernel_cos+0x178>)
 800fcc6:	4604      	mov	r4, r0
 800fcc8:	460d      	mov	r5, r1
 800fcca:	f7f0 fc39 	bl	8000540 <__aeabi_dmul>
 800fcce:	a340      	add	r3, pc, #256	; (adr r3, 800fdd0 <__kernel_cos+0x148>)
 800fcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd4:	4682      	mov	sl, r0
 800fcd6:	468b      	mov	fp, r1
 800fcd8:	4620      	mov	r0, r4
 800fcda:	4629      	mov	r1, r5
 800fcdc:	f7f0 fc30 	bl	8000540 <__aeabi_dmul>
 800fce0:	a33d      	add	r3, pc, #244	; (adr r3, 800fdd8 <__kernel_cos+0x150>)
 800fce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce6:	f7f0 fa75 	bl	80001d4 <__adddf3>
 800fcea:	4622      	mov	r2, r4
 800fcec:	462b      	mov	r3, r5
 800fcee:	f7f0 fc27 	bl	8000540 <__aeabi_dmul>
 800fcf2:	a33b      	add	r3, pc, #236	; (adr r3, 800fde0 <__kernel_cos+0x158>)
 800fcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf8:	f7f0 fa6a 	bl	80001d0 <__aeabi_dsub>
 800fcfc:	4622      	mov	r2, r4
 800fcfe:	462b      	mov	r3, r5
 800fd00:	f7f0 fc1e 	bl	8000540 <__aeabi_dmul>
 800fd04:	a338      	add	r3, pc, #224	; (adr r3, 800fde8 <__kernel_cos+0x160>)
 800fd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0a:	f7f0 fa63 	bl	80001d4 <__adddf3>
 800fd0e:	4622      	mov	r2, r4
 800fd10:	462b      	mov	r3, r5
 800fd12:	f7f0 fc15 	bl	8000540 <__aeabi_dmul>
 800fd16:	a336      	add	r3, pc, #216	; (adr r3, 800fdf0 <__kernel_cos+0x168>)
 800fd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1c:	f7f0 fa58 	bl	80001d0 <__aeabi_dsub>
 800fd20:	4622      	mov	r2, r4
 800fd22:	462b      	mov	r3, r5
 800fd24:	f7f0 fc0c 	bl	8000540 <__aeabi_dmul>
 800fd28:	a333      	add	r3, pc, #204	; (adr r3, 800fdf8 <__kernel_cos+0x170>)
 800fd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd2e:	f7f0 fa51 	bl	80001d4 <__adddf3>
 800fd32:	4622      	mov	r2, r4
 800fd34:	462b      	mov	r3, r5
 800fd36:	f7f0 fc03 	bl	8000540 <__aeabi_dmul>
 800fd3a:	4622      	mov	r2, r4
 800fd3c:	462b      	mov	r3, r5
 800fd3e:	f7f0 fbff 	bl	8000540 <__aeabi_dmul>
 800fd42:	ec53 2b18 	vmov	r2, r3, d8
 800fd46:	4604      	mov	r4, r0
 800fd48:	460d      	mov	r5, r1
 800fd4a:	4640      	mov	r0, r8
 800fd4c:	4649      	mov	r1, r9
 800fd4e:	f7f0 fbf7 	bl	8000540 <__aeabi_dmul>
 800fd52:	460b      	mov	r3, r1
 800fd54:	4602      	mov	r2, r0
 800fd56:	4629      	mov	r1, r5
 800fd58:	4620      	mov	r0, r4
 800fd5a:	f7f0 fa39 	bl	80001d0 <__aeabi_dsub>
 800fd5e:	4b29      	ldr	r3, [pc, #164]	; (800fe04 <__kernel_cos+0x17c>)
 800fd60:	429e      	cmp	r6, r3
 800fd62:	4680      	mov	r8, r0
 800fd64:	4689      	mov	r9, r1
 800fd66:	dc11      	bgt.n	800fd8c <__kernel_cos+0x104>
 800fd68:	4602      	mov	r2, r0
 800fd6a:	460b      	mov	r3, r1
 800fd6c:	4650      	mov	r0, sl
 800fd6e:	4659      	mov	r1, fp
 800fd70:	f7f0 fa2e 	bl	80001d0 <__aeabi_dsub>
 800fd74:	460b      	mov	r3, r1
 800fd76:	4924      	ldr	r1, [pc, #144]	; (800fe08 <__kernel_cos+0x180>)
 800fd78:	4602      	mov	r2, r0
 800fd7a:	2000      	movs	r0, #0
 800fd7c:	f7f0 fa28 	bl	80001d0 <__aeabi_dsub>
 800fd80:	ecbd 8b02 	vpop	{d8}
 800fd84:	ec41 0b10 	vmov	d0, r0, r1
 800fd88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd8c:	4b1f      	ldr	r3, [pc, #124]	; (800fe0c <__kernel_cos+0x184>)
 800fd8e:	491e      	ldr	r1, [pc, #120]	; (800fe08 <__kernel_cos+0x180>)
 800fd90:	429e      	cmp	r6, r3
 800fd92:	bfcc      	ite	gt
 800fd94:	4d1e      	ldrgt	r5, [pc, #120]	; (800fe10 <__kernel_cos+0x188>)
 800fd96:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800fd9a:	2400      	movs	r4, #0
 800fd9c:	4622      	mov	r2, r4
 800fd9e:	462b      	mov	r3, r5
 800fda0:	2000      	movs	r0, #0
 800fda2:	f7f0 fa15 	bl	80001d0 <__aeabi_dsub>
 800fda6:	4622      	mov	r2, r4
 800fda8:	4606      	mov	r6, r0
 800fdaa:	460f      	mov	r7, r1
 800fdac:	462b      	mov	r3, r5
 800fdae:	4650      	mov	r0, sl
 800fdb0:	4659      	mov	r1, fp
 800fdb2:	f7f0 fa0d 	bl	80001d0 <__aeabi_dsub>
 800fdb6:	4642      	mov	r2, r8
 800fdb8:	464b      	mov	r3, r9
 800fdba:	f7f0 fa09 	bl	80001d0 <__aeabi_dsub>
 800fdbe:	4602      	mov	r2, r0
 800fdc0:	460b      	mov	r3, r1
 800fdc2:	4630      	mov	r0, r6
 800fdc4:	4639      	mov	r1, r7
 800fdc6:	e7d9      	b.n	800fd7c <__kernel_cos+0xf4>
 800fdc8:	2000      	movs	r0, #0
 800fdca:	490f      	ldr	r1, [pc, #60]	; (800fe08 <__kernel_cos+0x180>)
 800fdcc:	e7d8      	b.n	800fd80 <__kernel_cos+0xf8>
 800fdce:	bf00      	nop
 800fdd0:	be8838d4 	.word	0xbe8838d4
 800fdd4:	bda8fae9 	.word	0xbda8fae9
 800fdd8:	bdb4b1c4 	.word	0xbdb4b1c4
 800fddc:	3e21ee9e 	.word	0x3e21ee9e
 800fde0:	809c52ad 	.word	0x809c52ad
 800fde4:	3e927e4f 	.word	0x3e927e4f
 800fde8:	19cb1590 	.word	0x19cb1590
 800fdec:	3efa01a0 	.word	0x3efa01a0
 800fdf0:	16c15177 	.word	0x16c15177
 800fdf4:	3f56c16c 	.word	0x3f56c16c
 800fdf8:	5555554c 	.word	0x5555554c
 800fdfc:	3fa55555 	.word	0x3fa55555
 800fe00:	3fe00000 	.word	0x3fe00000
 800fe04:	3fd33332 	.word	0x3fd33332
 800fe08:	3ff00000 	.word	0x3ff00000
 800fe0c:	3fe90000 	.word	0x3fe90000
 800fe10:	3fd20000 	.word	0x3fd20000
 800fe14:	00000000 	.word	0x00000000

0800fe18 <__kernel_rem_pio2>:
 800fe18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe1c:	ed2d 8b02 	vpush	{d8}
 800fe20:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800fe24:	1ed4      	subs	r4, r2, #3
 800fe26:	9308      	str	r3, [sp, #32]
 800fe28:	9101      	str	r1, [sp, #4]
 800fe2a:	4bc5      	ldr	r3, [pc, #788]	; (8010140 <__kernel_rem_pio2+0x328>)
 800fe2c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800fe2e:	9009      	str	r0, [sp, #36]	; 0x24
 800fe30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fe34:	9304      	str	r3, [sp, #16]
 800fe36:	9b08      	ldr	r3, [sp, #32]
 800fe38:	3b01      	subs	r3, #1
 800fe3a:	9307      	str	r3, [sp, #28]
 800fe3c:	2318      	movs	r3, #24
 800fe3e:	fb94 f4f3 	sdiv	r4, r4, r3
 800fe42:	f06f 0317 	mvn.w	r3, #23
 800fe46:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800fe4a:	fb04 3303 	mla	r3, r4, r3, r3
 800fe4e:	eb03 0a02 	add.w	sl, r3, r2
 800fe52:	9b04      	ldr	r3, [sp, #16]
 800fe54:	9a07      	ldr	r2, [sp, #28]
 800fe56:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8010130 <__kernel_rem_pio2+0x318>
 800fe5a:	eb03 0802 	add.w	r8, r3, r2
 800fe5e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800fe60:	1aa7      	subs	r7, r4, r2
 800fe62:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800fe66:	ae22      	add	r6, sp, #136	; 0x88
 800fe68:	2500      	movs	r5, #0
 800fe6a:	4545      	cmp	r5, r8
 800fe6c:	dd13      	ble.n	800fe96 <__kernel_rem_pio2+0x7e>
 800fe6e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8010130 <__kernel_rem_pio2+0x318>
 800fe72:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800fe76:	2600      	movs	r6, #0
 800fe78:	9b04      	ldr	r3, [sp, #16]
 800fe7a:	429e      	cmp	r6, r3
 800fe7c:	dc32      	bgt.n	800fee4 <__kernel_rem_pio2+0xcc>
 800fe7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe80:	9302      	str	r3, [sp, #8]
 800fe82:	9b08      	ldr	r3, [sp, #32]
 800fe84:	199d      	adds	r5, r3, r6
 800fe86:	ab22      	add	r3, sp, #136	; 0x88
 800fe88:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fe8c:	9306      	str	r3, [sp, #24]
 800fe8e:	ec59 8b18 	vmov	r8, r9, d8
 800fe92:	2700      	movs	r7, #0
 800fe94:	e01f      	b.n	800fed6 <__kernel_rem_pio2+0xbe>
 800fe96:	42ef      	cmn	r7, r5
 800fe98:	d407      	bmi.n	800feaa <__kernel_rem_pio2+0x92>
 800fe9a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800fe9e:	f7f0 fae5 	bl	800046c <__aeabi_i2d>
 800fea2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fea6:	3501      	adds	r5, #1
 800fea8:	e7df      	b.n	800fe6a <__kernel_rem_pio2+0x52>
 800feaa:	ec51 0b18 	vmov	r0, r1, d8
 800feae:	e7f8      	b.n	800fea2 <__kernel_rem_pio2+0x8a>
 800feb0:	9906      	ldr	r1, [sp, #24]
 800feb2:	9d02      	ldr	r5, [sp, #8]
 800feb4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800feb8:	9106      	str	r1, [sp, #24]
 800feba:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800febe:	9502      	str	r5, [sp, #8]
 800fec0:	f7f0 fb3e 	bl	8000540 <__aeabi_dmul>
 800fec4:	4602      	mov	r2, r0
 800fec6:	460b      	mov	r3, r1
 800fec8:	4640      	mov	r0, r8
 800feca:	4649      	mov	r1, r9
 800fecc:	f7f0 f982 	bl	80001d4 <__adddf3>
 800fed0:	3701      	adds	r7, #1
 800fed2:	4680      	mov	r8, r0
 800fed4:	4689      	mov	r9, r1
 800fed6:	9b07      	ldr	r3, [sp, #28]
 800fed8:	429f      	cmp	r7, r3
 800feda:	dde9      	ble.n	800feb0 <__kernel_rem_pio2+0x98>
 800fedc:	e8eb 8902 	strd	r8, r9, [fp], #8
 800fee0:	3601      	adds	r6, #1
 800fee2:	e7c9      	b.n	800fe78 <__kernel_rem_pio2+0x60>
 800fee4:	9b04      	ldr	r3, [sp, #16]
 800fee6:	aa0e      	add	r2, sp, #56	; 0x38
 800fee8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800feec:	930c      	str	r3, [sp, #48]	; 0x30
 800feee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800fef0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fef4:	9c04      	ldr	r4, [sp, #16]
 800fef6:	930b      	str	r3, [sp, #44]	; 0x2c
 800fef8:	ab9a      	add	r3, sp, #616	; 0x268
 800fefa:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800fefe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ff02:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ff06:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800ff0a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800ff0e:	ab9a      	add	r3, sp, #616	; 0x268
 800ff10:	445b      	add	r3, fp
 800ff12:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800ff16:	2500      	movs	r5, #0
 800ff18:	1b63      	subs	r3, r4, r5
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	dc78      	bgt.n	8010010 <__kernel_rem_pio2+0x1f8>
 800ff1e:	4650      	mov	r0, sl
 800ff20:	ec49 8b10 	vmov	d0, r8, r9
 800ff24:	f000 fc98 	bl	8010858 <scalbn>
 800ff28:	ec57 6b10 	vmov	r6, r7, d0
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ff32:	ee10 0a10 	vmov	r0, s0
 800ff36:	4639      	mov	r1, r7
 800ff38:	f7f0 fb02 	bl	8000540 <__aeabi_dmul>
 800ff3c:	ec41 0b10 	vmov	d0, r0, r1
 800ff40:	f000 fb76 	bl	8010630 <floor>
 800ff44:	2200      	movs	r2, #0
 800ff46:	ec51 0b10 	vmov	r0, r1, d0
 800ff4a:	4b7e      	ldr	r3, [pc, #504]	; (8010144 <__kernel_rem_pio2+0x32c>)
 800ff4c:	f7f0 faf8 	bl	8000540 <__aeabi_dmul>
 800ff50:	4602      	mov	r2, r0
 800ff52:	460b      	mov	r3, r1
 800ff54:	4630      	mov	r0, r6
 800ff56:	4639      	mov	r1, r7
 800ff58:	f7f0 f93a 	bl	80001d0 <__aeabi_dsub>
 800ff5c:	460f      	mov	r7, r1
 800ff5e:	4606      	mov	r6, r0
 800ff60:	f7f0 fd9e 	bl	8000aa0 <__aeabi_d2iz>
 800ff64:	9006      	str	r0, [sp, #24]
 800ff66:	f7f0 fa81 	bl	800046c <__aeabi_i2d>
 800ff6a:	4602      	mov	r2, r0
 800ff6c:	460b      	mov	r3, r1
 800ff6e:	4630      	mov	r0, r6
 800ff70:	4639      	mov	r1, r7
 800ff72:	f7f0 f92d 	bl	80001d0 <__aeabi_dsub>
 800ff76:	f1ba 0f00 	cmp.w	sl, #0
 800ff7a:	4606      	mov	r6, r0
 800ff7c:	460f      	mov	r7, r1
 800ff7e:	dd6c      	ble.n	801005a <__kernel_rem_pio2+0x242>
 800ff80:	1e62      	subs	r2, r4, #1
 800ff82:	ab0e      	add	r3, sp, #56	; 0x38
 800ff84:	f1ca 0118 	rsb	r1, sl, #24
 800ff88:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ff8c:	9d06      	ldr	r5, [sp, #24]
 800ff8e:	fa40 f301 	asr.w	r3, r0, r1
 800ff92:	441d      	add	r5, r3
 800ff94:	408b      	lsls	r3, r1
 800ff96:	1ac0      	subs	r0, r0, r3
 800ff98:	ab0e      	add	r3, sp, #56	; 0x38
 800ff9a:	9506      	str	r5, [sp, #24]
 800ff9c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ffa0:	f1ca 0317 	rsb	r3, sl, #23
 800ffa4:	fa40 f303 	asr.w	r3, r0, r3
 800ffa8:	9302      	str	r3, [sp, #8]
 800ffaa:	9b02      	ldr	r3, [sp, #8]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	dd62      	ble.n	8010076 <__kernel_rem_pio2+0x25e>
 800ffb0:	9b06      	ldr	r3, [sp, #24]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	3301      	adds	r3, #1
 800ffb6:	9306      	str	r3, [sp, #24]
 800ffb8:	4615      	mov	r5, r2
 800ffba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ffbe:	4294      	cmp	r4, r2
 800ffc0:	f300 8095 	bgt.w	80100ee <__kernel_rem_pio2+0x2d6>
 800ffc4:	f1ba 0f00 	cmp.w	sl, #0
 800ffc8:	dd07      	ble.n	800ffda <__kernel_rem_pio2+0x1c2>
 800ffca:	f1ba 0f01 	cmp.w	sl, #1
 800ffce:	f000 80a2 	beq.w	8010116 <__kernel_rem_pio2+0x2fe>
 800ffd2:	f1ba 0f02 	cmp.w	sl, #2
 800ffd6:	f000 80c1 	beq.w	801015c <__kernel_rem_pio2+0x344>
 800ffda:	9b02      	ldr	r3, [sp, #8]
 800ffdc:	2b02      	cmp	r3, #2
 800ffde:	d14a      	bne.n	8010076 <__kernel_rem_pio2+0x25e>
 800ffe0:	4632      	mov	r2, r6
 800ffe2:	463b      	mov	r3, r7
 800ffe4:	2000      	movs	r0, #0
 800ffe6:	4958      	ldr	r1, [pc, #352]	; (8010148 <__kernel_rem_pio2+0x330>)
 800ffe8:	f7f0 f8f2 	bl	80001d0 <__aeabi_dsub>
 800ffec:	4606      	mov	r6, r0
 800ffee:	460f      	mov	r7, r1
 800fff0:	2d00      	cmp	r5, #0
 800fff2:	d040      	beq.n	8010076 <__kernel_rem_pio2+0x25e>
 800fff4:	4650      	mov	r0, sl
 800fff6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8010138 <__kernel_rem_pio2+0x320>
 800fffa:	f000 fc2d 	bl	8010858 <scalbn>
 800fffe:	4630      	mov	r0, r6
 8010000:	4639      	mov	r1, r7
 8010002:	ec53 2b10 	vmov	r2, r3, d0
 8010006:	f7f0 f8e3 	bl	80001d0 <__aeabi_dsub>
 801000a:	4606      	mov	r6, r0
 801000c:	460f      	mov	r7, r1
 801000e:	e032      	b.n	8010076 <__kernel_rem_pio2+0x25e>
 8010010:	2200      	movs	r2, #0
 8010012:	4b4e      	ldr	r3, [pc, #312]	; (801014c <__kernel_rem_pio2+0x334>)
 8010014:	4640      	mov	r0, r8
 8010016:	4649      	mov	r1, r9
 8010018:	f7f0 fa92 	bl	8000540 <__aeabi_dmul>
 801001c:	f7f0 fd40 	bl	8000aa0 <__aeabi_d2iz>
 8010020:	f7f0 fa24 	bl	800046c <__aeabi_i2d>
 8010024:	2200      	movs	r2, #0
 8010026:	4b4a      	ldr	r3, [pc, #296]	; (8010150 <__kernel_rem_pio2+0x338>)
 8010028:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801002c:	f7f0 fa88 	bl	8000540 <__aeabi_dmul>
 8010030:	4602      	mov	r2, r0
 8010032:	460b      	mov	r3, r1
 8010034:	4640      	mov	r0, r8
 8010036:	4649      	mov	r1, r9
 8010038:	f7f0 f8ca 	bl	80001d0 <__aeabi_dsub>
 801003c:	f7f0 fd30 	bl	8000aa0 <__aeabi_d2iz>
 8010040:	ab0e      	add	r3, sp, #56	; 0x38
 8010042:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8010046:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801004a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801004e:	f7f0 f8c1 	bl	80001d4 <__adddf3>
 8010052:	3501      	adds	r5, #1
 8010054:	4680      	mov	r8, r0
 8010056:	4689      	mov	r9, r1
 8010058:	e75e      	b.n	800ff18 <__kernel_rem_pio2+0x100>
 801005a:	d105      	bne.n	8010068 <__kernel_rem_pio2+0x250>
 801005c:	1e63      	subs	r3, r4, #1
 801005e:	aa0e      	add	r2, sp, #56	; 0x38
 8010060:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010064:	15c3      	asrs	r3, r0, #23
 8010066:	e79f      	b.n	800ffa8 <__kernel_rem_pio2+0x190>
 8010068:	2200      	movs	r2, #0
 801006a:	4b3a      	ldr	r3, [pc, #232]	; (8010154 <__kernel_rem_pio2+0x33c>)
 801006c:	f7f0 fcee 	bl	8000a4c <__aeabi_dcmpge>
 8010070:	2800      	cmp	r0, #0
 8010072:	d139      	bne.n	80100e8 <__kernel_rem_pio2+0x2d0>
 8010074:	9002      	str	r0, [sp, #8]
 8010076:	2200      	movs	r2, #0
 8010078:	2300      	movs	r3, #0
 801007a:	4630      	mov	r0, r6
 801007c:	4639      	mov	r1, r7
 801007e:	f7f0 fcc7 	bl	8000a10 <__aeabi_dcmpeq>
 8010082:	2800      	cmp	r0, #0
 8010084:	f000 80c7 	beq.w	8010216 <__kernel_rem_pio2+0x3fe>
 8010088:	1e65      	subs	r5, r4, #1
 801008a:	462b      	mov	r3, r5
 801008c:	2200      	movs	r2, #0
 801008e:	9904      	ldr	r1, [sp, #16]
 8010090:	428b      	cmp	r3, r1
 8010092:	da6a      	bge.n	801016a <__kernel_rem_pio2+0x352>
 8010094:	2a00      	cmp	r2, #0
 8010096:	f000 8088 	beq.w	80101aa <__kernel_rem_pio2+0x392>
 801009a:	ab0e      	add	r3, sp, #56	; 0x38
 801009c:	f1aa 0a18 	sub.w	sl, sl, #24
 80100a0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	f000 80b4 	beq.w	8010212 <__kernel_rem_pio2+0x3fa>
 80100aa:	4650      	mov	r0, sl
 80100ac:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8010138 <__kernel_rem_pio2+0x320>
 80100b0:	f000 fbd2 	bl	8010858 <scalbn>
 80100b4:	00ec      	lsls	r4, r5, #3
 80100b6:	ab72      	add	r3, sp, #456	; 0x1c8
 80100b8:	191e      	adds	r6, r3, r4
 80100ba:	ec59 8b10 	vmov	r8, r9, d0
 80100be:	f106 0a08 	add.w	sl, r6, #8
 80100c2:	462f      	mov	r7, r5
 80100c4:	2f00      	cmp	r7, #0
 80100c6:	f280 80df 	bge.w	8010288 <__kernel_rem_pio2+0x470>
 80100ca:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8010130 <__kernel_rem_pio2+0x318>
 80100ce:	f04f 0a00 	mov.w	sl, #0
 80100d2:	eba5 030a 	sub.w	r3, r5, sl
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	f2c0 810a 	blt.w	80102f0 <__kernel_rem_pio2+0x4d8>
 80100dc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8010158 <__kernel_rem_pio2+0x340>
 80100e0:	ec59 8b18 	vmov	r8, r9, d8
 80100e4:	2700      	movs	r7, #0
 80100e6:	e0f5      	b.n	80102d4 <__kernel_rem_pio2+0x4bc>
 80100e8:	2302      	movs	r3, #2
 80100ea:	9302      	str	r3, [sp, #8]
 80100ec:	e760      	b.n	800ffb0 <__kernel_rem_pio2+0x198>
 80100ee:	ab0e      	add	r3, sp, #56	; 0x38
 80100f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100f4:	b94d      	cbnz	r5, 801010a <__kernel_rem_pio2+0x2f2>
 80100f6:	b12b      	cbz	r3, 8010104 <__kernel_rem_pio2+0x2ec>
 80100f8:	a80e      	add	r0, sp, #56	; 0x38
 80100fa:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80100fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8010102:	2301      	movs	r3, #1
 8010104:	3201      	adds	r2, #1
 8010106:	461d      	mov	r5, r3
 8010108:	e759      	b.n	800ffbe <__kernel_rem_pio2+0x1a6>
 801010a:	a80e      	add	r0, sp, #56	; 0x38
 801010c:	1acb      	subs	r3, r1, r3
 801010e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8010112:	462b      	mov	r3, r5
 8010114:	e7f6      	b.n	8010104 <__kernel_rem_pio2+0x2ec>
 8010116:	1e62      	subs	r2, r4, #1
 8010118:	ab0e      	add	r3, sp, #56	; 0x38
 801011a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801011e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010122:	a90e      	add	r1, sp, #56	; 0x38
 8010124:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010128:	e757      	b.n	800ffda <__kernel_rem_pio2+0x1c2>
 801012a:	bf00      	nop
 801012c:	f3af 8000 	nop.w
	...
 801013c:	3ff00000 	.word	0x3ff00000
 8010140:	08010ec8 	.word	0x08010ec8
 8010144:	40200000 	.word	0x40200000
 8010148:	3ff00000 	.word	0x3ff00000
 801014c:	3e700000 	.word	0x3e700000
 8010150:	41700000 	.word	0x41700000
 8010154:	3fe00000 	.word	0x3fe00000
 8010158:	08010e88 	.word	0x08010e88
 801015c:	1e62      	subs	r2, r4, #1
 801015e:	ab0e      	add	r3, sp, #56	; 0x38
 8010160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010164:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010168:	e7db      	b.n	8010122 <__kernel_rem_pio2+0x30a>
 801016a:	a90e      	add	r1, sp, #56	; 0x38
 801016c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010170:	3b01      	subs	r3, #1
 8010172:	430a      	orrs	r2, r1
 8010174:	e78b      	b.n	801008e <__kernel_rem_pio2+0x276>
 8010176:	3301      	adds	r3, #1
 8010178:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801017c:	2900      	cmp	r1, #0
 801017e:	d0fa      	beq.n	8010176 <__kernel_rem_pio2+0x35e>
 8010180:	9a08      	ldr	r2, [sp, #32]
 8010182:	4422      	add	r2, r4
 8010184:	00d2      	lsls	r2, r2, #3
 8010186:	a922      	add	r1, sp, #136	; 0x88
 8010188:	18e3      	adds	r3, r4, r3
 801018a:	9206      	str	r2, [sp, #24]
 801018c:	440a      	add	r2, r1
 801018e:	9302      	str	r3, [sp, #8]
 8010190:	f10b 0108 	add.w	r1, fp, #8
 8010194:	f102 0308 	add.w	r3, r2, #8
 8010198:	1c66      	adds	r6, r4, #1
 801019a:	910a      	str	r1, [sp, #40]	; 0x28
 801019c:	2500      	movs	r5, #0
 801019e:	930d      	str	r3, [sp, #52]	; 0x34
 80101a0:	9b02      	ldr	r3, [sp, #8]
 80101a2:	42b3      	cmp	r3, r6
 80101a4:	da04      	bge.n	80101b0 <__kernel_rem_pio2+0x398>
 80101a6:	461c      	mov	r4, r3
 80101a8:	e6a6      	b.n	800fef8 <__kernel_rem_pio2+0xe0>
 80101aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80101ac:	2301      	movs	r3, #1
 80101ae:	e7e3      	b.n	8010178 <__kernel_rem_pio2+0x360>
 80101b0:	9b06      	ldr	r3, [sp, #24]
 80101b2:	18ef      	adds	r7, r5, r3
 80101b4:	ab22      	add	r3, sp, #136	; 0x88
 80101b6:	441f      	add	r7, r3
 80101b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101ba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80101be:	f7f0 f955 	bl	800046c <__aeabi_i2d>
 80101c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101c4:	461c      	mov	r4, r3
 80101c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80101c8:	e9c7 0100 	strd	r0, r1, [r7]
 80101cc:	eb03 0b05 	add.w	fp, r3, r5
 80101d0:	2700      	movs	r7, #0
 80101d2:	f04f 0800 	mov.w	r8, #0
 80101d6:	f04f 0900 	mov.w	r9, #0
 80101da:	9b07      	ldr	r3, [sp, #28]
 80101dc:	429f      	cmp	r7, r3
 80101de:	dd08      	ble.n	80101f2 <__kernel_rem_pio2+0x3da>
 80101e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101e2:	aa72      	add	r2, sp, #456	; 0x1c8
 80101e4:	18eb      	adds	r3, r5, r3
 80101e6:	4413      	add	r3, r2
 80101e8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80101ec:	3601      	adds	r6, #1
 80101ee:	3508      	adds	r5, #8
 80101f0:	e7d6      	b.n	80101a0 <__kernel_rem_pio2+0x388>
 80101f2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80101f6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80101fa:	f7f0 f9a1 	bl	8000540 <__aeabi_dmul>
 80101fe:	4602      	mov	r2, r0
 8010200:	460b      	mov	r3, r1
 8010202:	4640      	mov	r0, r8
 8010204:	4649      	mov	r1, r9
 8010206:	f7ef ffe5 	bl	80001d4 <__adddf3>
 801020a:	3701      	adds	r7, #1
 801020c:	4680      	mov	r8, r0
 801020e:	4689      	mov	r9, r1
 8010210:	e7e3      	b.n	80101da <__kernel_rem_pio2+0x3c2>
 8010212:	3d01      	subs	r5, #1
 8010214:	e741      	b.n	801009a <__kernel_rem_pio2+0x282>
 8010216:	f1ca 0000 	rsb	r0, sl, #0
 801021a:	ec47 6b10 	vmov	d0, r6, r7
 801021e:	f000 fb1b 	bl	8010858 <scalbn>
 8010222:	ec57 6b10 	vmov	r6, r7, d0
 8010226:	2200      	movs	r2, #0
 8010228:	4b99      	ldr	r3, [pc, #612]	; (8010490 <__kernel_rem_pio2+0x678>)
 801022a:	ee10 0a10 	vmov	r0, s0
 801022e:	4639      	mov	r1, r7
 8010230:	f7f0 fc0c 	bl	8000a4c <__aeabi_dcmpge>
 8010234:	b1f8      	cbz	r0, 8010276 <__kernel_rem_pio2+0x45e>
 8010236:	2200      	movs	r2, #0
 8010238:	4b96      	ldr	r3, [pc, #600]	; (8010494 <__kernel_rem_pio2+0x67c>)
 801023a:	4630      	mov	r0, r6
 801023c:	4639      	mov	r1, r7
 801023e:	f7f0 f97f 	bl	8000540 <__aeabi_dmul>
 8010242:	f7f0 fc2d 	bl	8000aa0 <__aeabi_d2iz>
 8010246:	4680      	mov	r8, r0
 8010248:	f7f0 f910 	bl	800046c <__aeabi_i2d>
 801024c:	2200      	movs	r2, #0
 801024e:	4b90      	ldr	r3, [pc, #576]	; (8010490 <__kernel_rem_pio2+0x678>)
 8010250:	f7f0 f976 	bl	8000540 <__aeabi_dmul>
 8010254:	460b      	mov	r3, r1
 8010256:	4602      	mov	r2, r0
 8010258:	4639      	mov	r1, r7
 801025a:	4630      	mov	r0, r6
 801025c:	f7ef ffb8 	bl	80001d0 <__aeabi_dsub>
 8010260:	f7f0 fc1e 	bl	8000aa0 <__aeabi_d2iz>
 8010264:	1c65      	adds	r5, r4, #1
 8010266:	ab0e      	add	r3, sp, #56	; 0x38
 8010268:	f10a 0a18 	add.w	sl, sl, #24
 801026c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010270:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010274:	e719      	b.n	80100aa <__kernel_rem_pio2+0x292>
 8010276:	4630      	mov	r0, r6
 8010278:	4639      	mov	r1, r7
 801027a:	f7f0 fc11 	bl	8000aa0 <__aeabi_d2iz>
 801027e:	ab0e      	add	r3, sp, #56	; 0x38
 8010280:	4625      	mov	r5, r4
 8010282:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010286:	e710      	b.n	80100aa <__kernel_rem_pio2+0x292>
 8010288:	ab0e      	add	r3, sp, #56	; 0x38
 801028a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801028e:	f7f0 f8ed 	bl	800046c <__aeabi_i2d>
 8010292:	4642      	mov	r2, r8
 8010294:	464b      	mov	r3, r9
 8010296:	f7f0 f953 	bl	8000540 <__aeabi_dmul>
 801029a:	2200      	movs	r2, #0
 801029c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80102a0:	4b7c      	ldr	r3, [pc, #496]	; (8010494 <__kernel_rem_pio2+0x67c>)
 80102a2:	4640      	mov	r0, r8
 80102a4:	4649      	mov	r1, r9
 80102a6:	f7f0 f94b 	bl	8000540 <__aeabi_dmul>
 80102aa:	3f01      	subs	r7, #1
 80102ac:	4680      	mov	r8, r0
 80102ae:	4689      	mov	r9, r1
 80102b0:	e708      	b.n	80100c4 <__kernel_rem_pio2+0x2ac>
 80102b2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80102b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ba:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80102be:	f7f0 f93f 	bl	8000540 <__aeabi_dmul>
 80102c2:	4602      	mov	r2, r0
 80102c4:	460b      	mov	r3, r1
 80102c6:	4640      	mov	r0, r8
 80102c8:	4649      	mov	r1, r9
 80102ca:	f7ef ff83 	bl	80001d4 <__adddf3>
 80102ce:	3701      	adds	r7, #1
 80102d0:	4680      	mov	r8, r0
 80102d2:	4689      	mov	r9, r1
 80102d4:	9b04      	ldr	r3, [sp, #16]
 80102d6:	429f      	cmp	r7, r3
 80102d8:	dc01      	bgt.n	80102de <__kernel_rem_pio2+0x4c6>
 80102da:	45ba      	cmp	sl, r7
 80102dc:	dae9      	bge.n	80102b2 <__kernel_rem_pio2+0x49a>
 80102de:	ab4a      	add	r3, sp, #296	; 0x128
 80102e0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80102e4:	e9c3 8900 	strd	r8, r9, [r3]
 80102e8:	f10a 0a01 	add.w	sl, sl, #1
 80102ec:	3e08      	subs	r6, #8
 80102ee:	e6f0      	b.n	80100d2 <__kernel_rem_pio2+0x2ba>
 80102f0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80102f2:	2b03      	cmp	r3, #3
 80102f4:	d85b      	bhi.n	80103ae <__kernel_rem_pio2+0x596>
 80102f6:	e8df f003 	tbb	[pc, r3]
 80102fa:	264a      	.short	0x264a
 80102fc:	0226      	.short	0x0226
 80102fe:	ab9a      	add	r3, sp, #616	; 0x268
 8010300:	441c      	add	r4, r3
 8010302:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8010306:	46a2      	mov	sl, r4
 8010308:	46ab      	mov	fp, r5
 801030a:	f1bb 0f00 	cmp.w	fp, #0
 801030e:	dc6c      	bgt.n	80103ea <__kernel_rem_pio2+0x5d2>
 8010310:	46a2      	mov	sl, r4
 8010312:	46ab      	mov	fp, r5
 8010314:	f1bb 0f01 	cmp.w	fp, #1
 8010318:	f300 8086 	bgt.w	8010428 <__kernel_rem_pio2+0x610>
 801031c:	2000      	movs	r0, #0
 801031e:	2100      	movs	r1, #0
 8010320:	2d01      	cmp	r5, #1
 8010322:	f300 80a0 	bgt.w	8010466 <__kernel_rem_pio2+0x64e>
 8010326:	9b02      	ldr	r3, [sp, #8]
 8010328:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801032c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8010330:	2b00      	cmp	r3, #0
 8010332:	f040 809e 	bne.w	8010472 <__kernel_rem_pio2+0x65a>
 8010336:	9b01      	ldr	r3, [sp, #4]
 8010338:	e9c3 7800 	strd	r7, r8, [r3]
 801033c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8010340:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010344:	e033      	b.n	80103ae <__kernel_rem_pio2+0x596>
 8010346:	3408      	adds	r4, #8
 8010348:	ab4a      	add	r3, sp, #296	; 0x128
 801034a:	441c      	add	r4, r3
 801034c:	462e      	mov	r6, r5
 801034e:	2000      	movs	r0, #0
 8010350:	2100      	movs	r1, #0
 8010352:	2e00      	cmp	r6, #0
 8010354:	da3a      	bge.n	80103cc <__kernel_rem_pio2+0x5b4>
 8010356:	9b02      	ldr	r3, [sp, #8]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d03d      	beq.n	80103d8 <__kernel_rem_pio2+0x5c0>
 801035c:	4602      	mov	r2, r0
 801035e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010362:	9c01      	ldr	r4, [sp, #4]
 8010364:	e9c4 2300 	strd	r2, r3, [r4]
 8010368:	4602      	mov	r2, r0
 801036a:	460b      	mov	r3, r1
 801036c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8010370:	f7ef ff2e 	bl	80001d0 <__aeabi_dsub>
 8010374:	ae4c      	add	r6, sp, #304	; 0x130
 8010376:	2401      	movs	r4, #1
 8010378:	42a5      	cmp	r5, r4
 801037a:	da30      	bge.n	80103de <__kernel_rem_pio2+0x5c6>
 801037c:	9b02      	ldr	r3, [sp, #8]
 801037e:	b113      	cbz	r3, 8010386 <__kernel_rem_pio2+0x56e>
 8010380:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010384:	4619      	mov	r1, r3
 8010386:	9b01      	ldr	r3, [sp, #4]
 8010388:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801038c:	e00f      	b.n	80103ae <__kernel_rem_pio2+0x596>
 801038e:	ab9a      	add	r3, sp, #616	; 0x268
 8010390:	441c      	add	r4, r3
 8010392:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8010396:	2000      	movs	r0, #0
 8010398:	2100      	movs	r1, #0
 801039a:	2d00      	cmp	r5, #0
 801039c:	da10      	bge.n	80103c0 <__kernel_rem_pio2+0x5a8>
 801039e:	9b02      	ldr	r3, [sp, #8]
 80103a0:	b113      	cbz	r3, 80103a8 <__kernel_rem_pio2+0x590>
 80103a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80103a6:	4619      	mov	r1, r3
 80103a8:	9b01      	ldr	r3, [sp, #4]
 80103aa:	e9c3 0100 	strd	r0, r1, [r3]
 80103ae:	9b06      	ldr	r3, [sp, #24]
 80103b0:	f003 0007 	and.w	r0, r3, #7
 80103b4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80103b8:	ecbd 8b02 	vpop	{d8}
 80103bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103c0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80103c4:	f7ef ff06 	bl	80001d4 <__adddf3>
 80103c8:	3d01      	subs	r5, #1
 80103ca:	e7e6      	b.n	801039a <__kernel_rem_pio2+0x582>
 80103cc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80103d0:	f7ef ff00 	bl	80001d4 <__adddf3>
 80103d4:	3e01      	subs	r6, #1
 80103d6:	e7bc      	b.n	8010352 <__kernel_rem_pio2+0x53a>
 80103d8:	4602      	mov	r2, r0
 80103da:	460b      	mov	r3, r1
 80103dc:	e7c1      	b.n	8010362 <__kernel_rem_pio2+0x54a>
 80103de:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80103e2:	f7ef fef7 	bl	80001d4 <__adddf3>
 80103e6:	3401      	adds	r4, #1
 80103e8:	e7c6      	b.n	8010378 <__kernel_rem_pio2+0x560>
 80103ea:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80103ee:	ed3a 7b02 	vldmdb	sl!, {d7}
 80103f2:	4640      	mov	r0, r8
 80103f4:	ec53 2b17 	vmov	r2, r3, d7
 80103f8:	4649      	mov	r1, r9
 80103fa:	ed8d 7b04 	vstr	d7, [sp, #16]
 80103fe:	f7ef fee9 	bl	80001d4 <__adddf3>
 8010402:	4602      	mov	r2, r0
 8010404:	460b      	mov	r3, r1
 8010406:	4606      	mov	r6, r0
 8010408:	460f      	mov	r7, r1
 801040a:	4640      	mov	r0, r8
 801040c:	4649      	mov	r1, r9
 801040e:	f7ef fedf 	bl	80001d0 <__aeabi_dsub>
 8010412:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010416:	f7ef fedd 	bl	80001d4 <__adddf3>
 801041a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801041e:	e9ca 0100 	strd	r0, r1, [sl]
 8010422:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8010426:	e770      	b.n	801030a <__kernel_rem_pio2+0x4f2>
 8010428:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801042c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8010430:	4630      	mov	r0, r6
 8010432:	ec53 2b17 	vmov	r2, r3, d7
 8010436:	4639      	mov	r1, r7
 8010438:	ed8d 7b04 	vstr	d7, [sp, #16]
 801043c:	f7ef feca 	bl	80001d4 <__adddf3>
 8010440:	4602      	mov	r2, r0
 8010442:	460b      	mov	r3, r1
 8010444:	4680      	mov	r8, r0
 8010446:	4689      	mov	r9, r1
 8010448:	4630      	mov	r0, r6
 801044a:	4639      	mov	r1, r7
 801044c:	f7ef fec0 	bl	80001d0 <__aeabi_dsub>
 8010450:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010454:	f7ef febe 	bl	80001d4 <__adddf3>
 8010458:	f10b 3bff 	add.w	fp, fp, #4294967295
 801045c:	e9ca 0100 	strd	r0, r1, [sl]
 8010460:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8010464:	e756      	b.n	8010314 <__kernel_rem_pio2+0x4fc>
 8010466:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801046a:	f7ef feb3 	bl	80001d4 <__adddf3>
 801046e:	3d01      	subs	r5, #1
 8010470:	e756      	b.n	8010320 <__kernel_rem_pio2+0x508>
 8010472:	9b01      	ldr	r3, [sp, #4]
 8010474:	9a01      	ldr	r2, [sp, #4]
 8010476:	601f      	str	r7, [r3, #0]
 8010478:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801047c:	605c      	str	r4, [r3, #4]
 801047e:	609d      	str	r5, [r3, #8]
 8010480:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010484:	60d3      	str	r3, [r2, #12]
 8010486:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801048a:	6110      	str	r0, [r2, #16]
 801048c:	6153      	str	r3, [r2, #20]
 801048e:	e78e      	b.n	80103ae <__kernel_rem_pio2+0x596>
 8010490:	41700000 	.word	0x41700000
 8010494:	3e700000 	.word	0x3e700000

08010498 <__kernel_sin>:
 8010498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801049c:	ec55 4b10 	vmov	r4, r5, d0
 80104a0:	b085      	sub	sp, #20
 80104a2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80104a6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80104aa:	ed8d 1b00 	vstr	d1, [sp]
 80104ae:	9002      	str	r0, [sp, #8]
 80104b0:	da06      	bge.n	80104c0 <__kernel_sin+0x28>
 80104b2:	ee10 0a10 	vmov	r0, s0
 80104b6:	4629      	mov	r1, r5
 80104b8:	f7f0 faf2 	bl	8000aa0 <__aeabi_d2iz>
 80104bc:	2800      	cmp	r0, #0
 80104be:	d051      	beq.n	8010564 <__kernel_sin+0xcc>
 80104c0:	4622      	mov	r2, r4
 80104c2:	462b      	mov	r3, r5
 80104c4:	4620      	mov	r0, r4
 80104c6:	4629      	mov	r1, r5
 80104c8:	f7f0 f83a 	bl	8000540 <__aeabi_dmul>
 80104cc:	4682      	mov	sl, r0
 80104ce:	468b      	mov	fp, r1
 80104d0:	4602      	mov	r2, r0
 80104d2:	460b      	mov	r3, r1
 80104d4:	4620      	mov	r0, r4
 80104d6:	4629      	mov	r1, r5
 80104d8:	f7f0 f832 	bl	8000540 <__aeabi_dmul>
 80104dc:	a341      	add	r3, pc, #260	; (adr r3, 80105e4 <__kernel_sin+0x14c>)
 80104de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e2:	4680      	mov	r8, r0
 80104e4:	4689      	mov	r9, r1
 80104e6:	4650      	mov	r0, sl
 80104e8:	4659      	mov	r1, fp
 80104ea:	f7f0 f829 	bl	8000540 <__aeabi_dmul>
 80104ee:	a33f      	add	r3, pc, #252	; (adr r3, 80105ec <__kernel_sin+0x154>)
 80104f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f4:	f7ef fe6c 	bl	80001d0 <__aeabi_dsub>
 80104f8:	4652      	mov	r2, sl
 80104fa:	465b      	mov	r3, fp
 80104fc:	f7f0 f820 	bl	8000540 <__aeabi_dmul>
 8010500:	a33c      	add	r3, pc, #240	; (adr r3, 80105f4 <__kernel_sin+0x15c>)
 8010502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010506:	f7ef fe65 	bl	80001d4 <__adddf3>
 801050a:	4652      	mov	r2, sl
 801050c:	465b      	mov	r3, fp
 801050e:	f7f0 f817 	bl	8000540 <__aeabi_dmul>
 8010512:	a33a      	add	r3, pc, #232	; (adr r3, 80105fc <__kernel_sin+0x164>)
 8010514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010518:	f7ef fe5a 	bl	80001d0 <__aeabi_dsub>
 801051c:	4652      	mov	r2, sl
 801051e:	465b      	mov	r3, fp
 8010520:	f7f0 f80e 	bl	8000540 <__aeabi_dmul>
 8010524:	a337      	add	r3, pc, #220	; (adr r3, 8010604 <__kernel_sin+0x16c>)
 8010526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801052a:	f7ef fe53 	bl	80001d4 <__adddf3>
 801052e:	9b02      	ldr	r3, [sp, #8]
 8010530:	4606      	mov	r6, r0
 8010532:	460f      	mov	r7, r1
 8010534:	b9db      	cbnz	r3, 801056e <__kernel_sin+0xd6>
 8010536:	4602      	mov	r2, r0
 8010538:	460b      	mov	r3, r1
 801053a:	4650      	mov	r0, sl
 801053c:	4659      	mov	r1, fp
 801053e:	f7ef ffff 	bl	8000540 <__aeabi_dmul>
 8010542:	a325      	add	r3, pc, #148	; (adr r3, 80105d8 <__kernel_sin+0x140>)
 8010544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010548:	f7ef fe42 	bl	80001d0 <__aeabi_dsub>
 801054c:	4642      	mov	r2, r8
 801054e:	464b      	mov	r3, r9
 8010550:	f7ef fff6 	bl	8000540 <__aeabi_dmul>
 8010554:	4602      	mov	r2, r0
 8010556:	460b      	mov	r3, r1
 8010558:	4620      	mov	r0, r4
 801055a:	4629      	mov	r1, r5
 801055c:	f7ef fe3a 	bl	80001d4 <__adddf3>
 8010560:	4604      	mov	r4, r0
 8010562:	460d      	mov	r5, r1
 8010564:	ec45 4b10 	vmov	d0, r4, r5
 8010568:	b005      	add	sp, #20
 801056a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801056e:	2200      	movs	r2, #0
 8010570:	4b1b      	ldr	r3, [pc, #108]	; (80105e0 <__kernel_sin+0x148>)
 8010572:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010576:	f7ef ffe3 	bl	8000540 <__aeabi_dmul>
 801057a:	4632      	mov	r2, r6
 801057c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010580:	463b      	mov	r3, r7
 8010582:	4640      	mov	r0, r8
 8010584:	4649      	mov	r1, r9
 8010586:	f7ef ffdb 	bl	8000540 <__aeabi_dmul>
 801058a:	4602      	mov	r2, r0
 801058c:	460b      	mov	r3, r1
 801058e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010592:	f7ef fe1d 	bl	80001d0 <__aeabi_dsub>
 8010596:	4652      	mov	r2, sl
 8010598:	465b      	mov	r3, fp
 801059a:	f7ef ffd1 	bl	8000540 <__aeabi_dmul>
 801059e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105a2:	f7ef fe15 	bl	80001d0 <__aeabi_dsub>
 80105a6:	a30c      	add	r3, pc, #48	; (adr r3, 80105d8 <__kernel_sin+0x140>)
 80105a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ac:	4606      	mov	r6, r0
 80105ae:	460f      	mov	r7, r1
 80105b0:	4640      	mov	r0, r8
 80105b2:	4649      	mov	r1, r9
 80105b4:	f7ef ffc4 	bl	8000540 <__aeabi_dmul>
 80105b8:	4602      	mov	r2, r0
 80105ba:	460b      	mov	r3, r1
 80105bc:	4630      	mov	r0, r6
 80105be:	4639      	mov	r1, r7
 80105c0:	f7ef fe08 	bl	80001d4 <__adddf3>
 80105c4:	4602      	mov	r2, r0
 80105c6:	460b      	mov	r3, r1
 80105c8:	4620      	mov	r0, r4
 80105ca:	4629      	mov	r1, r5
 80105cc:	f7ef fe00 	bl	80001d0 <__aeabi_dsub>
 80105d0:	e7c6      	b.n	8010560 <__kernel_sin+0xc8>
 80105d2:	bf00      	nop
 80105d4:	f3af 8000 	nop.w
 80105d8:	55555549 	.word	0x55555549
 80105dc:	3fc55555 	.word	0x3fc55555
 80105e0:	3fe00000 	.word	0x3fe00000
 80105e4:	5acfd57c 	.word	0x5acfd57c
 80105e8:	3de5d93a 	.word	0x3de5d93a
 80105ec:	8a2b9ceb 	.word	0x8a2b9ceb
 80105f0:	3e5ae5e6 	.word	0x3e5ae5e6
 80105f4:	57b1fe7d 	.word	0x57b1fe7d
 80105f8:	3ec71de3 	.word	0x3ec71de3
 80105fc:	19c161d5 	.word	0x19c161d5
 8010600:	3f2a01a0 	.word	0x3f2a01a0
 8010604:	1110f8a6 	.word	0x1110f8a6
 8010608:	3f811111 	.word	0x3f811111

0801060c <fabs>:
 801060c:	ec51 0b10 	vmov	r0, r1, d0
 8010610:	ee10 2a10 	vmov	r2, s0
 8010614:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010618:	ec43 2b10 	vmov	d0, r2, r3
 801061c:	4770      	bx	lr

0801061e <finite>:
 801061e:	ee10 3a90 	vmov	r3, s1
 8010622:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8010626:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801062a:	0fc0      	lsrs	r0, r0, #31
 801062c:	4770      	bx	lr
	...

08010630 <floor>:
 8010630:	ec51 0b10 	vmov	r0, r1, d0
 8010634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010638:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801063c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010640:	2e13      	cmp	r6, #19
 8010642:	460c      	mov	r4, r1
 8010644:	ee10 5a10 	vmov	r5, s0
 8010648:	4680      	mov	r8, r0
 801064a:	dc34      	bgt.n	80106b6 <floor+0x86>
 801064c:	2e00      	cmp	r6, #0
 801064e:	da16      	bge.n	801067e <floor+0x4e>
 8010650:	a335      	add	r3, pc, #212	; (adr r3, 8010728 <floor+0xf8>)
 8010652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010656:	f7ef fdbd 	bl	80001d4 <__adddf3>
 801065a:	2200      	movs	r2, #0
 801065c:	2300      	movs	r3, #0
 801065e:	f7f0 f9ff 	bl	8000a60 <__aeabi_dcmpgt>
 8010662:	b148      	cbz	r0, 8010678 <floor+0x48>
 8010664:	2c00      	cmp	r4, #0
 8010666:	da59      	bge.n	801071c <floor+0xec>
 8010668:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801066c:	4a30      	ldr	r2, [pc, #192]	; (8010730 <floor+0x100>)
 801066e:	432b      	orrs	r3, r5
 8010670:	2500      	movs	r5, #0
 8010672:	42ab      	cmp	r3, r5
 8010674:	bf18      	it	ne
 8010676:	4614      	movne	r4, r2
 8010678:	4621      	mov	r1, r4
 801067a:	4628      	mov	r0, r5
 801067c:	e025      	b.n	80106ca <floor+0x9a>
 801067e:	4f2d      	ldr	r7, [pc, #180]	; (8010734 <floor+0x104>)
 8010680:	4137      	asrs	r7, r6
 8010682:	ea01 0307 	and.w	r3, r1, r7
 8010686:	4303      	orrs	r3, r0
 8010688:	d01f      	beq.n	80106ca <floor+0x9a>
 801068a:	a327      	add	r3, pc, #156	; (adr r3, 8010728 <floor+0xf8>)
 801068c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010690:	f7ef fda0 	bl	80001d4 <__adddf3>
 8010694:	2200      	movs	r2, #0
 8010696:	2300      	movs	r3, #0
 8010698:	f7f0 f9e2 	bl	8000a60 <__aeabi_dcmpgt>
 801069c:	2800      	cmp	r0, #0
 801069e:	d0eb      	beq.n	8010678 <floor+0x48>
 80106a0:	2c00      	cmp	r4, #0
 80106a2:	bfbe      	ittt	lt
 80106a4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80106a8:	fa43 f606 	asrlt.w	r6, r3, r6
 80106ac:	19a4      	addlt	r4, r4, r6
 80106ae:	ea24 0407 	bic.w	r4, r4, r7
 80106b2:	2500      	movs	r5, #0
 80106b4:	e7e0      	b.n	8010678 <floor+0x48>
 80106b6:	2e33      	cmp	r6, #51	; 0x33
 80106b8:	dd0b      	ble.n	80106d2 <floor+0xa2>
 80106ba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80106be:	d104      	bne.n	80106ca <floor+0x9a>
 80106c0:	ee10 2a10 	vmov	r2, s0
 80106c4:	460b      	mov	r3, r1
 80106c6:	f7ef fd85 	bl	80001d4 <__adddf3>
 80106ca:	ec41 0b10 	vmov	d0, r0, r1
 80106ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106d2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80106d6:	f04f 33ff 	mov.w	r3, #4294967295
 80106da:	fa23 f707 	lsr.w	r7, r3, r7
 80106de:	4207      	tst	r7, r0
 80106e0:	d0f3      	beq.n	80106ca <floor+0x9a>
 80106e2:	a311      	add	r3, pc, #68	; (adr r3, 8010728 <floor+0xf8>)
 80106e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e8:	f7ef fd74 	bl	80001d4 <__adddf3>
 80106ec:	2200      	movs	r2, #0
 80106ee:	2300      	movs	r3, #0
 80106f0:	f7f0 f9b6 	bl	8000a60 <__aeabi_dcmpgt>
 80106f4:	2800      	cmp	r0, #0
 80106f6:	d0bf      	beq.n	8010678 <floor+0x48>
 80106f8:	2c00      	cmp	r4, #0
 80106fa:	da02      	bge.n	8010702 <floor+0xd2>
 80106fc:	2e14      	cmp	r6, #20
 80106fe:	d103      	bne.n	8010708 <floor+0xd8>
 8010700:	3401      	adds	r4, #1
 8010702:	ea25 0507 	bic.w	r5, r5, r7
 8010706:	e7b7      	b.n	8010678 <floor+0x48>
 8010708:	2301      	movs	r3, #1
 801070a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801070e:	fa03 f606 	lsl.w	r6, r3, r6
 8010712:	4435      	add	r5, r6
 8010714:	4545      	cmp	r5, r8
 8010716:	bf38      	it	cc
 8010718:	18e4      	addcc	r4, r4, r3
 801071a:	e7f2      	b.n	8010702 <floor+0xd2>
 801071c:	2500      	movs	r5, #0
 801071e:	462c      	mov	r4, r5
 8010720:	e7aa      	b.n	8010678 <floor+0x48>
 8010722:	bf00      	nop
 8010724:	f3af 8000 	nop.w
 8010728:	8800759c 	.word	0x8800759c
 801072c:	7e37e43c 	.word	0x7e37e43c
 8010730:	bff00000 	.word	0xbff00000
 8010734:	000fffff 	.word	0x000fffff

08010738 <matherr>:
 8010738:	2000      	movs	r0, #0
 801073a:	4770      	bx	lr
 801073c:	0000      	movs	r0, r0
	...

08010740 <nan>:
 8010740:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010748 <nan+0x8>
 8010744:	4770      	bx	lr
 8010746:	bf00      	nop
 8010748:	00000000 	.word	0x00000000
 801074c:	7ff80000 	.word	0x7ff80000

08010750 <rint>:
 8010750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010752:	ec51 0b10 	vmov	r0, r1, d0
 8010756:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801075a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801075e:	2e13      	cmp	r6, #19
 8010760:	460b      	mov	r3, r1
 8010762:	ee10 4a10 	vmov	r4, s0
 8010766:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801076a:	dc56      	bgt.n	801081a <rint+0xca>
 801076c:	2e00      	cmp	r6, #0
 801076e:	da2b      	bge.n	80107c8 <rint+0x78>
 8010770:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8010774:	4302      	orrs	r2, r0
 8010776:	d023      	beq.n	80107c0 <rint+0x70>
 8010778:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801077c:	4302      	orrs	r2, r0
 801077e:	4254      	negs	r4, r2
 8010780:	4314      	orrs	r4, r2
 8010782:	0c4b      	lsrs	r3, r1, #17
 8010784:	0b24      	lsrs	r4, r4, #12
 8010786:	045b      	lsls	r3, r3, #17
 8010788:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801078c:	ea44 0103 	orr.w	r1, r4, r3
 8010790:	460b      	mov	r3, r1
 8010792:	492f      	ldr	r1, [pc, #188]	; (8010850 <rint+0x100>)
 8010794:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8010798:	e9d1 6700 	ldrd	r6, r7, [r1]
 801079c:	4602      	mov	r2, r0
 801079e:	4639      	mov	r1, r7
 80107a0:	4630      	mov	r0, r6
 80107a2:	f7ef fd17 	bl	80001d4 <__adddf3>
 80107a6:	e9cd 0100 	strd	r0, r1, [sp]
 80107aa:	463b      	mov	r3, r7
 80107ac:	4632      	mov	r2, r6
 80107ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80107b2:	f7ef fd0d 	bl	80001d0 <__aeabi_dsub>
 80107b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80107ba:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80107be:	4639      	mov	r1, r7
 80107c0:	ec41 0b10 	vmov	d0, r0, r1
 80107c4:	b003      	add	sp, #12
 80107c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107c8:	4a22      	ldr	r2, [pc, #136]	; (8010854 <rint+0x104>)
 80107ca:	4132      	asrs	r2, r6
 80107cc:	ea01 0702 	and.w	r7, r1, r2
 80107d0:	4307      	orrs	r7, r0
 80107d2:	d0f5      	beq.n	80107c0 <rint+0x70>
 80107d4:	0852      	lsrs	r2, r2, #1
 80107d6:	4011      	ands	r1, r2
 80107d8:	430c      	orrs	r4, r1
 80107da:	d00b      	beq.n	80107f4 <rint+0xa4>
 80107dc:	ea23 0202 	bic.w	r2, r3, r2
 80107e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80107e4:	2e13      	cmp	r6, #19
 80107e6:	fa43 f306 	asr.w	r3, r3, r6
 80107ea:	bf0c      	ite	eq
 80107ec:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80107f0:	2400      	movne	r4, #0
 80107f2:	4313      	orrs	r3, r2
 80107f4:	4916      	ldr	r1, [pc, #88]	; (8010850 <rint+0x100>)
 80107f6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80107fa:	4622      	mov	r2, r4
 80107fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010800:	4620      	mov	r0, r4
 8010802:	4629      	mov	r1, r5
 8010804:	f7ef fce6 	bl	80001d4 <__adddf3>
 8010808:	e9cd 0100 	strd	r0, r1, [sp]
 801080c:	4622      	mov	r2, r4
 801080e:	462b      	mov	r3, r5
 8010810:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010814:	f7ef fcdc 	bl	80001d0 <__aeabi_dsub>
 8010818:	e7d2      	b.n	80107c0 <rint+0x70>
 801081a:	2e33      	cmp	r6, #51	; 0x33
 801081c:	dd07      	ble.n	801082e <rint+0xde>
 801081e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010822:	d1cd      	bne.n	80107c0 <rint+0x70>
 8010824:	ee10 2a10 	vmov	r2, s0
 8010828:	f7ef fcd4 	bl	80001d4 <__adddf3>
 801082c:	e7c8      	b.n	80107c0 <rint+0x70>
 801082e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8010832:	f04f 32ff 	mov.w	r2, #4294967295
 8010836:	40f2      	lsrs	r2, r6
 8010838:	4210      	tst	r0, r2
 801083a:	d0c1      	beq.n	80107c0 <rint+0x70>
 801083c:	0852      	lsrs	r2, r2, #1
 801083e:	4210      	tst	r0, r2
 8010840:	bf1f      	itttt	ne
 8010842:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8010846:	ea20 0202 	bicne.w	r2, r0, r2
 801084a:	4134      	asrne	r4, r6
 801084c:	4314      	orrne	r4, r2
 801084e:	e7d1      	b.n	80107f4 <rint+0xa4>
 8010850:	08010ed8 	.word	0x08010ed8
 8010854:	000fffff 	.word	0x000fffff

08010858 <scalbn>:
 8010858:	b570      	push	{r4, r5, r6, lr}
 801085a:	ec55 4b10 	vmov	r4, r5, d0
 801085e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010862:	4606      	mov	r6, r0
 8010864:	462b      	mov	r3, r5
 8010866:	b9aa      	cbnz	r2, 8010894 <scalbn+0x3c>
 8010868:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801086c:	4323      	orrs	r3, r4
 801086e:	d03b      	beq.n	80108e8 <scalbn+0x90>
 8010870:	4b31      	ldr	r3, [pc, #196]	; (8010938 <scalbn+0xe0>)
 8010872:	4629      	mov	r1, r5
 8010874:	2200      	movs	r2, #0
 8010876:	ee10 0a10 	vmov	r0, s0
 801087a:	f7ef fe61 	bl	8000540 <__aeabi_dmul>
 801087e:	4b2f      	ldr	r3, [pc, #188]	; (801093c <scalbn+0xe4>)
 8010880:	429e      	cmp	r6, r3
 8010882:	4604      	mov	r4, r0
 8010884:	460d      	mov	r5, r1
 8010886:	da12      	bge.n	80108ae <scalbn+0x56>
 8010888:	a327      	add	r3, pc, #156	; (adr r3, 8010928 <scalbn+0xd0>)
 801088a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801088e:	f7ef fe57 	bl	8000540 <__aeabi_dmul>
 8010892:	e009      	b.n	80108a8 <scalbn+0x50>
 8010894:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010898:	428a      	cmp	r2, r1
 801089a:	d10c      	bne.n	80108b6 <scalbn+0x5e>
 801089c:	ee10 2a10 	vmov	r2, s0
 80108a0:	4620      	mov	r0, r4
 80108a2:	4629      	mov	r1, r5
 80108a4:	f7ef fc96 	bl	80001d4 <__adddf3>
 80108a8:	4604      	mov	r4, r0
 80108aa:	460d      	mov	r5, r1
 80108ac:	e01c      	b.n	80108e8 <scalbn+0x90>
 80108ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80108b2:	460b      	mov	r3, r1
 80108b4:	3a36      	subs	r2, #54	; 0x36
 80108b6:	4432      	add	r2, r6
 80108b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80108bc:	428a      	cmp	r2, r1
 80108be:	dd0b      	ble.n	80108d8 <scalbn+0x80>
 80108c0:	ec45 4b11 	vmov	d1, r4, r5
 80108c4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8010930 <scalbn+0xd8>
 80108c8:	f000 f917 	bl	8010afa <copysign>
 80108cc:	a318      	add	r3, pc, #96	; (adr r3, 8010930 <scalbn+0xd8>)
 80108ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d2:	ec51 0b10 	vmov	r0, r1, d0
 80108d6:	e7da      	b.n	801088e <scalbn+0x36>
 80108d8:	2a00      	cmp	r2, #0
 80108da:	dd08      	ble.n	80108ee <scalbn+0x96>
 80108dc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80108e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80108e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80108e8:	ec45 4b10 	vmov	d0, r4, r5
 80108ec:	bd70      	pop	{r4, r5, r6, pc}
 80108ee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80108f2:	da0d      	bge.n	8010910 <scalbn+0xb8>
 80108f4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80108f8:	429e      	cmp	r6, r3
 80108fa:	ec45 4b11 	vmov	d1, r4, r5
 80108fe:	dce1      	bgt.n	80108c4 <scalbn+0x6c>
 8010900:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8010928 <scalbn+0xd0>
 8010904:	f000 f8f9 	bl	8010afa <copysign>
 8010908:	a307      	add	r3, pc, #28	; (adr r3, 8010928 <scalbn+0xd0>)
 801090a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090e:	e7e0      	b.n	80108d2 <scalbn+0x7a>
 8010910:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010914:	3236      	adds	r2, #54	; 0x36
 8010916:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801091a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801091e:	4620      	mov	r0, r4
 8010920:	4629      	mov	r1, r5
 8010922:	2200      	movs	r2, #0
 8010924:	4b06      	ldr	r3, [pc, #24]	; (8010940 <scalbn+0xe8>)
 8010926:	e7b2      	b.n	801088e <scalbn+0x36>
 8010928:	c2f8f359 	.word	0xc2f8f359
 801092c:	01a56e1f 	.word	0x01a56e1f
 8010930:	8800759c 	.word	0x8800759c
 8010934:	7e37e43c 	.word	0x7e37e43c
 8010938:	43500000 	.word	0x43500000
 801093c:	ffff3cb0 	.word	0xffff3cb0
 8010940:	3c900000 	.word	0x3c900000

08010944 <atanf>:
 8010944:	b538      	push	{r3, r4, r5, lr}
 8010946:	ee10 5a10 	vmov	r5, s0
 801094a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801094e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8010952:	eef0 7a40 	vmov.f32	s15, s0
 8010956:	db10      	blt.n	801097a <atanf+0x36>
 8010958:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801095c:	dd04      	ble.n	8010968 <atanf+0x24>
 801095e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8010962:	eeb0 0a67 	vmov.f32	s0, s15
 8010966:	bd38      	pop	{r3, r4, r5, pc}
 8010968:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8010aa0 <atanf+0x15c>
 801096c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8010aa4 <atanf+0x160>
 8010970:	2d00      	cmp	r5, #0
 8010972:	bfd8      	it	le
 8010974:	eef0 7a47 	vmovle.f32	s15, s14
 8010978:	e7f3      	b.n	8010962 <atanf+0x1e>
 801097a:	4b4b      	ldr	r3, [pc, #300]	; (8010aa8 <atanf+0x164>)
 801097c:	429c      	cmp	r4, r3
 801097e:	dc10      	bgt.n	80109a2 <atanf+0x5e>
 8010980:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8010984:	da0a      	bge.n	801099c <atanf+0x58>
 8010986:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8010aac <atanf+0x168>
 801098a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801098e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010992:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801099a:	dce2      	bgt.n	8010962 <atanf+0x1e>
 801099c:	f04f 33ff 	mov.w	r3, #4294967295
 80109a0:	e013      	b.n	80109ca <atanf+0x86>
 80109a2:	f000 f8a3 	bl	8010aec <fabsf>
 80109a6:	4b42      	ldr	r3, [pc, #264]	; (8010ab0 <atanf+0x16c>)
 80109a8:	429c      	cmp	r4, r3
 80109aa:	dc4f      	bgt.n	8010a4c <atanf+0x108>
 80109ac:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80109b0:	429c      	cmp	r4, r3
 80109b2:	dc41      	bgt.n	8010a38 <atanf+0xf4>
 80109b4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80109b8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80109bc:	eea0 7a27 	vfma.f32	s14, s0, s15
 80109c0:	2300      	movs	r3, #0
 80109c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80109c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80109ca:	1c5a      	adds	r2, r3, #1
 80109cc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80109d0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010ab4 <atanf+0x170>
 80109d4:	eddf 5a38 	vldr	s11, [pc, #224]	; 8010ab8 <atanf+0x174>
 80109d8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8010abc <atanf+0x178>
 80109dc:	ee66 6a06 	vmul.f32	s13, s12, s12
 80109e0:	eee6 5a87 	vfma.f32	s11, s13, s14
 80109e4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8010ac0 <atanf+0x17c>
 80109e8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80109ec:	eddf 5a35 	vldr	s11, [pc, #212]	; 8010ac4 <atanf+0x180>
 80109f0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80109f4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8010ac8 <atanf+0x184>
 80109f8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80109fc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8010acc <atanf+0x188>
 8010a00:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010a04:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8010ad0 <atanf+0x18c>
 8010a08:	eea6 5a87 	vfma.f32	s10, s13, s14
 8010a0c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8010ad4 <atanf+0x190>
 8010a10:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010a14:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8010ad8 <atanf+0x194>
 8010a18:	eea7 5a26 	vfma.f32	s10, s14, s13
 8010a1c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8010adc <atanf+0x198>
 8010a20:	eea5 7a26 	vfma.f32	s14, s10, s13
 8010a24:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010a28:	eea5 7a86 	vfma.f32	s14, s11, s12
 8010a2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010a30:	d121      	bne.n	8010a76 <atanf+0x132>
 8010a32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010a36:	e794      	b.n	8010962 <atanf+0x1e>
 8010a38:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010a3c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010a40:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010a44:	2301      	movs	r3, #1
 8010a46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010a4a:	e7be      	b.n	80109ca <atanf+0x86>
 8010a4c:	4b24      	ldr	r3, [pc, #144]	; (8010ae0 <atanf+0x19c>)
 8010a4e:	429c      	cmp	r4, r3
 8010a50:	dc0b      	bgt.n	8010a6a <atanf+0x126>
 8010a52:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010a56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010a5a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010a5e:	2302      	movs	r3, #2
 8010a60:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010a68:	e7af      	b.n	80109ca <atanf+0x86>
 8010a6a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010a6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010a72:	2303      	movs	r3, #3
 8010a74:	e7a9      	b.n	80109ca <atanf+0x86>
 8010a76:	4a1b      	ldr	r2, [pc, #108]	; (8010ae4 <atanf+0x1a0>)
 8010a78:	491b      	ldr	r1, [pc, #108]	; (8010ae8 <atanf+0x1a4>)
 8010a7a:	009b      	lsls	r3, r3, #2
 8010a7c:	441a      	add	r2, r3
 8010a7e:	440b      	add	r3, r1
 8010a80:	edd3 6a00 	vldr	s13, [r3]
 8010a84:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010a88:	2d00      	cmp	r5, #0
 8010a8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a8e:	ed92 7a00 	vldr	s14, [r2]
 8010a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a96:	bfb8      	it	lt
 8010a98:	eef1 7a67 	vneglt.f32	s15, s15
 8010a9c:	e761      	b.n	8010962 <atanf+0x1e>
 8010a9e:	bf00      	nop
 8010aa0:	bfc90fdb 	.word	0xbfc90fdb
 8010aa4:	3fc90fdb 	.word	0x3fc90fdb
 8010aa8:	3edfffff 	.word	0x3edfffff
 8010aac:	7149f2ca 	.word	0x7149f2ca
 8010ab0:	3f97ffff 	.word	0x3f97ffff
 8010ab4:	3c8569d7 	.word	0x3c8569d7
 8010ab8:	3d4bda59 	.word	0x3d4bda59
 8010abc:	bd6ef16b 	.word	0xbd6ef16b
 8010ac0:	3d886b35 	.word	0x3d886b35
 8010ac4:	3dba2e6e 	.word	0x3dba2e6e
 8010ac8:	3e124925 	.word	0x3e124925
 8010acc:	3eaaaaab 	.word	0x3eaaaaab
 8010ad0:	bd15a221 	.word	0xbd15a221
 8010ad4:	bd9d8795 	.word	0xbd9d8795
 8010ad8:	bde38e38 	.word	0xbde38e38
 8010adc:	be4ccccd 	.word	0xbe4ccccd
 8010ae0:	401bffff 	.word	0x401bffff
 8010ae4:	08010ee8 	.word	0x08010ee8
 8010ae8:	08010ef8 	.word	0x08010ef8

08010aec <fabsf>:
 8010aec:	ee10 3a10 	vmov	r3, s0
 8010af0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010af4:	ee00 3a10 	vmov	s0, r3
 8010af8:	4770      	bx	lr

08010afa <copysign>:
 8010afa:	ec51 0b10 	vmov	r0, r1, d0
 8010afe:	ee11 0a90 	vmov	r0, s3
 8010b02:	ee10 2a10 	vmov	r2, s0
 8010b06:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010b0a:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8010b0e:	ea41 0300 	orr.w	r3, r1, r0
 8010b12:	ec43 2b10 	vmov	d0, r2, r3
 8010b16:	4770      	bx	lr

08010b18 <__errno>:
 8010b18:	4b01      	ldr	r3, [pc, #4]	; (8010b20 <__errno+0x8>)
 8010b1a:	6818      	ldr	r0, [r3, #0]
 8010b1c:	4770      	bx	lr
 8010b1e:	bf00      	nop
 8010b20:	20000018 	.word	0x20000018

08010b24 <__libc_init_array>:
 8010b24:	b570      	push	{r4, r5, r6, lr}
 8010b26:	4e0d      	ldr	r6, [pc, #52]	; (8010b5c <__libc_init_array+0x38>)
 8010b28:	4c0d      	ldr	r4, [pc, #52]	; (8010b60 <__libc_init_array+0x3c>)
 8010b2a:	1ba4      	subs	r4, r4, r6
 8010b2c:	10a4      	asrs	r4, r4, #2
 8010b2e:	2500      	movs	r5, #0
 8010b30:	42a5      	cmp	r5, r4
 8010b32:	d109      	bne.n	8010b48 <__libc_init_array+0x24>
 8010b34:	4e0b      	ldr	r6, [pc, #44]	; (8010b64 <__libc_init_array+0x40>)
 8010b36:	4c0c      	ldr	r4, [pc, #48]	; (8010b68 <__libc_init_array+0x44>)
 8010b38:	f000 f878 	bl	8010c2c <_init>
 8010b3c:	1ba4      	subs	r4, r4, r6
 8010b3e:	10a4      	asrs	r4, r4, #2
 8010b40:	2500      	movs	r5, #0
 8010b42:	42a5      	cmp	r5, r4
 8010b44:	d105      	bne.n	8010b52 <__libc_init_array+0x2e>
 8010b46:	bd70      	pop	{r4, r5, r6, pc}
 8010b48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010b4c:	4798      	blx	r3
 8010b4e:	3501      	adds	r5, #1
 8010b50:	e7ee      	b.n	8010b30 <__libc_init_array+0xc>
 8010b52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010b56:	4798      	blx	r3
 8010b58:	3501      	adds	r5, #1
 8010b5a:	e7f2      	b.n	8010b42 <__libc_init_array+0x1e>
 8010b5c:	08010f10 	.word	0x08010f10
 8010b60:	08010f10 	.word	0x08010f10
 8010b64:	08010f10 	.word	0x08010f10
 8010b68:	08010f1c 	.word	0x08010f1c

08010b6c <free>:
 8010b6c:	4b02      	ldr	r3, [pc, #8]	; (8010b78 <free+0xc>)
 8010b6e:	4601      	mov	r1, r0
 8010b70:	6818      	ldr	r0, [r3, #0]
 8010b72:	f000 b80b 	b.w	8010b8c <_free_r>
 8010b76:	bf00      	nop
 8010b78:	20000018 	.word	0x20000018

08010b7c <memset>:
 8010b7c:	4402      	add	r2, r0
 8010b7e:	4603      	mov	r3, r0
 8010b80:	4293      	cmp	r3, r2
 8010b82:	d100      	bne.n	8010b86 <memset+0xa>
 8010b84:	4770      	bx	lr
 8010b86:	f803 1b01 	strb.w	r1, [r3], #1
 8010b8a:	e7f9      	b.n	8010b80 <memset+0x4>

08010b8c <_free_r>:
 8010b8c:	b538      	push	{r3, r4, r5, lr}
 8010b8e:	4605      	mov	r5, r0
 8010b90:	2900      	cmp	r1, #0
 8010b92:	d045      	beq.n	8010c20 <_free_r+0x94>
 8010b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b98:	1f0c      	subs	r4, r1, #4
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	bfb8      	it	lt
 8010b9e:	18e4      	addlt	r4, r4, r3
 8010ba0:	f000 f842 	bl	8010c28 <__malloc_lock>
 8010ba4:	4a1f      	ldr	r2, [pc, #124]	; (8010c24 <_free_r+0x98>)
 8010ba6:	6813      	ldr	r3, [r2, #0]
 8010ba8:	4610      	mov	r0, r2
 8010baa:	b933      	cbnz	r3, 8010bba <_free_r+0x2e>
 8010bac:	6063      	str	r3, [r4, #4]
 8010bae:	6014      	str	r4, [r2, #0]
 8010bb0:	4628      	mov	r0, r5
 8010bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010bb6:	f000 b838 	b.w	8010c2a <__malloc_unlock>
 8010bba:	42a3      	cmp	r3, r4
 8010bbc:	d90c      	bls.n	8010bd8 <_free_r+0x4c>
 8010bbe:	6821      	ldr	r1, [r4, #0]
 8010bc0:	1862      	adds	r2, r4, r1
 8010bc2:	4293      	cmp	r3, r2
 8010bc4:	bf04      	itt	eq
 8010bc6:	681a      	ldreq	r2, [r3, #0]
 8010bc8:	685b      	ldreq	r3, [r3, #4]
 8010bca:	6063      	str	r3, [r4, #4]
 8010bcc:	bf04      	itt	eq
 8010bce:	1852      	addeq	r2, r2, r1
 8010bd0:	6022      	streq	r2, [r4, #0]
 8010bd2:	6004      	str	r4, [r0, #0]
 8010bd4:	e7ec      	b.n	8010bb0 <_free_r+0x24>
 8010bd6:	4613      	mov	r3, r2
 8010bd8:	685a      	ldr	r2, [r3, #4]
 8010bda:	b10a      	cbz	r2, 8010be0 <_free_r+0x54>
 8010bdc:	42a2      	cmp	r2, r4
 8010bde:	d9fa      	bls.n	8010bd6 <_free_r+0x4a>
 8010be0:	6819      	ldr	r1, [r3, #0]
 8010be2:	1858      	adds	r0, r3, r1
 8010be4:	42a0      	cmp	r0, r4
 8010be6:	d10b      	bne.n	8010c00 <_free_r+0x74>
 8010be8:	6820      	ldr	r0, [r4, #0]
 8010bea:	4401      	add	r1, r0
 8010bec:	1858      	adds	r0, r3, r1
 8010bee:	4282      	cmp	r2, r0
 8010bf0:	6019      	str	r1, [r3, #0]
 8010bf2:	d1dd      	bne.n	8010bb0 <_free_r+0x24>
 8010bf4:	6810      	ldr	r0, [r2, #0]
 8010bf6:	6852      	ldr	r2, [r2, #4]
 8010bf8:	605a      	str	r2, [r3, #4]
 8010bfa:	4401      	add	r1, r0
 8010bfc:	6019      	str	r1, [r3, #0]
 8010bfe:	e7d7      	b.n	8010bb0 <_free_r+0x24>
 8010c00:	d902      	bls.n	8010c08 <_free_r+0x7c>
 8010c02:	230c      	movs	r3, #12
 8010c04:	602b      	str	r3, [r5, #0]
 8010c06:	e7d3      	b.n	8010bb0 <_free_r+0x24>
 8010c08:	6820      	ldr	r0, [r4, #0]
 8010c0a:	1821      	adds	r1, r4, r0
 8010c0c:	428a      	cmp	r2, r1
 8010c0e:	bf04      	itt	eq
 8010c10:	6811      	ldreq	r1, [r2, #0]
 8010c12:	6852      	ldreq	r2, [r2, #4]
 8010c14:	6062      	str	r2, [r4, #4]
 8010c16:	bf04      	itt	eq
 8010c18:	1809      	addeq	r1, r1, r0
 8010c1a:	6021      	streq	r1, [r4, #0]
 8010c1c:	605c      	str	r4, [r3, #4]
 8010c1e:	e7c7      	b.n	8010bb0 <_free_r+0x24>
 8010c20:	bd38      	pop	{r3, r4, r5, pc}
 8010c22:	bf00      	nop
 8010c24:	20000ca4 	.word	0x20000ca4

08010c28 <__malloc_lock>:
 8010c28:	4770      	bx	lr

08010c2a <__malloc_unlock>:
 8010c2a:	4770      	bx	lr

08010c2c <_init>:
 8010c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c2e:	bf00      	nop
 8010c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c32:	bc08      	pop	{r3}
 8010c34:	469e      	mov	lr, r3
 8010c36:	4770      	bx	lr

08010c38 <_fini>:
 8010c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c3a:	bf00      	nop
 8010c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c3e:	bc08      	pop	{r3}
 8010c40:	469e      	mov	lr, r3
 8010c42:	4770      	bx	lr
